
Sensori_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006964  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000334  08006b08  08006b08  00016b08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e3c  08006e3c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006e3c  08006e3c  00016e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e44  08006e44  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e44  08006e44  00016e44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e48  08006e48  00016e48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006e4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  20000070  08006ebc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  08006ebc  000201dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ca90  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020bc  00000000  00000000  0002cb30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008d8  00000000  00000000  0002ebf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007f0  00000000  00000000  0002f4c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017b54  00000000  00000000  0002fcb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c2de  00000000  00000000  0004780c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000923a3  00000000  00000000  00053aea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e5e8d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000337c  00000000  00000000  000e5ee0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006aec 	.word	0x08006aec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08006aec 	.word	0x08006aec

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_uldivmod>:
 8000b7c:	b953      	cbnz	r3, 8000b94 <__aeabi_uldivmod+0x18>
 8000b7e:	b94a      	cbnz	r2, 8000b94 <__aeabi_uldivmod+0x18>
 8000b80:	2900      	cmp	r1, #0
 8000b82:	bf08      	it	eq
 8000b84:	2800      	cmpeq	r0, #0
 8000b86:	bf1c      	itt	ne
 8000b88:	f04f 31ff 	movne.w	r1, #4294967295
 8000b8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b90:	f000 b96e 	b.w	8000e70 <__aeabi_idiv0>
 8000b94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b9c:	f000 f806 	bl	8000bac <__udivmoddi4>
 8000ba0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba8:	b004      	add	sp, #16
 8000baa:	4770      	bx	lr

08000bac <__udivmoddi4>:
 8000bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bb0:	9d08      	ldr	r5, [sp, #32]
 8000bb2:	4604      	mov	r4, r0
 8000bb4:	468c      	mov	ip, r1
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	f040 8083 	bne.w	8000cc2 <__udivmoddi4+0x116>
 8000bbc:	428a      	cmp	r2, r1
 8000bbe:	4617      	mov	r7, r2
 8000bc0:	d947      	bls.n	8000c52 <__udivmoddi4+0xa6>
 8000bc2:	fab2 f282 	clz	r2, r2
 8000bc6:	b142      	cbz	r2, 8000bda <__udivmoddi4+0x2e>
 8000bc8:	f1c2 0020 	rsb	r0, r2, #32
 8000bcc:	fa24 f000 	lsr.w	r0, r4, r0
 8000bd0:	4091      	lsls	r1, r2
 8000bd2:	4097      	lsls	r7, r2
 8000bd4:	ea40 0c01 	orr.w	ip, r0, r1
 8000bd8:	4094      	lsls	r4, r2
 8000bda:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bde:	0c23      	lsrs	r3, r4, #16
 8000be0:	fbbc f6f8 	udiv	r6, ip, r8
 8000be4:	fa1f fe87 	uxth.w	lr, r7
 8000be8:	fb08 c116 	mls	r1, r8, r6, ip
 8000bec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bf0:	fb06 f10e 	mul.w	r1, r6, lr
 8000bf4:	4299      	cmp	r1, r3
 8000bf6:	d909      	bls.n	8000c0c <__udivmoddi4+0x60>
 8000bf8:	18fb      	adds	r3, r7, r3
 8000bfa:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bfe:	f080 8119 	bcs.w	8000e34 <__udivmoddi4+0x288>
 8000c02:	4299      	cmp	r1, r3
 8000c04:	f240 8116 	bls.w	8000e34 <__udivmoddi4+0x288>
 8000c08:	3e02      	subs	r6, #2
 8000c0a:	443b      	add	r3, r7
 8000c0c:	1a5b      	subs	r3, r3, r1
 8000c0e:	b2a4      	uxth	r4, r4
 8000c10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c14:	fb08 3310 	mls	r3, r8, r0, r3
 8000c18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c1c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c20:	45a6      	cmp	lr, r4
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x8c>
 8000c24:	193c      	adds	r4, r7, r4
 8000c26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c2a:	f080 8105 	bcs.w	8000e38 <__udivmoddi4+0x28c>
 8000c2e:	45a6      	cmp	lr, r4
 8000c30:	f240 8102 	bls.w	8000e38 <__udivmoddi4+0x28c>
 8000c34:	3802      	subs	r0, #2
 8000c36:	443c      	add	r4, r7
 8000c38:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c3c:	eba4 040e 	sub.w	r4, r4, lr
 8000c40:	2600      	movs	r6, #0
 8000c42:	b11d      	cbz	r5, 8000c4c <__udivmoddi4+0xa0>
 8000c44:	40d4      	lsrs	r4, r2
 8000c46:	2300      	movs	r3, #0
 8000c48:	e9c5 4300 	strd	r4, r3, [r5]
 8000c4c:	4631      	mov	r1, r6
 8000c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c52:	b902      	cbnz	r2, 8000c56 <__udivmoddi4+0xaa>
 8000c54:	deff      	udf	#255	; 0xff
 8000c56:	fab2 f282 	clz	r2, r2
 8000c5a:	2a00      	cmp	r2, #0
 8000c5c:	d150      	bne.n	8000d00 <__udivmoddi4+0x154>
 8000c5e:	1bcb      	subs	r3, r1, r7
 8000c60:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c64:	fa1f f887 	uxth.w	r8, r7
 8000c68:	2601      	movs	r6, #1
 8000c6a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c6e:	0c21      	lsrs	r1, r4, #16
 8000c70:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c78:	fb08 f30c 	mul.w	r3, r8, ip
 8000c7c:	428b      	cmp	r3, r1
 8000c7e:	d907      	bls.n	8000c90 <__udivmoddi4+0xe4>
 8000c80:	1879      	adds	r1, r7, r1
 8000c82:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c86:	d202      	bcs.n	8000c8e <__udivmoddi4+0xe2>
 8000c88:	428b      	cmp	r3, r1
 8000c8a:	f200 80e9 	bhi.w	8000e60 <__udivmoddi4+0x2b4>
 8000c8e:	4684      	mov	ip, r0
 8000c90:	1ac9      	subs	r1, r1, r3
 8000c92:	b2a3      	uxth	r3, r4
 8000c94:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c98:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c9c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ca0:	fb08 f800 	mul.w	r8, r8, r0
 8000ca4:	45a0      	cmp	r8, r4
 8000ca6:	d907      	bls.n	8000cb8 <__udivmoddi4+0x10c>
 8000ca8:	193c      	adds	r4, r7, r4
 8000caa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cae:	d202      	bcs.n	8000cb6 <__udivmoddi4+0x10a>
 8000cb0:	45a0      	cmp	r8, r4
 8000cb2:	f200 80d9 	bhi.w	8000e68 <__udivmoddi4+0x2bc>
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	eba4 0408 	sub.w	r4, r4, r8
 8000cbc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cc0:	e7bf      	b.n	8000c42 <__udivmoddi4+0x96>
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0x12e>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80b1 	beq.w	8000e2e <__udivmoddi4+0x282>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x1cc>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0x140>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80b8 	bhi.w	8000e5c <__udivmoddi4+0x2b0>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0103 	sbc.w	r1, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	468c      	mov	ip, r1
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0a8      	beq.n	8000c4c <__udivmoddi4+0xa0>
 8000cfa:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cfe:	e7a5      	b.n	8000c4c <__udivmoddi4+0xa0>
 8000d00:	f1c2 0320 	rsb	r3, r2, #32
 8000d04:	fa20 f603 	lsr.w	r6, r0, r3
 8000d08:	4097      	lsls	r7, r2
 8000d0a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d0e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d12:	40d9      	lsrs	r1, r3
 8000d14:	4330      	orrs	r0, r6
 8000d16:	0c03      	lsrs	r3, r0, #16
 8000d18:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d1c:	fa1f f887 	uxth.w	r8, r7
 8000d20:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d28:	fb06 f108 	mul.w	r1, r6, r8
 8000d2c:	4299      	cmp	r1, r3
 8000d2e:	fa04 f402 	lsl.w	r4, r4, r2
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x19c>
 8000d34:	18fb      	adds	r3, r7, r3
 8000d36:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d3a:	f080 808d 	bcs.w	8000e58 <__udivmoddi4+0x2ac>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 808a 	bls.w	8000e58 <__udivmoddi4+0x2ac>
 8000d44:	3e02      	subs	r6, #2
 8000d46:	443b      	add	r3, r7
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b281      	uxth	r1, r0
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d58:	fb00 f308 	mul.w	r3, r0, r8
 8000d5c:	428b      	cmp	r3, r1
 8000d5e:	d907      	bls.n	8000d70 <__udivmoddi4+0x1c4>
 8000d60:	1879      	adds	r1, r7, r1
 8000d62:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d66:	d273      	bcs.n	8000e50 <__udivmoddi4+0x2a4>
 8000d68:	428b      	cmp	r3, r1
 8000d6a:	d971      	bls.n	8000e50 <__udivmoddi4+0x2a4>
 8000d6c:	3802      	subs	r0, #2
 8000d6e:	4439      	add	r1, r7
 8000d70:	1acb      	subs	r3, r1, r3
 8000d72:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d76:	e778      	b.n	8000c6a <__udivmoddi4+0xbe>
 8000d78:	f1c6 0c20 	rsb	ip, r6, #32
 8000d7c:	fa03 f406 	lsl.w	r4, r3, r6
 8000d80:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d84:	431c      	orrs	r4, r3
 8000d86:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d92:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d96:	431f      	orrs	r7, r3
 8000d98:	0c3b      	lsrs	r3, r7, #16
 8000d9a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d9e:	fa1f f884 	uxth.w	r8, r4
 8000da2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000da6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000daa:	fb09 fa08 	mul.w	sl, r9, r8
 8000dae:	458a      	cmp	sl, r1
 8000db0:	fa02 f206 	lsl.w	r2, r2, r6
 8000db4:	fa00 f306 	lsl.w	r3, r0, r6
 8000db8:	d908      	bls.n	8000dcc <__udivmoddi4+0x220>
 8000dba:	1861      	adds	r1, r4, r1
 8000dbc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dc0:	d248      	bcs.n	8000e54 <__udivmoddi4+0x2a8>
 8000dc2:	458a      	cmp	sl, r1
 8000dc4:	d946      	bls.n	8000e54 <__udivmoddi4+0x2a8>
 8000dc6:	f1a9 0902 	sub.w	r9, r9, #2
 8000dca:	4421      	add	r1, r4
 8000dcc:	eba1 010a 	sub.w	r1, r1, sl
 8000dd0:	b2bf      	uxth	r7, r7
 8000dd2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dd6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dda:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000dde:	fb00 f808 	mul.w	r8, r0, r8
 8000de2:	45b8      	cmp	r8, r7
 8000de4:	d907      	bls.n	8000df6 <__udivmoddi4+0x24a>
 8000de6:	19e7      	adds	r7, r4, r7
 8000de8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dec:	d22e      	bcs.n	8000e4c <__udivmoddi4+0x2a0>
 8000dee:	45b8      	cmp	r8, r7
 8000df0:	d92c      	bls.n	8000e4c <__udivmoddi4+0x2a0>
 8000df2:	3802      	subs	r0, #2
 8000df4:	4427      	add	r7, r4
 8000df6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dfa:	eba7 0708 	sub.w	r7, r7, r8
 8000dfe:	fba0 8902 	umull	r8, r9, r0, r2
 8000e02:	454f      	cmp	r7, r9
 8000e04:	46c6      	mov	lr, r8
 8000e06:	4649      	mov	r1, r9
 8000e08:	d31a      	bcc.n	8000e40 <__udivmoddi4+0x294>
 8000e0a:	d017      	beq.n	8000e3c <__udivmoddi4+0x290>
 8000e0c:	b15d      	cbz	r5, 8000e26 <__udivmoddi4+0x27a>
 8000e0e:	ebb3 020e 	subs.w	r2, r3, lr
 8000e12:	eb67 0701 	sbc.w	r7, r7, r1
 8000e16:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e1a:	40f2      	lsrs	r2, r6
 8000e1c:	ea4c 0202 	orr.w	r2, ip, r2
 8000e20:	40f7      	lsrs	r7, r6
 8000e22:	e9c5 2700 	strd	r2, r7, [r5]
 8000e26:	2600      	movs	r6, #0
 8000e28:	4631      	mov	r1, r6
 8000e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2e:	462e      	mov	r6, r5
 8000e30:	4628      	mov	r0, r5
 8000e32:	e70b      	b.n	8000c4c <__udivmoddi4+0xa0>
 8000e34:	4606      	mov	r6, r0
 8000e36:	e6e9      	b.n	8000c0c <__udivmoddi4+0x60>
 8000e38:	4618      	mov	r0, r3
 8000e3a:	e6fd      	b.n	8000c38 <__udivmoddi4+0x8c>
 8000e3c:	4543      	cmp	r3, r8
 8000e3e:	d2e5      	bcs.n	8000e0c <__udivmoddi4+0x260>
 8000e40:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e44:	eb69 0104 	sbc.w	r1, r9, r4
 8000e48:	3801      	subs	r0, #1
 8000e4a:	e7df      	b.n	8000e0c <__udivmoddi4+0x260>
 8000e4c:	4608      	mov	r0, r1
 8000e4e:	e7d2      	b.n	8000df6 <__udivmoddi4+0x24a>
 8000e50:	4660      	mov	r0, ip
 8000e52:	e78d      	b.n	8000d70 <__udivmoddi4+0x1c4>
 8000e54:	4681      	mov	r9, r0
 8000e56:	e7b9      	b.n	8000dcc <__udivmoddi4+0x220>
 8000e58:	4666      	mov	r6, ip
 8000e5a:	e775      	b.n	8000d48 <__udivmoddi4+0x19c>
 8000e5c:	4630      	mov	r0, r6
 8000e5e:	e74a      	b.n	8000cf6 <__udivmoddi4+0x14a>
 8000e60:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e64:	4439      	add	r1, r7
 8000e66:	e713      	b.n	8000c90 <__udivmoddi4+0xe4>
 8000e68:	3802      	subs	r0, #2
 8000e6a:	443c      	add	r4, r7
 8000e6c:	e724      	b.n	8000cb8 <__udivmoddi4+0x10c>
 8000e6e:	bf00      	nop

08000e70 <__aeabi_idiv0>:
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop

08000e74 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e7a:	463b      	mov	r3, r7
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e86:	4b28      	ldr	r3, [pc, #160]	; (8000f28 <MX_ADC1_Init+0xb4>)
 8000e88:	4a28      	ldr	r2, [pc, #160]	; (8000f2c <MX_ADC1_Init+0xb8>)
 8000e8a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000e8c:	4b26      	ldr	r3, [pc, #152]	; (8000f28 <MX_ADC1_Init+0xb4>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e92:	4b25      	ldr	r3, [pc, #148]	; (8000f28 <MX_ADC1_Init+0xb4>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000e98:	4b23      	ldr	r3, [pc, #140]	; (8000f28 <MX_ADC1_Init+0xb4>)
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e9e:	4b22      	ldr	r3, [pc, #136]	; (8000f28 <MX_ADC1_Init+0xb4>)
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ea4:	4b20      	ldr	r3, [pc, #128]	; (8000f28 <MX_ADC1_Init+0xb4>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000eac:	4b1e      	ldr	r3, [pc, #120]	; (8000f28 <MX_ADC1_Init+0xb4>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000eb2:	4b1d      	ldr	r3, [pc, #116]	; (8000f28 <MX_ADC1_Init+0xb4>)
 8000eb4:	4a1e      	ldr	r2, [pc, #120]	; (8000f30 <MX_ADC1_Init+0xbc>)
 8000eb6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000eb8:	4b1b      	ldr	r3, [pc, #108]	; (8000f28 <MX_ADC1_Init+0xb4>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000ebe:	4b1a      	ldr	r3, [pc, #104]	; (8000f28 <MX_ADC1_Init+0xb4>)
 8000ec0:	2202      	movs	r2, #2
 8000ec2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ec4:	4b18      	ldr	r3, [pc, #96]	; (8000f28 <MX_ADC1_Init+0xb4>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ecc:	4b16      	ldr	r3, [pc, #88]	; (8000f28 <MX_ADC1_Init+0xb4>)
 8000ece:	2201      	movs	r2, #1
 8000ed0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ed2:	4815      	ldr	r0, [pc, #84]	; (8000f28 <MX_ADC1_Init+0xb4>)
 8000ed4:	f000 fe82 	bl	8001bdc <HAL_ADC_Init>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000ede:	f000 fbd7 	bl	8001690 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000eea:	2300      	movs	r3, #0
 8000eec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eee:	463b      	mov	r3, r7
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	480d      	ldr	r0, [pc, #52]	; (8000f28 <MX_ADC1_Init+0xb4>)
 8000ef4:	f001 f81e 	bl	8001f34 <HAL_ADC_ConfigChannel>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000efe:	f000 fbc7 	bl	8001690 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f02:	2301      	movs	r3, #1
 8000f04:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000f06:	2302      	movs	r3, #2
 8000f08:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f0a:	463b      	mov	r3, r7
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4806      	ldr	r0, [pc, #24]	; (8000f28 <MX_ADC1_Init+0xb4>)
 8000f10:	f001 f810 	bl	8001f34 <HAL_ADC_ConfigChannel>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000f1a:	f000 fbb9 	bl	8001690 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f1e:	bf00      	nop
 8000f20:	3710      	adds	r7, #16
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20000098 	.word	0x20000098
 8000f2c:	40012000 	.word	0x40012000
 8000f30:	0f000001 	.word	0x0f000001

08000f34 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b08a      	sub	sp, #40	; 0x28
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3c:	f107 0314 	add.w	r3, r7, #20
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a2f      	ldr	r2, [pc, #188]	; (8001010 <HAL_ADC_MspInit+0xdc>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d158      	bne.n	8001008 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	613b      	str	r3, [r7, #16]
 8000f5a:	4b2e      	ldr	r3, [pc, #184]	; (8001014 <HAL_ADC_MspInit+0xe0>)
 8000f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5e:	4a2d      	ldr	r2, [pc, #180]	; (8001014 <HAL_ADC_MspInit+0xe0>)
 8000f60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f64:	6453      	str	r3, [r2, #68]	; 0x44
 8000f66:	4b2b      	ldr	r3, [pc, #172]	; (8001014 <HAL_ADC_MspInit+0xe0>)
 8000f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f6e:	613b      	str	r3, [r7, #16]
 8000f70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	60fb      	str	r3, [r7, #12]
 8000f76:	4b27      	ldr	r3, [pc, #156]	; (8001014 <HAL_ADC_MspInit+0xe0>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	4a26      	ldr	r2, [pc, #152]	; (8001014 <HAL_ADC_MspInit+0xe0>)
 8000f7c:	f043 0301 	orr.w	r3, r3, #1
 8000f80:	6313      	str	r3, [r2, #48]	; 0x30
 8000f82:	4b24      	ldr	r3, [pc, #144]	; (8001014 <HAL_ADC_MspInit+0xe0>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	f003 0301 	and.w	r3, r3, #1
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f8e:	2303      	movs	r3, #3
 8000f90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f92:	2303      	movs	r3, #3
 8000f94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9a:	f107 0314 	add.w	r3, r7, #20
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	481d      	ldr	r0, [pc, #116]	; (8001018 <HAL_ADC_MspInit+0xe4>)
 8000fa2:	f001 ff59 	bl	8002e58 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000fa6:	4b1d      	ldr	r3, [pc, #116]	; (800101c <HAL_ADC_MspInit+0xe8>)
 8000fa8:	4a1d      	ldr	r2, [pc, #116]	; (8001020 <HAL_ADC_MspInit+0xec>)
 8000faa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000fac:	4b1b      	ldr	r3, [pc, #108]	; (800101c <HAL_ADC_MspInit+0xe8>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fb2:	4b1a      	ldr	r3, [pc, #104]	; (800101c <HAL_ADC_MspInit+0xe8>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fb8:	4b18      	ldr	r3, [pc, #96]	; (800101c <HAL_ADC_MspInit+0xe8>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000fbe:	4b17      	ldr	r3, [pc, #92]	; (800101c <HAL_ADC_MspInit+0xe8>)
 8000fc0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fc4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000fc6:	4b15      	ldr	r3, [pc, #84]	; (800101c <HAL_ADC_MspInit+0xe8>)
 8000fc8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fcc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000fce:	4b13      	ldr	r3, [pc, #76]	; (800101c <HAL_ADC_MspInit+0xe8>)
 8000fd0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fd4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000fd6:	4b11      	ldr	r3, [pc, #68]	; (800101c <HAL_ADC_MspInit+0xe8>)
 8000fd8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fdc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000fde:	4b0f      	ldr	r3, [pc, #60]	; (800101c <HAL_ADC_MspInit+0xe8>)
 8000fe0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000fe4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fe6:	4b0d      	ldr	r3, [pc, #52]	; (800101c <HAL_ADC_MspInit+0xe8>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000fec:	480b      	ldr	r0, [pc, #44]	; (800101c <HAL_ADC_MspInit+0xe8>)
 8000fee:	f001 fb53 	bl	8002698 <HAL_DMA_Init>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8000ff8:	f000 fb4a 	bl	8001690 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	4a07      	ldr	r2, [pc, #28]	; (800101c <HAL_ADC_MspInit+0xe8>)
 8001000:	639a      	str	r2, [r3, #56]	; 0x38
 8001002:	4a06      	ldr	r2, [pc, #24]	; (800101c <HAL_ADC_MspInit+0xe8>)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001008:	bf00      	nop
 800100a:	3728      	adds	r7, #40	; 0x28
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	40012000 	.word	0x40012000
 8001014:	40023800 	.word	0x40023800
 8001018:	40020000 	.word	0x40020000
 800101c:	200000e0 	.word	0x200000e0
 8001020:	40026410 	.word	0x40026410

08001024 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	607b      	str	r3, [r7, #4]
 800102e:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <MX_DMA_Init+0x3c>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	4a0b      	ldr	r2, [pc, #44]	; (8001060 <MX_DMA_Init+0x3c>)
 8001034:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001038:	6313      	str	r3, [r2, #48]	; 0x30
 800103a:	4b09      	ldr	r3, [pc, #36]	; (8001060 <MX_DMA_Init+0x3c>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001042:	607b      	str	r3, [r7, #4]
 8001044:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001046:	2200      	movs	r2, #0
 8001048:	2100      	movs	r1, #0
 800104a:	2038      	movs	r0, #56	; 0x38
 800104c:	f001 faed 	bl	800262a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001050:	2038      	movs	r0, #56	; 0x38
 8001052:	f001 fb06 	bl	8002662 <HAL_NVIC_EnableIRQ>

}
 8001056:	bf00      	nop
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40023800 	.word	0x40023800

08001064 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b086      	sub	sp, #24
 8001068:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106a:	1d3b      	adds	r3, r7, #4
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
 8001076:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001078:	2300      	movs	r3, #0
 800107a:	603b      	str	r3, [r7, #0]
 800107c:	4b0d      	ldr	r3, [pc, #52]	; (80010b4 <MX_GPIO_Init+0x50>)
 800107e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001080:	4a0c      	ldr	r2, [pc, #48]	; (80010b4 <MX_GPIO_Init+0x50>)
 8001082:	f043 0301 	orr.w	r3, r3, #1
 8001086:	6313      	str	r3, [r2, #48]	; 0x30
 8001088:	4b0a      	ldr	r3, [pc, #40]	; (80010b4 <MX_GPIO_Init+0x50>)
 800108a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108c:	f003 0301 	and.w	r3, r3, #1
 8001090:	603b      	str	r3, [r7, #0]
 8001092:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001094:	2320      	movs	r3, #32
 8001096:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001098:	2300      	movs	r3, #0
 800109a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a0:	1d3b      	adds	r3, r7, #4
 80010a2:	4619      	mov	r1, r3
 80010a4:	4804      	ldr	r0, [pc, #16]	; (80010b8 <MX_GPIO_Init+0x54>)
 80010a6:	f001 fed7 	bl	8002e58 <HAL_GPIO_Init>

}
 80010aa:	bf00      	nop
 80010ac:	3718      	adds	r7, #24
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40023800 	.word	0x40023800
 80010b8:	40020000 	.word	0x40020000
 80010bc:	00000000 	.word	0x00000000

080010c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010c0:	b590      	push	{r4, r7, lr}
 80010c2:	f5ad 7d03 	sub.w	sp, sp, #524	; 0x20c
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010c8:	f000 fd16 	bl	8001af8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010cc:	f000 fa80 	bl	80015d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010d0:	f7ff ffc8 	bl	8001064 <MX_GPIO_Init>
  MX_DMA_Init();
 80010d4:	f7ff ffa6 	bl	8001024 <MX_DMA_Init>
  MX_ADC1_Init();
 80010d8:	f7ff fecc 	bl	8000e74 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80010dc:	f000 fc3c 	bl	8001958 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80010e0:	f000 fc10 	bl	8001904 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  int CAMPIONI = 210;
 80010e4:	23d2      	movs	r3, #210	; 0xd2
 80010e6:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
  uint32_t value[2];
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)value, 2);
 80010ea:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80010ee:	2202      	movs	r2, #2
 80010f0:	4619      	mov	r1, r3
 80010f2:	48d7      	ldr	r0, [pc, #860]	; (8001450 <main+0x390>)
 80010f4:	f000 fdb6 	bl	8001c64 <HAL_ADC_Start_DMA>
  uint32_t v[CAMPIONI];
 80010f8:	f8d7 41d8 	ldr.w	r4, [r7, #472]	; 0x1d8
 80010fc:	1e63      	subs	r3, r4, #1
 80010fe:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8001102:	4623      	mov	r3, r4
 8001104:	4618      	mov	r0, r3
 8001106:	f04f 0100 	mov.w	r1, #0
 800110a:	f04f 0200 	mov.w	r2, #0
 800110e:	f04f 0300 	mov.w	r3, #0
 8001112:	014b      	lsls	r3, r1, #5
 8001114:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001118:	0142      	lsls	r2, r0, #5
 800111a:	4623      	mov	r3, r4
 800111c:	4618      	mov	r0, r3
 800111e:	f04f 0100 	mov.w	r1, #0
 8001122:	f04f 0200 	mov.w	r2, #0
 8001126:	f04f 0300 	mov.w	r3, #0
 800112a:	014b      	lsls	r3, r1, #5
 800112c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001130:	0142      	lsls	r2, r0, #5
 8001132:	4623      	mov	r3, r4
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	3307      	adds	r3, #7
 8001138:	08db      	lsrs	r3, r3, #3
 800113a:	00db      	lsls	r3, r3, #3
 800113c:	ebad 0d03 	sub.w	sp, sp, r3
 8001140:	466b      	mov	r3, sp
 8001142:	3303      	adds	r3, #3
 8001144:	089b      	lsrs	r3, r3, #2
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  uint32_t i[CAMPIONI];
 800114c:	f8d7 41d8 	ldr.w	r4, [r7, #472]	; 0x1d8
 8001150:	1e63      	subs	r3, r4, #1
 8001152:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 8001156:	4623      	mov	r3, r4
 8001158:	4618      	mov	r0, r3
 800115a:	f04f 0100 	mov.w	r1, #0
 800115e:	f04f 0200 	mov.w	r2, #0
 8001162:	f04f 0300 	mov.w	r3, #0
 8001166:	014b      	lsls	r3, r1, #5
 8001168:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800116c:	0142      	lsls	r2, r0, #5
 800116e:	4623      	mov	r3, r4
 8001170:	4618      	mov	r0, r3
 8001172:	f04f 0100 	mov.w	r1, #0
 8001176:	f04f 0200 	mov.w	r2, #0
 800117a:	f04f 0300 	mov.w	r3, #0
 800117e:	014b      	lsls	r3, r1, #5
 8001180:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001184:	0142      	lsls	r2, r0, #5
 8001186:	4623      	mov	r3, r4
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	3307      	adds	r3, #7
 800118c:	08db      	lsrs	r3, r3, #3
 800118e:	00db      	lsls	r3, r3, #3
 8001190:	ebad 0d03 	sub.w	sp, sp, r3
 8001194:	466b      	mov	r3, sp
 8001196:	3303      	adds	r3, #3
 8001198:	089b      	lsrs	r3, r3, #2
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
  char phase_msg[8];
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int counter = 0;
 80011a0:	2300      	movs	r3, #0
 80011a2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  long double SAMPLE_TIME = 0.000095;
 80011a6:	a3a8      	add	r3, pc, #672	; (adr r3, 8001448 <main+0x388>)
 80011a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ac:	e9c7 2370 	strd	r2, r3, [r7, #448]	; 0x1c0
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_ADC_Stop_DMA(&hadc1);
 80011b0:	48a7      	ldr	r0, [pc, #668]	; (8001450 <main+0x390>)
 80011b2:	f000 fe47 	bl	8001e44 <HAL_ADC_Stop_DMA>
	  if(counter < CAMPIONI){
 80011b6:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 80011ba:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 80011be:	429a      	cmp	r2, r3
 80011c0:	da0f      	bge.n	80011e2 <main+0x122>
	  	  i[counter] = value[0];
 80011c2:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 80011c6:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80011ca:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 80011ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	  	  v[counter] = value[1];
 80011d2:	f8d7 11a4 	ldr.w	r1, [r7, #420]	; 0x1a4
 80011d6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80011da:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 80011de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	  }
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)value, 2);
 80011e2:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80011e6:	2202      	movs	r2, #2
 80011e8:	4619      	mov	r1, r3
 80011ea:	4899      	ldr	r0, [pc, #612]	; (8001450 <main+0x390>)
 80011ec:	f000 fd3a 	bl	8001c64 <HAL_ADC_Start_DMA>
	  counter++;
 80011f0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80011f4:	3301      	adds	r3, #1
 80011f6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0

	  if(counter-1 == CAMPIONI){
 80011fa:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80011fe:	3b01      	subs	r3, #1
 8001200:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001204:	429a      	cmp	r2, r3
 8001206:	d1d3      	bne.n	80011b0 <main+0xf0>
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5)){
 8001208:	2120      	movs	r1, #32
 800120a:	4892      	ldr	r0, [pc, #584]	; (8001454 <main+0x394>)
 800120c:	f001 ffa8 	bl	8003160 <HAL_GPIO_ReadPin>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	f000 81c9 	beq.w	80015aa <main+0x4ea>
			  HAL_UART_Transmit(&huart2, "Tensione:\n", sizeof("Tensione:\n"), HAL_MAX_DELAY);
 8001218:	f04f 33ff 	mov.w	r3, #4294967295
 800121c:	220b      	movs	r2, #11
 800121e:	498e      	ldr	r1, [pc, #568]	; (8001458 <main+0x398>)
 8001220:	488e      	ldr	r0, [pc, #568]	; (800145c <main+0x39c>)
 8001222:	f002 fc4a 	bl	8003aba <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart1, "Tensione\n", sizeof("Tensione\n"), HAL_MAX_DELAY);
 8001226:	f04f 33ff 	mov.w	r3, #4294967295
 800122a:	220a      	movs	r2, #10
 800122c:	498c      	ldr	r1, [pc, #560]	; (8001460 <main+0x3a0>)
 800122e:	488d      	ldr	r0, [pc, #564]	; (8001464 <main+0x3a4>)
 8001230:	f002 fc43 	bl	8003aba <HAL_UART_Transmit>
			  for(int j = 0; j < CAMPIONI; j++){
 8001234:	2300      	movs	r3, #0
 8001236:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 800123a:	e02c      	b.n	8001296 <main+0x1d6>
				  sprintf(str, " %lu ", v[j]);
 800123c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001240:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 8001244:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001248:	f107 0308 	add.w	r3, r7, #8
 800124c:	4986      	ldr	r1, [pc, #536]	; (8001468 <main+0x3a8>)
 800124e:	4618      	mov	r0, r3
 8001250:	f002 ff52 	bl	80040f8 <siprintf>
				  HAL_UART_Transmit(&huart2, str, sizeof(str), HAL_MAX_DELAY);
 8001254:	f107 0108 	add.w	r1, r7, #8
 8001258:	f04f 33ff 	mov.w	r3, #4294967295
 800125c:	2206      	movs	r2, #6
 800125e:	487f      	ldr	r0, [pc, #508]	; (800145c <main+0x39c>)
 8001260:	f002 fc2b 	bl	8003aba <HAL_UART_Transmit>
				  sprintf(str, "%lu", v[j]);
 8001264:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001268:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 800126c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001270:	f107 0308 	add.w	r3, r7, #8
 8001274:	497d      	ldr	r1, [pc, #500]	; (800146c <main+0x3ac>)
 8001276:	4618      	mov	r0, r3
 8001278:	f002 ff3e 	bl	80040f8 <siprintf>
				  HAL_UART_Transmit(&huart1, str, sizeof(str), HAL_MAX_DELAY);
 800127c:	f107 0108 	add.w	r1, r7, #8
 8001280:	f04f 33ff 	mov.w	r3, #4294967295
 8001284:	2206      	movs	r2, #6
 8001286:	4877      	ldr	r0, [pc, #476]	; (8001464 <main+0x3a4>)
 8001288:	f002 fc17 	bl	8003aba <HAL_UART_Transmit>
			  for(int j = 0; j < CAMPIONI; j++){
 800128c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001290:	3301      	adds	r3, #1
 8001292:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 8001296:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 800129a:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800129e:	429a      	cmp	r2, r3
 80012a0:	dbcc      	blt.n	800123c <main+0x17c>
			  }
			  HAL_UART_Transmit(&huart1, "\n", sizeof("\n"), HAL_MAX_DELAY);
 80012a2:	f04f 33ff 	mov.w	r3, #4294967295
 80012a6:	2202      	movs	r2, #2
 80012a8:	4971      	ldr	r1, [pc, #452]	; (8001470 <main+0x3b0>)
 80012aa:	486e      	ldr	r0, [pc, #440]	; (8001464 <main+0x3a4>)
 80012ac:	f002 fc05 	bl	8003aba <HAL_UART_Transmit>


			  HAL_UART_Transmit(&huart2, "\n\nCorrente:\n", sizeof("\n\nCorrente:\n"), HAL_MAX_DELAY);
 80012b0:	f04f 33ff 	mov.w	r3, #4294967295
 80012b4:	220d      	movs	r2, #13
 80012b6:	496f      	ldr	r1, [pc, #444]	; (8001474 <main+0x3b4>)
 80012b8:	4868      	ldr	r0, [pc, #416]	; (800145c <main+0x39c>)
 80012ba:	f002 fbfe 	bl	8003aba <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart1, "Corrente\n", sizeof("Corrente\n"), HAL_MAX_DELAY);
 80012be:	f04f 33ff 	mov.w	r3, #4294967295
 80012c2:	220a      	movs	r2, #10
 80012c4:	496c      	ldr	r1, [pc, #432]	; (8001478 <main+0x3b8>)
 80012c6:	4867      	ldr	r0, [pc, #412]	; (8001464 <main+0x3a4>)
 80012c8:	f002 fbf7 	bl	8003aba <HAL_UART_Transmit>
			  for(int j = 0; j < CAMPIONI; j++){
 80012cc:	2300      	movs	r3, #0
 80012ce:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 80012d2:	e02c      	b.n	800132e <main+0x26e>
				  sprintf(str, " %lu ", i[j]);
 80012d4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80012d8:	f8d7 21f8 	ldr.w	r2, [r7, #504]	; 0x1f8
 80012dc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80012e0:	f107 0308 	add.w	r3, r7, #8
 80012e4:	4960      	ldr	r1, [pc, #384]	; (8001468 <main+0x3a8>)
 80012e6:	4618      	mov	r0, r3
 80012e8:	f002 ff06 	bl	80040f8 <siprintf>
				  HAL_UART_Transmit(&huart2, str, sizeof(str), HAL_MAX_DELAY);
 80012ec:	f107 0108 	add.w	r1, r7, #8
 80012f0:	f04f 33ff 	mov.w	r3, #4294967295
 80012f4:	2206      	movs	r2, #6
 80012f6:	4859      	ldr	r0, [pc, #356]	; (800145c <main+0x39c>)
 80012f8:	f002 fbdf 	bl	8003aba <HAL_UART_Transmit>
				  sprintf(str, "%lu", i[j]);
 80012fc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001300:	f8d7 21f8 	ldr.w	r2, [r7, #504]	; 0x1f8
 8001304:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001308:	f107 0308 	add.w	r3, r7, #8
 800130c:	4957      	ldr	r1, [pc, #348]	; (800146c <main+0x3ac>)
 800130e:	4618      	mov	r0, r3
 8001310:	f002 fef2 	bl	80040f8 <siprintf>
				  HAL_UART_Transmit(&huart1, str, sizeof(str), HAL_MAX_DELAY);
 8001314:	f107 0108 	add.w	r1, r7, #8
 8001318:	f04f 33ff 	mov.w	r3, #4294967295
 800131c:	2206      	movs	r2, #6
 800131e:	4851      	ldr	r0, [pc, #324]	; (8001464 <main+0x3a4>)
 8001320:	f002 fbcb 	bl	8003aba <HAL_UART_Transmit>
			  for(int j = 0; j < CAMPIONI; j++){
 8001324:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001328:	3301      	adds	r3, #1
 800132a:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 800132e:	f8d7 21f8 	ldr.w	r2, [r7, #504]	; 0x1f8
 8001332:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8001336:	429a      	cmp	r2, r3
 8001338:	dbcc      	blt.n	80012d4 <main+0x214>
			  }
			  HAL_UART_Transmit(&huart1, "\n", sizeof("\n"), HAL_MAX_DELAY);
 800133a:	f04f 33ff 	mov.w	r3, #4294967295
 800133e:	2202      	movs	r2, #2
 8001340:	494b      	ldr	r1, [pc, #300]	; (8001470 <main+0x3b0>)
 8001342:	4848      	ldr	r0, [pc, #288]	; (8001464 <main+0x3a4>)
 8001344:	f002 fbb9 	bl	8003aba <HAL_UART_Transmit>


			  uint32_t diff = v[CAMPIONI - 1] - v[1];
 8001348:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800134c:	1e5a      	subs	r2, r3, #1
 800134e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001352:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001356:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
			  int k = 2;
 8001362:	2302      	movs	r3, #2
 8001364:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200

			  while((v[CAMPIONI - k] - v[1]) < diff){
 8001368:	e013      	b.n	8001392 <main+0x2d2>
				  diff = v[CAMPIONI - k] - v[1];
 800136a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800136e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001372:	1ad2      	subs	r2, r2, r3
 8001374:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001378:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800137c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
				  k++;
 8001388:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800138c:	3301      	adds	r3, #1
 800138e:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
			  while((v[CAMPIONI - k] - v[1]) < diff){
 8001392:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001396:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800139a:	1ad2      	subs	r2, r2, r3
 800139c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80013a0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80013a4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d8da      	bhi.n	800136a <main+0x2aa>
			  }

			  int min_v = v[0];
 80013b4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
			  int min_v_index = 0;
 80013be:	2300      	movs	r3, #0
 80013c0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
			  for(int j = 1; j <= CAMPIONI - k + 1; j++){
 80013c4:	2301      	movs	r3, #1
 80013c6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80013ca:	e01a      	b.n	8001402 <main+0x342>
				  if(v[j] < min_v){
 80013cc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80013d0:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 80013d4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80013d8:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80013dc:	429a      	cmp	r2, r3
 80013de:	d20b      	bcs.n	80013f8 <main+0x338>
					  min_v = v[j];
 80013e0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80013e4:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 80013e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013ec:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
					  min_v_index = j;
 80013f0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80013f4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
			  for(int j = 1; j <= CAMPIONI - k + 1; j++){
 80013f8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80013fc:	3301      	adds	r3, #1
 80013fe:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001402:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001406:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	3301      	adds	r3, #1
 800140e:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 8001412:	429a      	cmp	r2, r3
 8001414:	ddda      	ble.n	80013cc <main+0x30c>
				  }
			  }

			  uint32_t start_i = i[1];
 8001416:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
			  diff = i[CAMPIONI - 1] - i[1];
 8001420:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8001424:	1e5a      	subs	r2, r3, #1
 8001426:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800142a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800142e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
			  k = 2;
 800143a:	2302      	movs	r3, #2
 800143c:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200

			  while((i[CAMPIONI - k] - i[1]) < diff){
 8001440:	e030      	b.n	80014a4 <main+0x3e4>
 8001442:	bf00      	nop
 8001444:	f3af 8000 	nop.w
 8001448:	928e0c9e 	.word	0x928e0c9e
 800144c:	3f18e757 	.word	0x3f18e757
 8001450:	20000098 	.word	0x20000098
 8001454:	40020000 	.word	0x40020000
 8001458:	08006b08 	.word	0x08006b08
 800145c:	20000184 	.word	0x20000184
 8001460:	08006b14 	.word	0x08006b14
 8001464:	20000140 	.word	0x20000140
 8001468:	08006b20 	.word	0x08006b20
 800146c:	08006b28 	.word	0x08006b28
 8001470:	08006b2c 	.word	0x08006b2c
 8001474:	08006b30 	.word	0x08006b30
 8001478:	08006b40 	.word	0x08006b40
				  diff = i[CAMPIONI - k] - i[1];
 800147c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001480:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001484:	1ad2      	subs	r2, r2, r3
 8001486:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800148a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800148e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
				  k++;
 800149a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800149e:	3301      	adds	r3, #1
 80014a0:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
			  while((i[CAMPIONI - k] - i[1]) < diff){
 80014a4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80014a8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80014ac:	1ad2      	subs	r2, r2, r3
 80014ae:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80014b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80014b6:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d8da      	bhi.n	800147c <main+0x3bc>
			  }

			  int min_i = i[0];
 80014c6:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
			  int min_i_index = 0;
 80014d0:	2300      	movs	r3, #0
 80014d2:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
			  for(int j = 1; j < CAMPIONI - k + 1; j++){
 80014d6:	2301      	movs	r3, #1
 80014d8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80014dc:	e01a      	b.n	8001514 <main+0x454>
				  if(i[j] < min_i){
 80014de:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80014e2:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80014e6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80014ea:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80014ee:	429a      	cmp	r2, r3
 80014f0:	d20b      	bcs.n	800150a <main+0x44a>
					  min_i = i[j];
 80014f2:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80014f6:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80014fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014fe:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
					  min_i_index = j;
 8001502:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8001506:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
			  for(int j = 1; j < CAMPIONI - k + 1; j++){
 800150a:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 800150e:	3301      	adds	r3, #1
 8001510:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001514:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001518:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001522:	429a      	cmp	r2, r3
 8001524:	dddb      	ble.n	80014de <main+0x41e>
				  }
			  }

			  double td = SAMPLE_TIME*(min_i_index - min_v_index);
 8001526:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 800152a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	4618      	mov	r0, r3
 8001532:	f7fe fff7 	bl	8000524 <__aeabi_i2d>
 8001536:	4602      	mov	r2, r0
 8001538:	460b      	mov	r3, r1
 800153a:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 800153e:	f7ff f85b 	bl	80005f8 <__aeabi_dmul>
 8001542:	4602      	mov	r2, r0
 8001544:	460b      	mov	r3, r1
 8001546:	e9c7 236c 	strd	r2, r3, [r7, #432]	; 0x1b0
			  double phase_shift = (360*td)/0.02;
 800154a:	f04f 0200 	mov.w	r2, #0
 800154e:	4b1c      	ldr	r3, [pc, #112]	; (80015c0 <main+0x500>)
 8001550:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	; 0x1b0
 8001554:	f7ff f850 	bl	80005f8 <__aeabi_dmul>
 8001558:	4602      	mov	r2, r0
 800155a:	460b      	mov	r3, r1
 800155c:	4610      	mov	r0, r2
 800155e:	4619      	mov	r1, r3
 8001560:	a315      	add	r3, pc, #84	; (adr r3, 80015b8 <main+0x4f8>)
 8001562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001566:	f7ff f971 	bl	800084c <__aeabi_ddiv>
 800156a:	4602      	mov	r2, r0
 800156c:	460b      	mov	r3, r1
 800156e:	e9c7 236a 	strd	r2, r3, [r7, #424]	; 0x1a8

			  HAL_UART_Transmit(&huart1, "Fase\n", sizeof("Fase\n"), HAL_MAX_DELAY);
 8001572:	f04f 33ff 	mov.w	r3, #4294967295
 8001576:	2206      	movs	r2, #6
 8001578:	4912      	ldr	r1, [pc, #72]	; (80015c4 <main+0x504>)
 800157a:	4813      	ldr	r0, [pc, #76]	; (80015c8 <main+0x508>)
 800157c:	f002 fa9d 	bl	8003aba <HAL_UART_Transmit>
			  gcvt(phase_shift, 6, phase_msg);
 8001580:	463b      	mov	r3, r7
 8001582:	4619      	mov	r1, r3
 8001584:	2006      	movs	r0, #6
 8001586:	ed97 0b6a 	vldr	d0, [r7, #424]	; 0x1a8
 800158a:	f002 fd5f 	bl	800404c <gcvt>
			  HAL_UART_Transmit(&huart1, phase_msg, sizeof(phase_msg), HAL_MAX_DELAY);
 800158e:	4639      	mov	r1, r7
 8001590:	f04f 33ff 	mov.w	r3, #4294967295
 8001594:	2208      	movs	r2, #8
 8001596:	480c      	ldr	r0, [pc, #48]	; (80015c8 <main+0x508>)
 8001598:	f002 fa8f 	bl	8003aba <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart1, "\n", sizeof("\n"), HAL_MAX_DELAY);
 800159c:	f04f 33ff 	mov.w	r3, #4294967295
 80015a0:	2202      	movs	r2, #2
 80015a2:	490a      	ldr	r1, [pc, #40]	; (80015cc <main+0x50c>)
 80015a4:	4808      	ldr	r0, [pc, #32]	; (80015c8 <main+0x508>)
 80015a6:	f002 fa88 	bl	8003aba <HAL_UART_Transmit>
		  }
		  counter = 0;
 80015aa:	2300      	movs	r3, #0
 80015ac:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
	  HAL_ADC_Stop_DMA(&hadc1);
 80015b0:	e5fe      	b.n	80011b0 <main+0xf0>
 80015b2:	bf00      	nop
 80015b4:	f3af 8000 	nop.w
 80015b8:	47ae147b 	.word	0x47ae147b
 80015bc:	3f947ae1 	.word	0x3f947ae1
 80015c0:	40768000 	.word	0x40768000
 80015c4:	08006b4c 	.word	0x08006b4c
 80015c8:	20000140 	.word	0x20000140
 80015cc:	08006b2c 	.word	0x08006b2c

080015d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b094      	sub	sp, #80	; 0x50
 80015d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015d6:	f107 0320 	add.w	r3, r7, #32
 80015da:	2230      	movs	r2, #48	; 0x30
 80015dc:	2100      	movs	r1, #0
 80015de:	4618      	mov	r0, r3
 80015e0:	f002 fd82 	bl	80040e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015e4:	f107 030c 	add.w	r3, r7, #12
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	60da      	str	r2, [r3, #12]
 80015f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015f4:	2300      	movs	r3, #0
 80015f6:	60bb      	str	r3, [r7, #8]
 80015f8:	4b23      	ldr	r3, [pc, #140]	; (8001688 <SystemClock_Config+0xb8>)
 80015fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fc:	4a22      	ldr	r2, [pc, #136]	; (8001688 <SystemClock_Config+0xb8>)
 80015fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001602:	6413      	str	r3, [r2, #64]	; 0x40
 8001604:	4b20      	ldr	r3, [pc, #128]	; (8001688 <SystemClock_Config+0xb8>)
 8001606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800160c:	60bb      	str	r3, [r7, #8]
 800160e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001610:	2300      	movs	r3, #0
 8001612:	607b      	str	r3, [r7, #4]
 8001614:	4b1d      	ldr	r3, [pc, #116]	; (800168c <SystemClock_Config+0xbc>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800161c:	4a1b      	ldr	r2, [pc, #108]	; (800168c <SystemClock_Config+0xbc>)
 800161e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001622:	6013      	str	r3, [r2, #0]
 8001624:	4b19      	ldr	r3, [pc, #100]	; (800168c <SystemClock_Config+0xbc>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800162c:	607b      	str	r3, [r7, #4]
 800162e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001630:	2302      	movs	r3, #2
 8001632:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001634:	2301      	movs	r3, #1
 8001636:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001638:	2310      	movs	r3, #16
 800163a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800163c:	2300      	movs	r3, #0
 800163e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001640:	f107 0320 	add.w	r3, r7, #32
 8001644:	4618      	mov	r0, r3
 8001646:	f001 fda3 	bl	8003190 <HAL_RCC_OscConfig>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001650:	f000 f81e 	bl	8001690 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001654:	230f      	movs	r3, #15
 8001656:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001658:	2300      	movs	r3, #0
 800165a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800165c:	2300      	movs	r3, #0
 800165e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001660:	2300      	movs	r3, #0
 8001662:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001664:	2300      	movs	r3, #0
 8001666:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001668:	f107 030c 	add.w	r3, r7, #12
 800166c:	2100      	movs	r1, #0
 800166e:	4618      	mov	r0, r3
 8001670:	f002 f806 	bl	8003680 <HAL_RCC_ClockConfig>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800167a:	f000 f809 	bl	8001690 <Error_Handler>
  }
}
 800167e:	bf00      	nop
 8001680:	3750      	adds	r7, #80	; 0x50
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40023800 	.word	0x40023800
 800168c:	40007000 	.word	0x40007000

08001690 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001694:	b672      	cpsid	i
}
 8001696:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001698:	e7fe      	b.n	8001698 <Error_Handler+0x8>
	...

0800169c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	607b      	str	r3, [r7, #4]
 80016a6:	4b10      	ldr	r3, [pc, #64]	; (80016e8 <HAL_MspInit+0x4c>)
 80016a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016aa:	4a0f      	ldr	r2, [pc, #60]	; (80016e8 <HAL_MspInit+0x4c>)
 80016ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016b0:	6453      	str	r3, [r2, #68]	; 0x44
 80016b2:	4b0d      	ldr	r3, [pc, #52]	; (80016e8 <HAL_MspInit+0x4c>)
 80016b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ba:	607b      	str	r3, [r7, #4]
 80016bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	603b      	str	r3, [r7, #0]
 80016c2:	4b09      	ldr	r3, [pc, #36]	; (80016e8 <HAL_MspInit+0x4c>)
 80016c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c6:	4a08      	ldr	r2, [pc, #32]	; (80016e8 <HAL_MspInit+0x4c>)
 80016c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016cc:	6413      	str	r3, [r2, #64]	; 0x40
 80016ce:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <HAL_MspInit+0x4c>)
 80016d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d6:	603b      	str	r3, [r7, #0]
 80016d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016da:	bf00      	nop
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	40023800 	.word	0x40023800

080016ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016f0:	e7fe      	b.n	80016f0 <NMI_Handler+0x4>

080016f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016f2:	b480      	push	{r7}
 80016f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016f6:	e7fe      	b.n	80016f6 <HardFault_Handler+0x4>

080016f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016fc:	e7fe      	b.n	80016fc <MemManage_Handler+0x4>

080016fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016fe:	b480      	push	{r7}
 8001700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001702:	e7fe      	b.n	8001702 <BusFault_Handler+0x4>

08001704 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001708:	e7fe      	b.n	8001708 <UsageFault_Handler+0x4>

0800170a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800170a:	b480      	push	{r7}
 800170c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800170e:	bf00      	nop
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800171c:	bf00      	nop
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr

08001726 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001726:	b480      	push	{r7}
 8001728:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800172a:	bf00      	nop
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001738:	f000 fa30 	bl	8001b9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800173c:	bf00      	nop
 800173e:	bd80      	pop	{r7, pc}

08001740 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001744:	4802      	ldr	r0, [pc, #8]	; (8001750 <DMA2_Stream0_IRQHandler+0x10>)
 8001746:	f001 f91d 	bl	8002984 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	200000e0 	.word	0x200000e0

08001754 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
	return 1;
 8001758:	2301      	movs	r3, #1
}
 800175a:	4618      	mov	r0, r3
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <_kill>:

int _kill(int pid, int sig)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800176e:	f002 fc91 	bl	8004094 <__errno>
 8001772:	4603      	mov	r3, r0
 8001774:	2216      	movs	r2, #22
 8001776:	601a      	str	r2, [r3, #0]
	return -1;
 8001778:	f04f 33ff 	mov.w	r3, #4294967295
}
 800177c:	4618      	mov	r0, r3
 800177e:	3708      	adds	r7, #8
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}

08001784 <_exit>:

void _exit (int status)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800178c:	f04f 31ff 	mov.w	r1, #4294967295
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f7ff ffe7 	bl	8001764 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001796:	e7fe      	b.n	8001796 <_exit+0x12>

08001798 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017a4:	2300      	movs	r3, #0
 80017a6:	617b      	str	r3, [r7, #20]
 80017a8:	e00a      	b.n	80017c0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80017aa:	f3af 8000 	nop.w
 80017ae:	4601      	mov	r1, r0
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	1c5a      	adds	r2, r3, #1
 80017b4:	60ba      	str	r2, [r7, #8]
 80017b6:	b2ca      	uxtb	r2, r1
 80017b8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	3301      	adds	r3, #1
 80017be:	617b      	str	r3, [r7, #20]
 80017c0:	697a      	ldr	r2, [r7, #20]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	dbf0      	blt.n	80017aa <_read+0x12>
	}

return len;
 80017c8:	687b      	ldr	r3, [r7, #4]
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3718      	adds	r7, #24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b086      	sub	sp, #24
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	60f8      	str	r0, [r7, #12]
 80017da:	60b9      	str	r1, [r7, #8]
 80017dc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017de:	2300      	movs	r3, #0
 80017e0:	617b      	str	r3, [r7, #20]
 80017e2:	e009      	b.n	80017f8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	1c5a      	adds	r2, r3, #1
 80017e8:	60ba      	str	r2, [r7, #8]
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	3301      	adds	r3, #1
 80017f6:	617b      	str	r3, [r7, #20]
 80017f8:	697a      	ldr	r2, [r7, #20]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	dbf1      	blt.n	80017e4 <_write+0x12>
	}
	return len;
 8001800:	687b      	ldr	r3, [r7, #4]
}
 8001802:	4618      	mov	r0, r3
 8001804:	3718      	adds	r7, #24
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}

0800180a <_close>:

int _close(int file)
{
 800180a:	b480      	push	{r7}
 800180c:	b083      	sub	sp, #12
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
	return -1;
 8001812:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001816:	4618      	mov	r0, r3
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr

08001822 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001822:	b480      	push	{r7}
 8001824:	b083      	sub	sp, #12
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
 800182a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001832:	605a      	str	r2, [r3, #4]
	return 0;
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr

08001842 <_isatty>:

int _isatty(int file)
{
 8001842:	b480      	push	{r7}
 8001844:	b083      	sub	sp, #12
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
	return 1;
 800184a:	2301      	movs	r3, #1
}
 800184c:	4618      	mov	r0, r3
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001858:	b480      	push	{r7}
 800185a:	b085      	sub	sp, #20
 800185c:	af00      	add	r7, sp, #0
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
	return 0;
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	3714      	adds	r7, #20
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
	...

08001874 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b086      	sub	sp, #24
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800187c:	4a14      	ldr	r2, [pc, #80]	; (80018d0 <_sbrk+0x5c>)
 800187e:	4b15      	ldr	r3, [pc, #84]	; (80018d4 <_sbrk+0x60>)
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001888:	4b13      	ldr	r3, [pc, #76]	; (80018d8 <_sbrk+0x64>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d102      	bne.n	8001896 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001890:	4b11      	ldr	r3, [pc, #68]	; (80018d8 <_sbrk+0x64>)
 8001892:	4a12      	ldr	r2, [pc, #72]	; (80018dc <_sbrk+0x68>)
 8001894:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001896:	4b10      	ldr	r3, [pc, #64]	; (80018d8 <_sbrk+0x64>)
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4413      	add	r3, r2
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d207      	bcs.n	80018b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018a4:	f002 fbf6 	bl	8004094 <__errno>
 80018a8:	4603      	mov	r3, r0
 80018aa:	220c      	movs	r2, #12
 80018ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018ae:	f04f 33ff 	mov.w	r3, #4294967295
 80018b2:	e009      	b.n	80018c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018b4:	4b08      	ldr	r3, [pc, #32]	; (80018d8 <_sbrk+0x64>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018ba:	4b07      	ldr	r3, [pc, #28]	; (80018d8 <_sbrk+0x64>)
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4413      	add	r3, r2
 80018c2:	4a05      	ldr	r2, [pc, #20]	; (80018d8 <_sbrk+0x64>)
 80018c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018c6:	68fb      	ldr	r3, [r7, #12]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3718      	adds	r7, #24
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	20018000 	.word	0x20018000
 80018d4:	00000400 	.word	0x00000400
 80018d8:	2000008c 	.word	0x2000008c
 80018dc:	200001e0 	.word	0x200001e0

080018e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018e4:	4b06      	ldr	r3, [pc, #24]	; (8001900 <SystemInit+0x20>)
 80018e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018ea:	4a05      	ldr	r2, [pc, #20]	; (8001900 <SystemInit+0x20>)
 80018ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018f4:	bf00      	nop
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	e000ed00 	.word	0xe000ed00

08001904 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001908:	4b11      	ldr	r3, [pc, #68]	; (8001950 <MX_USART1_UART_Init+0x4c>)
 800190a:	4a12      	ldr	r2, [pc, #72]	; (8001954 <MX_USART1_UART_Init+0x50>)
 800190c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800190e:	4b10      	ldr	r3, [pc, #64]	; (8001950 <MX_USART1_UART_Init+0x4c>)
 8001910:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001914:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001916:	4b0e      	ldr	r3, [pc, #56]	; (8001950 <MX_USART1_UART_Init+0x4c>)
 8001918:	2200      	movs	r2, #0
 800191a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800191c:	4b0c      	ldr	r3, [pc, #48]	; (8001950 <MX_USART1_UART_Init+0x4c>)
 800191e:	2200      	movs	r2, #0
 8001920:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001922:	4b0b      	ldr	r3, [pc, #44]	; (8001950 <MX_USART1_UART_Init+0x4c>)
 8001924:	2200      	movs	r2, #0
 8001926:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001928:	4b09      	ldr	r3, [pc, #36]	; (8001950 <MX_USART1_UART_Init+0x4c>)
 800192a:	220c      	movs	r2, #12
 800192c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800192e:	4b08      	ldr	r3, [pc, #32]	; (8001950 <MX_USART1_UART_Init+0x4c>)
 8001930:	2200      	movs	r2, #0
 8001932:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001934:	4b06      	ldr	r3, [pc, #24]	; (8001950 <MX_USART1_UART_Init+0x4c>)
 8001936:	2200      	movs	r2, #0
 8001938:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800193a:	4805      	ldr	r0, [pc, #20]	; (8001950 <MX_USART1_UART_Init+0x4c>)
 800193c:	f002 f870 	bl	8003a20 <HAL_UART_Init>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001946:	f7ff fea3 	bl	8001690 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800194a:	bf00      	nop
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	20000140 	.word	0x20000140
 8001954:	40011000 	.word	0x40011000

08001958 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800195c:	4b11      	ldr	r3, [pc, #68]	; (80019a4 <MX_USART2_UART_Init+0x4c>)
 800195e:	4a12      	ldr	r2, [pc, #72]	; (80019a8 <MX_USART2_UART_Init+0x50>)
 8001960:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001962:	4b10      	ldr	r3, [pc, #64]	; (80019a4 <MX_USART2_UART_Init+0x4c>)
 8001964:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001968:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800196a:	4b0e      	ldr	r3, [pc, #56]	; (80019a4 <MX_USART2_UART_Init+0x4c>)
 800196c:	2200      	movs	r2, #0
 800196e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001970:	4b0c      	ldr	r3, [pc, #48]	; (80019a4 <MX_USART2_UART_Init+0x4c>)
 8001972:	2200      	movs	r2, #0
 8001974:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001976:	4b0b      	ldr	r3, [pc, #44]	; (80019a4 <MX_USART2_UART_Init+0x4c>)
 8001978:	2200      	movs	r2, #0
 800197a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800197c:	4b09      	ldr	r3, [pc, #36]	; (80019a4 <MX_USART2_UART_Init+0x4c>)
 800197e:	220c      	movs	r2, #12
 8001980:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001982:	4b08      	ldr	r3, [pc, #32]	; (80019a4 <MX_USART2_UART_Init+0x4c>)
 8001984:	2200      	movs	r2, #0
 8001986:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001988:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <MX_USART2_UART_Init+0x4c>)
 800198a:	2200      	movs	r2, #0
 800198c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800198e:	4805      	ldr	r0, [pc, #20]	; (80019a4 <MX_USART2_UART_Init+0x4c>)
 8001990:	f002 f846 	bl	8003a20 <HAL_UART_Init>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800199a:	f7ff fe79 	bl	8001690 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	20000184 	.word	0x20000184
 80019a8:	40004400 	.word	0x40004400

080019ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b08c      	sub	sp, #48	; 0x30
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b4:	f107 031c 	add.w	r3, r7, #28
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	605a      	str	r2, [r3, #4]
 80019be:	609a      	str	r2, [r3, #8]
 80019c0:	60da      	str	r2, [r3, #12]
 80019c2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a32      	ldr	r2, [pc, #200]	; (8001a94 <HAL_UART_MspInit+0xe8>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d12d      	bne.n	8001a2a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	61bb      	str	r3, [r7, #24]
 80019d2:	4b31      	ldr	r3, [pc, #196]	; (8001a98 <HAL_UART_MspInit+0xec>)
 80019d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d6:	4a30      	ldr	r2, [pc, #192]	; (8001a98 <HAL_UART_MspInit+0xec>)
 80019d8:	f043 0310 	orr.w	r3, r3, #16
 80019dc:	6453      	str	r3, [r2, #68]	; 0x44
 80019de:	4b2e      	ldr	r3, [pc, #184]	; (8001a98 <HAL_UART_MspInit+0xec>)
 80019e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e2:	f003 0310 	and.w	r3, r3, #16
 80019e6:	61bb      	str	r3, [r7, #24]
 80019e8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	617b      	str	r3, [r7, #20]
 80019ee:	4b2a      	ldr	r3, [pc, #168]	; (8001a98 <HAL_UART_MspInit+0xec>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	4a29      	ldr	r2, [pc, #164]	; (8001a98 <HAL_UART_MspInit+0xec>)
 80019f4:	f043 0301 	orr.w	r3, r3, #1
 80019f8:	6313      	str	r3, [r2, #48]	; 0x30
 80019fa:	4b27      	ldr	r3, [pc, #156]	; (8001a98 <HAL_UART_MspInit+0xec>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	617b      	str	r3, [r7, #20]
 8001a04:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a06:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001a0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a14:	2303      	movs	r3, #3
 8001a16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a18:	2307      	movs	r3, #7
 8001a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a1c:	f107 031c 	add.w	r3, r7, #28
 8001a20:	4619      	mov	r1, r3
 8001a22:	481e      	ldr	r0, [pc, #120]	; (8001a9c <HAL_UART_MspInit+0xf0>)
 8001a24:	f001 fa18 	bl	8002e58 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001a28:	e030      	b.n	8001a8c <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART2)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a1c      	ldr	r2, [pc, #112]	; (8001aa0 <HAL_UART_MspInit+0xf4>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d12b      	bne.n	8001a8c <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a34:	2300      	movs	r3, #0
 8001a36:	613b      	str	r3, [r7, #16]
 8001a38:	4b17      	ldr	r3, [pc, #92]	; (8001a98 <HAL_UART_MspInit+0xec>)
 8001a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3c:	4a16      	ldr	r2, [pc, #88]	; (8001a98 <HAL_UART_MspInit+0xec>)
 8001a3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a42:	6413      	str	r3, [r2, #64]	; 0x40
 8001a44:	4b14      	ldr	r3, [pc, #80]	; (8001a98 <HAL_UART_MspInit+0xec>)
 8001a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4c:	613b      	str	r3, [r7, #16]
 8001a4e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a50:	2300      	movs	r3, #0
 8001a52:	60fb      	str	r3, [r7, #12]
 8001a54:	4b10      	ldr	r3, [pc, #64]	; (8001a98 <HAL_UART_MspInit+0xec>)
 8001a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a58:	4a0f      	ldr	r2, [pc, #60]	; (8001a98 <HAL_UART_MspInit+0xec>)
 8001a5a:	f043 0301 	orr.w	r3, r3, #1
 8001a5e:	6313      	str	r3, [r2, #48]	; 0x30
 8001a60:	4b0d      	ldr	r3, [pc, #52]	; (8001a98 <HAL_UART_MspInit+0xec>)
 8001a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a64:	f003 0301 	and.w	r3, r3, #1
 8001a68:	60fb      	str	r3, [r7, #12]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a6c:	230c      	movs	r3, #12
 8001a6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a70:	2302      	movs	r3, #2
 8001a72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a74:	2300      	movs	r3, #0
 8001a76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a7c:	2307      	movs	r3, #7
 8001a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a80:	f107 031c 	add.w	r3, r7, #28
 8001a84:	4619      	mov	r1, r3
 8001a86:	4805      	ldr	r0, [pc, #20]	; (8001a9c <HAL_UART_MspInit+0xf0>)
 8001a88:	f001 f9e6 	bl	8002e58 <HAL_GPIO_Init>
}
 8001a8c:	bf00      	nop
 8001a8e:	3730      	adds	r7, #48	; 0x30
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	40011000 	.word	0x40011000
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	40020000 	.word	0x40020000
 8001aa0:	40004400 	.word	0x40004400

08001aa4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
 ldr   sp, =_estack    		 /* set stack pointer */
 8001aa4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001adc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001aa8:	480d      	ldr	r0, [pc, #52]	; (8001ae0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001aaa:	490e      	ldr	r1, [pc, #56]	; (8001ae4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001aac:	4a0e      	ldr	r2, [pc, #56]	; (8001ae8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001aae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ab0:	e002      	b.n	8001ab8 <LoopCopyDataInit>

08001ab2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ab2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ab4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ab6:	3304      	adds	r3, #4

08001ab8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ab8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001abc:	d3f9      	bcc.n	8001ab2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001abe:	4a0b      	ldr	r2, [pc, #44]	; (8001aec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ac0:	4c0b      	ldr	r4, [pc, #44]	; (8001af0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ac2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ac4:	e001      	b.n	8001aca <LoopFillZerobss>

08001ac6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ac6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ac8:	3204      	adds	r2, #4

08001aca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001acc:	d3fb      	bcc.n	8001ac6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001ace:	f7ff ff07 	bl	80018e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ad2:	f002 fae5 	bl	80040a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ad6:	f7ff faf3 	bl	80010c0 <main>
  bx  lr    
 8001ada:	4770      	bx	lr
 ldr   sp, =_estack    		 /* set stack pointer */
 8001adc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001ae0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ae4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001ae8:	08006e4c 	.word	0x08006e4c
  ldr r2, =_sbss
 8001aec:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001af0:	200001dc 	.word	0x200001dc

08001af4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001af4:	e7fe      	b.n	8001af4 <ADC_IRQHandler>
	...

08001af8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001afc:	4b0e      	ldr	r3, [pc, #56]	; (8001b38 <HAL_Init+0x40>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a0d      	ldr	r2, [pc, #52]	; (8001b38 <HAL_Init+0x40>)
 8001b02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b08:	4b0b      	ldr	r3, [pc, #44]	; (8001b38 <HAL_Init+0x40>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a0a      	ldr	r2, [pc, #40]	; (8001b38 <HAL_Init+0x40>)
 8001b0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b14:	4b08      	ldr	r3, [pc, #32]	; (8001b38 <HAL_Init+0x40>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a07      	ldr	r2, [pc, #28]	; (8001b38 <HAL_Init+0x40>)
 8001b1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b20:	2003      	movs	r0, #3
 8001b22:	f000 fd77 	bl	8002614 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b26:	200f      	movs	r0, #15
 8001b28:	f000 f808 	bl	8001b3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b2c:	f7ff fdb6 	bl	800169c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	40023c00 	.word	0x40023c00

08001b3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b44:	4b12      	ldr	r3, [pc, #72]	; (8001b90 <HAL_InitTick+0x54>)
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	4b12      	ldr	r3, [pc, #72]	; (8001b94 <HAL_InitTick+0x58>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b52:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f000 fd8f 	bl	800267e <HAL_SYSTICK_Config>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e00e      	b.n	8001b88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2b0f      	cmp	r3, #15
 8001b6e:	d80a      	bhi.n	8001b86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b70:	2200      	movs	r2, #0
 8001b72:	6879      	ldr	r1, [r7, #4]
 8001b74:	f04f 30ff 	mov.w	r0, #4294967295
 8001b78:	f000 fd57 	bl	800262a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b7c:	4a06      	ldr	r2, [pc, #24]	; (8001b98 <HAL_InitTick+0x5c>)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b82:	2300      	movs	r3, #0
 8001b84:	e000      	b.n	8001b88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3708      	adds	r7, #8
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	20000000 	.word	0x20000000
 8001b94:	20000008 	.word	0x20000008
 8001b98:	20000004 	.word	0x20000004

08001b9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ba0:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <HAL_IncTick+0x20>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <HAL_IncTick+0x24>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4413      	add	r3, r2
 8001bac:	4a04      	ldr	r2, [pc, #16]	; (8001bc0 <HAL_IncTick+0x24>)
 8001bae:	6013      	str	r3, [r2, #0]
}
 8001bb0:	bf00      	nop
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	20000008 	.word	0x20000008
 8001bc0:	200001c8 	.word	0x200001c8

08001bc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  return uwTick;
 8001bc8:	4b03      	ldr	r3, [pc, #12]	; (8001bd8 <HAL_GetTick+0x14>)
 8001bca:	681b      	ldr	r3, [r3, #0]
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	200001c8 	.word	0x200001c8

08001bdc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001be4:	2300      	movs	r3, #0
 8001be6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d101      	bne.n	8001bf2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e033      	b.n	8001c5a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d109      	bne.n	8001c0e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f7ff f99a 	bl	8000f34 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2200      	movs	r2, #0
 8001c04:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c12:	f003 0310 	and.w	r3, r3, #16
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d118      	bne.n	8001c4c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c22:	f023 0302 	bic.w	r3, r3, #2
 8001c26:	f043 0202 	orr.w	r2, r3, #2
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f000 faa2 	bl	8002178 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2200      	movs	r2, #0
 8001c38:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3e:	f023 0303 	bic.w	r3, r3, #3
 8001c42:	f043 0201 	orr.w	r2, r3, #1
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	641a      	str	r2, [r3, #64]	; 0x40
 8001c4a:	e001      	b.n	8001c50 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3710      	adds	r7, #16
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
	...

08001c64 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b086      	sub	sp, #24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	60b9      	str	r1, [r7, #8]
 8001c6e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001c70:	2300      	movs	r3, #0
 8001c72:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d101      	bne.n	8001c82 <HAL_ADC_Start_DMA+0x1e>
 8001c7e:	2302      	movs	r3, #2
 8001c80:	e0ce      	b.n	8001e20 <HAL_ADC_Start_DMA+0x1bc>
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2201      	movs	r2, #1
 8001c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f003 0301 	and.w	r3, r3, #1
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d018      	beq.n	8001cca <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	689a      	ldr	r2, [r3, #8]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f042 0201 	orr.w	r2, r2, #1
 8001ca6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ca8:	4b5f      	ldr	r3, [pc, #380]	; (8001e28 <HAL_ADC_Start_DMA+0x1c4>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a5f      	ldr	r2, [pc, #380]	; (8001e2c <HAL_ADC_Start_DMA+0x1c8>)
 8001cae:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb2:	0c9a      	lsrs	r2, r3, #18
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	4413      	add	r3, r2
 8001cba:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001cbc:	e002      	b.n	8001cc4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	3b01      	subs	r3, #1
 8001cc2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1f9      	bne.n	8001cbe <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cd8:	d107      	bne.n	8001cea <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	689a      	ldr	r2, [r3, #8]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ce8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	f003 0301 	and.w	r3, r3, #1
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	f040 8086 	bne.w	8001e06 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfe:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001d02:	f023 0301 	bic.w	r3, r3, #1
 8001d06:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d007      	beq.n	8001d2c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d20:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d24:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d38:	d106      	bne.n	8001d48 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3e:	f023 0206 	bic.w	r2, r3, #6
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	645a      	str	r2, [r3, #68]	; 0x44
 8001d46:	e002      	b.n	8001d4e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2200      	movs	r2, #0
 8001d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d56:	4b36      	ldr	r3, [pc, #216]	; (8001e30 <HAL_ADC_Start_DMA+0x1cc>)
 8001d58:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d5e:	4a35      	ldr	r2, [pc, #212]	; (8001e34 <HAL_ADC_Start_DMA+0x1d0>)
 8001d60:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d66:	4a34      	ldr	r2, [pc, #208]	; (8001e38 <HAL_ADC_Start_DMA+0x1d4>)
 8001d68:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d6e:	4a33      	ldr	r2, [pc, #204]	; (8001e3c <HAL_ADC_Start_DMA+0x1d8>)
 8001d70:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001d7a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	685a      	ldr	r2, [r3, #4]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001d8a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	689a      	ldr	r2, [r3, #8]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d9a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	334c      	adds	r3, #76	; 0x4c
 8001da6:	4619      	mov	r1, r3
 8001da8:	68ba      	ldr	r2, [r7, #8]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f000 fd22 	bl	80027f4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f003 031f 	and.w	r3, r3, #31
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d10f      	bne.n	8001ddc <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d129      	bne.n	8001e1e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	689a      	ldr	r2, [r3, #8]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001dd8:	609a      	str	r2, [r3, #8]
 8001dda:	e020      	b.n	8001e1e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a17      	ldr	r2, [pc, #92]	; (8001e40 <HAL_ADC_Start_DMA+0x1dc>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d11b      	bne.n	8001e1e <HAL_ADC_Start_DMA+0x1ba>
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d114      	bne.n	8001e1e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	689a      	ldr	r2, [r3, #8]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e02:	609a      	str	r2, [r3, #8]
 8001e04:	e00b      	b.n	8001e1e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0a:	f043 0210 	orr.w	r2, r3, #16
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e16:	f043 0201 	orr.w	r2, r3, #1
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3718      	adds	r7, #24
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	20000000 	.word	0x20000000
 8001e2c:	431bde83 	.word	0x431bde83
 8001e30:	40012300 	.word	0x40012300
 8001e34:	08002371 	.word	0x08002371
 8001e38:	0800242b 	.word	0x0800242b
 8001e3c:	08002447 	.word	0x08002447
 8001e40:	40012000 	.word	0x40012000

08001e44 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d101      	bne.n	8001e5e <HAL_ADC_Stop_DMA+0x1a>
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	e048      	b.n	8001ef0 <HAL_ADC_Stop_DMA+0xac>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2201      	movs	r2, #1
 8001e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	689a      	ldr	r2, [r3, #8]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f022 0201 	bic.w	r2, r2, #1
 8001e74:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f003 0301 	and.w	r3, r3, #1
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d130      	bne.n	8001ee6 <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	689a      	ldr	r2, [r3, #8]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e92:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d10f      	bne.n	8001ec2 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f000 fcfc 	bl	80028a4 <HAL_DMA_Abort>
 8001eac:	4603      	mov	r3, r0
 8001eae:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8001eb0:	7bfb      	ldrb	r3, [r7, #15]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d005      	beq.n	8001ec2 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	685a      	ldr	r2, [r3, #4]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001ed0:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001eda:	f023 0301 	bic.w	r3, r3, #1
 8001ede:	f043 0201 	orr.w	r2, r3, #1
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001eee:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3710      	adds	r7, #16
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001f28:	bf00      	nop
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d101      	bne.n	8001f50 <HAL_ADC_ConfigChannel+0x1c>
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	e105      	b.n	800215c <HAL_ADC_ConfigChannel+0x228>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2201      	movs	r2, #1
 8001f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2b09      	cmp	r3, #9
 8001f5e:	d925      	bls.n	8001fac <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	68d9      	ldr	r1, [r3, #12]
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	4613      	mov	r3, r2
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	4413      	add	r3, r2
 8001f74:	3b1e      	subs	r3, #30
 8001f76:	2207      	movs	r2, #7
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	43da      	mvns	r2, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	400a      	ands	r2, r1
 8001f84:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	68d9      	ldr	r1, [r3, #12]
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	689a      	ldr	r2, [r3, #8]
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	4618      	mov	r0, r3
 8001f98:	4603      	mov	r3, r0
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	4403      	add	r3, r0
 8001f9e:	3b1e      	subs	r3, #30
 8001fa0:	409a      	lsls	r2, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	60da      	str	r2, [r3, #12]
 8001faa:	e022      	b.n	8001ff2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	6919      	ldr	r1, [r3, #16]
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	461a      	mov	r2, r3
 8001fba:	4613      	mov	r3, r2
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	4413      	add	r3, r2
 8001fc0:	2207      	movs	r2, #7
 8001fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc6:	43da      	mvns	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	400a      	ands	r2, r1
 8001fce:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	6919      	ldr	r1, [r3, #16]
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	689a      	ldr	r2, [r3, #8]
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	4403      	add	r3, r0
 8001fe8:	409a      	lsls	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	2b06      	cmp	r3, #6
 8001ff8:	d824      	bhi.n	8002044 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685a      	ldr	r2, [r3, #4]
 8002004:	4613      	mov	r3, r2
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	4413      	add	r3, r2
 800200a:	3b05      	subs	r3, #5
 800200c:	221f      	movs	r2, #31
 800200e:	fa02 f303 	lsl.w	r3, r2, r3
 8002012:	43da      	mvns	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	400a      	ands	r2, r1
 800201a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	b29b      	uxth	r3, r3
 8002028:	4618      	mov	r0, r3
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	685a      	ldr	r2, [r3, #4]
 800202e:	4613      	mov	r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	4413      	add	r3, r2
 8002034:	3b05      	subs	r3, #5
 8002036:	fa00 f203 	lsl.w	r2, r0, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	430a      	orrs	r2, r1
 8002040:	635a      	str	r2, [r3, #52]	; 0x34
 8002042:	e04c      	b.n	80020de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	2b0c      	cmp	r3, #12
 800204a:	d824      	bhi.n	8002096 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685a      	ldr	r2, [r3, #4]
 8002056:	4613      	mov	r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	4413      	add	r3, r2
 800205c:	3b23      	subs	r3, #35	; 0x23
 800205e:	221f      	movs	r2, #31
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	43da      	mvns	r2, r3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	400a      	ands	r2, r1
 800206c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	b29b      	uxth	r3, r3
 800207a:	4618      	mov	r0, r3
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685a      	ldr	r2, [r3, #4]
 8002080:	4613      	mov	r3, r2
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	4413      	add	r3, r2
 8002086:	3b23      	subs	r3, #35	; 0x23
 8002088:	fa00 f203 	lsl.w	r2, r0, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	430a      	orrs	r2, r1
 8002092:	631a      	str	r2, [r3, #48]	; 0x30
 8002094:	e023      	b.n	80020de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685a      	ldr	r2, [r3, #4]
 80020a0:	4613      	mov	r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	4413      	add	r3, r2
 80020a6:	3b41      	subs	r3, #65	; 0x41
 80020a8:	221f      	movs	r2, #31
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	43da      	mvns	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	400a      	ands	r2, r1
 80020b6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	4618      	mov	r0, r3
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	685a      	ldr	r2, [r3, #4]
 80020ca:	4613      	mov	r3, r2
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	4413      	add	r3, r2
 80020d0:	3b41      	subs	r3, #65	; 0x41
 80020d2:	fa00 f203 	lsl.w	r2, r0, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	430a      	orrs	r2, r1
 80020dc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020de:	4b22      	ldr	r3, [pc, #136]	; (8002168 <HAL_ADC_ConfigChannel+0x234>)
 80020e0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a21      	ldr	r2, [pc, #132]	; (800216c <HAL_ADC_ConfigChannel+0x238>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d109      	bne.n	8002100 <HAL_ADC_ConfigChannel+0x1cc>
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2b12      	cmp	r3, #18
 80020f2:	d105      	bne.n	8002100 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a19      	ldr	r2, [pc, #100]	; (800216c <HAL_ADC_ConfigChannel+0x238>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d123      	bne.n	8002152 <HAL_ADC_ConfigChannel+0x21e>
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2b10      	cmp	r3, #16
 8002110:	d003      	beq.n	800211a <HAL_ADC_ConfigChannel+0x1e6>
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2b11      	cmp	r3, #17
 8002118:	d11b      	bne.n	8002152 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2b10      	cmp	r3, #16
 800212c:	d111      	bne.n	8002152 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800212e:	4b10      	ldr	r3, [pc, #64]	; (8002170 <HAL_ADC_ConfigChannel+0x23c>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a10      	ldr	r2, [pc, #64]	; (8002174 <HAL_ADC_ConfigChannel+0x240>)
 8002134:	fba2 2303 	umull	r2, r3, r2, r3
 8002138:	0c9a      	lsrs	r2, r3, #18
 800213a:	4613      	mov	r3, r2
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	4413      	add	r3, r2
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002144:	e002      	b.n	800214c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	3b01      	subs	r3, #1
 800214a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1f9      	bne.n	8002146 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800215a:	2300      	movs	r3, #0
}
 800215c:	4618      	mov	r0, r3
 800215e:	3714      	adds	r7, #20
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr
 8002168:	40012300 	.word	0x40012300
 800216c:	40012000 	.word	0x40012000
 8002170:	20000000 	.word	0x20000000
 8002174:	431bde83 	.word	0x431bde83

08002178 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002178:	b480      	push	{r7}
 800217a:	b085      	sub	sp, #20
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002180:	4b79      	ldr	r3, [pc, #484]	; (8002368 <ADC_Init+0x1f0>)
 8002182:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	685a      	ldr	r2, [r3, #4]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	431a      	orrs	r2, r3
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	685a      	ldr	r2, [r3, #4]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	6859      	ldr	r1, [r3, #4]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	691b      	ldr	r3, [r3, #16]
 80021b8:	021a      	lsls	r2, r3, #8
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	430a      	orrs	r2, r1
 80021c0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	685a      	ldr	r2, [r3, #4]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80021d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	6859      	ldr	r1, [r3, #4]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	689a      	ldr	r2, [r3, #8]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	430a      	orrs	r2, r1
 80021e2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	689a      	ldr	r2, [r3, #8]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	6899      	ldr	r1, [r3, #8]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	68da      	ldr	r2, [r3, #12]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	430a      	orrs	r2, r1
 8002204:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800220a:	4a58      	ldr	r2, [pc, #352]	; (800236c <ADC_Init+0x1f4>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d022      	beq.n	8002256 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	689a      	ldr	r2, [r3, #8]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800221e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	6899      	ldr	r1, [r3, #8]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	430a      	orrs	r2, r1
 8002230:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	689a      	ldr	r2, [r3, #8]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002240:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	6899      	ldr	r1, [r3, #8]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	430a      	orrs	r2, r1
 8002252:	609a      	str	r2, [r3, #8]
 8002254:	e00f      	b.n	8002276 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	689a      	ldr	r2, [r3, #8]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002264:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	689a      	ldr	r2, [r3, #8]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002274:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	689a      	ldr	r2, [r3, #8]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f022 0202 	bic.w	r2, r2, #2
 8002284:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	6899      	ldr	r1, [r3, #8]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	7e1b      	ldrb	r3, [r3, #24]
 8002290:	005a      	lsls	r2, r3, #1
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	430a      	orrs	r2, r1
 8002298:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d01b      	beq.n	80022dc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	685a      	ldr	r2, [r3, #4]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022b2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	685a      	ldr	r2, [r3, #4]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80022c2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	6859      	ldr	r1, [r3, #4]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ce:	3b01      	subs	r3, #1
 80022d0:	035a      	lsls	r2, r3, #13
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	430a      	orrs	r2, r1
 80022d8:	605a      	str	r2, [r3, #4]
 80022da:	e007      	b.n	80022ec <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	685a      	ldr	r2, [r3, #4]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022ea:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80022fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	69db      	ldr	r3, [r3, #28]
 8002306:	3b01      	subs	r3, #1
 8002308:	051a      	lsls	r2, r3, #20
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	430a      	orrs	r2, r1
 8002310:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	689a      	ldr	r2, [r3, #8]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002320:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	6899      	ldr	r1, [r3, #8]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800232e:	025a      	lsls	r2, r3, #9
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	430a      	orrs	r2, r1
 8002336:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	689a      	ldr	r2, [r3, #8]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002346:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	6899      	ldr	r1, [r3, #8]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	695b      	ldr	r3, [r3, #20]
 8002352:	029a      	lsls	r2, r3, #10
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	430a      	orrs	r2, r1
 800235a:	609a      	str	r2, [r3, #8]
}
 800235c:	bf00      	nop
 800235e:	3714      	adds	r7, #20
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr
 8002368:	40012300 	.word	0x40012300
 800236c:	0f000001 	.word	0x0f000001

08002370 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800237c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002382:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002386:	2b00      	cmp	r3, #0
 8002388:	d13c      	bne.n	8002404 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d12b      	bne.n	80023fc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d127      	bne.n	80023fc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d006      	beq.n	80023c8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d119      	bne.n	80023fc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	685a      	ldr	r2, [r3, #4]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f022 0220 	bic.w	r2, r2, #32
 80023d6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d105      	bne.n	80023fc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f4:	f043 0201 	orr.w	r2, r3, #1
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80023fc:	68f8      	ldr	r0, [r7, #12]
 80023fe:	f7ff fd7b 	bl	8001ef8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002402:	e00e      	b.n	8002422 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002408:	f003 0310 	and.w	r3, r3, #16
 800240c:	2b00      	cmp	r3, #0
 800240e:	d003      	beq.n	8002418 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002410:	68f8      	ldr	r0, [r7, #12]
 8002412:	f7ff fd85 	bl	8001f20 <HAL_ADC_ErrorCallback>
}
 8002416:	e004      	b.n	8002422 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800241c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	4798      	blx	r3
}
 8002422:	bf00      	nop
 8002424:	3710      	adds	r7, #16
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b084      	sub	sp, #16
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002436:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002438:	68f8      	ldr	r0, [r7, #12]
 800243a:	f7ff fd67 	bl	8001f0c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800243e:	bf00      	nop
 8002440:	3710      	adds	r7, #16
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}

08002446 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002446:	b580      	push	{r7, lr}
 8002448:	b084      	sub	sp, #16
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002452:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2240      	movs	r2, #64	; 0x40
 8002458:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800245e:	f043 0204 	orr.w	r2, r3, #4
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002466:	68f8      	ldr	r0, [r7, #12]
 8002468:	f7ff fd5a 	bl	8001f20 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800246c:	bf00      	nop
 800246e:	3710      	adds	r7, #16
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}

08002474 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002474:	b480      	push	{r7}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f003 0307 	and.w	r3, r3, #7
 8002482:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002484:	4b0c      	ldr	r3, [pc, #48]	; (80024b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800248a:	68ba      	ldr	r2, [r7, #8]
 800248c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002490:	4013      	ands	r3, r2
 8002492:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800249c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024a6:	4a04      	ldr	r2, [pc, #16]	; (80024b8 <__NVIC_SetPriorityGrouping+0x44>)
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	60d3      	str	r3, [r2, #12]
}
 80024ac:	bf00      	nop
 80024ae:	3714      	adds	r7, #20
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr
 80024b8:	e000ed00 	.word	0xe000ed00

080024bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024c0:	4b04      	ldr	r3, [pc, #16]	; (80024d4 <__NVIC_GetPriorityGrouping+0x18>)
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	0a1b      	lsrs	r3, r3, #8
 80024c6:	f003 0307 	and.w	r3, r3, #7
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr
 80024d4:	e000ed00 	.word	0xe000ed00

080024d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	4603      	mov	r3, r0
 80024e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	db0b      	blt.n	8002502 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024ea:	79fb      	ldrb	r3, [r7, #7]
 80024ec:	f003 021f 	and.w	r2, r3, #31
 80024f0:	4907      	ldr	r1, [pc, #28]	; (8002510 <__NVIC_EnableIRQ+0x38>)
 80024f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f6:	095b      	lsrs	r3, r3, #5
 80024f8:	2001      	movs	r0, #1
 80024fa:	fa00 f202 	lsl.w	r2, r0, r2
 80024fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002502:	bf00      	nop
 8002504:	370c      	adds	r7, #12
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	e000e100 	.word	0xe000e100

08002514 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	4603      	mov	r3, r0
 800251c:	6039      	str	r1, [r7, #0]
 800251e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002524:	2b00      	cmp	r3, #0
 8002526:	db0a      	blt.n	800253e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	b2da      	uxtb	r2, r3
 800252c:	490c      	ldr	r1, [pc, #48]	; (8002560 <__NVIC_SetPriority+0x4c>)
 800252e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002532:	0112      	lsls	r2, r2, #4
 8002534:	b2d2      	uxtb	r2, r2
 8002536:	440b      	add	r3, r1
 8002538:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800253c:	e00a      	b.n	8002554 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	b2da      	uxtb	r2, r3
 8002542:	4908      	ldr	r1, [pc, #32]	; (8002564 <__NVIC_SetPriority+0x50>)
 8002544:	79fb      	ldrb	r3, [r7, #7]
 8002546:	f003 030f 	and.w	r3, r3, #15
 800254a:	3b04      	subs	r3, #4
 800254c:	0112      	lsls	r2, r2, #4
 800254e:	b2d2      	uxtb	r2, r2
 8002550:	440b      	add	r3, r1
 8002552:	761a      	strb	r2, [r3, #24]
}
 8002554:	bf00      	nop
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr
 8002560:	e000e100 	.word	0xe000e100
 8002564:	e000ed00 	.word	0xe000ed00

08002568 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002568:	b480      	push	{r7}
 800256a:	b089      	sub	sp, #36	; 0x24
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f003 0307 	and.w	r3, r3, #7
 800257a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	f1c3 0307 	rsb	r3, r3, #7
 8002582:	2b04      	cmp	r3, #4
 8002584:	bf28      	it	cs
 8002586:	2304      	movcs	r3, #4
 8002588:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	3304      	adds	r3, #4
 800258e:	2b06      	cmp	r3, #6
 8002590:	d902      	bls.n	8002598 <NVIC_EncodePriority+0x30>
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	3b03      	subs	r3, #3
 8002596:	e000      	b.n	800259a <NVIC_EncodePriority+0x32>
 8002598:	2300      	movs	r3, #0
 800259a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800259c:	f04f 32ff 	mov.w	r2, #4294967295
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	fa02 f303 	lsl.w	r3, r2, r3
 80025a6:	43da      	mvns	r2, r3
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	401a      	ands	r2, r3
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025b0:	f04f 31ff 	mov.w	r1, #4294967295
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	fa01 f303 	lsl.w	r3, r1, r3
 80025ba:	43d9      	mvns	r1, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025c0:	4313      	orrs	r3, r2
         );
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3724      	adds	r7, #36	; 0x24
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
	...

080025d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	3b01      	subs	r3, #1
 80025dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025e0:	d301      	bcc.n	80025e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025e2:	2301      	movs	r3, #1
 80025e4:	e00f      	b.n	8002606 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025e6:	4a0a      	ldr	r2, [pc, #40]	; (8002610 <SysTick_Config+0x40>)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	3b01      	subs	r3, #1
 80025ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025ee:	210f      	movs	r1, #15
 80025f0:	f04f 30ff 	mov.w	r0, #4294967295
 80025f4:	f7ff ff8e 	bl	8002514 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025f8:	4b05      	ldr	r3, [pc, #20]	; (8002610 <SysTick_Config+0x40>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025fe:	4b04      	ldr	r3, [pc, #16]	; (8002610 <SysTick_Config+0x40>)
 8002600:	2207      	movs	r2, #7
 8002602:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	3708      	adds	r7, #8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	e000e010 	.word	0xe000e010

08002614 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f7ff ff29 	bl	8002474 <__NVIC_SetPriorityGrouping>
}
 8002622:	bf00      	nop
 8002624:	3708      	adds	r7, #8
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800262a:	b580      	push	{r7, lr}
 800262c:	b086      	sub	sp, #24
 800262e:	af00      	add	r7, sp, #0
 8002630:	4603      	mov	r3, r0
 8002632:	60b9      	str	r1, [r7, #8]
 8002634:	607a      	str	r2, [r7, #4]
 8002636:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002638:	2300      	movs	r3, #0
 800263a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800263c:	f7ff ff3e 	bl	80024bc <__NVIC_GetPriorityGrouping>
 8002640:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	68b9      	ldr	r1, [r7, #8]
 8002646:	6978      	ldr	r0, [r7, #20]
 8002648:	f7ff ff8e 	bl	8002568 <NVIC_EncodePriority>
 800264c:	4602      	mov	r2, r0
 800264e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002652:	4611      	mov	r1, r2
 8002654:	4618      	mov	r0, r3
 8002656:	f7ff ff5d 	bl	8002514 <__NVIC_SetPriority>
}
 800265a:	bf00      	nop
 800265c:	3718      	adds	r7, #24
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002662:	b580      	push	{r7, lr}
 8002664:	b082      	sub	sp, #8
 8002666:	af00      	add	r7, sp, #0
 8002668:	4603      	mov	r3, r0
 800266a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800266c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002670:	4618      	mov	r0, r3
 8002672:	f7ff ff31 	bl	80024d8 <__NVIC_EnableIRQ>
}
 8002676:	bf00      	nop
 8002678:	3708      	adds	r7, #8
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800267e:	b580      	push	{r7, lr}
 8002680:	b082      	sub	sp, #8
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f7ff ffa2 	bl	80025d0 <SysTick_Config>
 800268c:	4603      	mov	r3, r0
}
 800268e:	4618      	mov	r0, r3
 8002690:	3708      	adds	r7, #8
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
	...

08002698 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b086      	sub	sp, #24
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80026a0:	2300      	movs	r3, #0
 80026a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80026a4:	f7ff fa8e 	bl	8001bc4 <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d101      	bne.n	80026b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e099      	b.n	80027e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2202      	movs	r2, #2
 80026b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f022 0201 	bic.w	r2, r2, #1
 80026d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026d4:	e00f      	b.n	80026f6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026d6:	f7ff fa75 	bl	8001bc4 <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	2b05      	cmp	r3, #5
 80026e2:	d908      	bls.n	80026f6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2220      	movs	r2, #32
 80026e8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2203      	movs	r2, #3
 80026ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e078      	b.n	80027e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0301 	and.w	r3, r3, #1
 8002700:	2b00      	cmp	r3, #0
 8002702:	d1e8      	bne.n	80026d6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800270c:	697a      	ldr	r2, [r7, #20]
 800270e:	4b38      	ldr	r3, [pc, #224]	; (80027f0 <HAL_DMA_Init+0x158>)
 8002710:	4013      	ands	r3, r2
 8002712:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685a      	ldr	r2, [r3, #4]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002722:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	691b      	ldr	r3, [r3, #16]
 8002728:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800272e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	699b      	ldr	r3, [r3, #24]
 8002734:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800273a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a1b      	ldr	r3, [r3, #32]
 8002740:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002742:	697a      	ldr	r2, [r7, #20]
 8002744:	4313      	orrs	r3, r2
 8002746:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274c:	2b04      	cmp	r3, #4
 800274e:	d107      	bne.n	8002760 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002758:	4313      	orrs	r3, r2
 800275a:	697a      	ldr	r2, [r7, #20]
 800275c:	4313      	orrs	r3, r2
 800275e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	697a      	ldr	r2, [r7, #20]
 8002766:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	695b      	ldr	r3, [r3, #20]
 800276e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	f023 0307 	bic.w	r3, r3, #7
 8002776:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277c:	697a      	ldr	r2, [r7, #20]
 800277e:	4313      	orrs	r3, r2
 8002780:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002786:	2b04      	cmp	r3, #4
 8002788:	d117      	bne.n	80027ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800278e:	697a      	ldr	r2, [r7, #20]
 8002790:	4313      	orrs	r3, r2
 8002792:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002798:	2b00      	cmp	r3, #0
 800279a:	d00e      	beq.n	80027ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f000 fadf 	bl	8002d60 <DMA_CheckFifoParam>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d008      	beq.n	80027ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2240      	movs	r2, #64	; 0x40
 80027ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2201      	movs	r2, #1
 80027b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80027b6:	2301      	movs	r3, #1
 80027b8:	e016      	b.n	80027e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	697a      	ldr	r2, [r7, #20]
 80027c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f000 fa96 	bl	8002cf4 <DMA_CalcBaseAndBitshift>
 80027c8:	4603      	mov	r3, r0
 80027ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027d0:	223f      	movs	r2, #63	; 0x3f
 80027d2:	409a      	lsls	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2201      	movs	r2, #1
 80027e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80027e6:	2300      	movs	r3, #0
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3718      	adds	r7, #24
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	f010803f 	.word	0xf010803f

080027f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b086      	sub	sp, #24
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	607a      	str	r2, [r7, #4]
 8002800:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002802:	2300      	movs	r3, #0
 8002804:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800280a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002812:	2b01      	cmp	r3, #1
 8002814:	d101      	bne.n	800281a <HAL_DMA_Start_IT+0x26>
 8002816:	2302      	movs	r3, #2
 8002818:	e040      	b.n	800289c <HAL_DMA_Start_IT+0xa8>
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2201      	movs	r2, #1
 800281e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002828:	b2db      	uxtb	r3, r3
 800282a:	2b01      	cmp	r3, #1
 800282c:	d12f      	bne.n	800288e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2202      	movs	r2, #2
 8002832:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2200      	movs	r2, #0
 800283a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	68b9      	ldr	r1, [r7, #8]
 8002842:	68f8      	ldr	r0, [r7, #12]
 8002844:	f000 fa28 	bl	8002c98 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800284c:	223f      	movs	r2, #63	; 0x3f
 800284e:	409a      	lsls	r2, r3
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f042 0216 	orr.w	r2, r2, #22
 8002862:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002868:	2b00      	cmp	r3, #0
 800286a:	d007      	beq.n	800287c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f042 0208 	orr.w	r2, r2, #8
 800287a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f042 0201 	orr.w	r2, r2, #1
 800288a:	601a      	str	r2, [r3, #0]
 800288c:	e005      	b.n	800289a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002896:	2302      	movs	r3, #2
 8002898:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800289a:	7dfb      	ldrb	r3, [r7, #23]
}
 800289c:	4618      	mov	r0, r3
 800289e:	3718      	adds	r7, #24
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80028b2:	f7ff f987 	bl	8001bc4 <HAL_GetTick>
 80028b6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d008      	beq.n	80028d6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2280      	movs	r2, #128	; 0x80
 80028c8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e052      	b.n	800297c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f022 0216 	bic.w	r2, r2, #22
 80028e4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	695a      	ldr	r2, [r3, #20]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028f4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d103      	bne.n	8002906 <HAL_DMA_Abort+0x62>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002902:	2b00      	cmp	r3, #0
 8002904:	d007      	beq.n	8002916 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f022 0208 	bic.w	r2, r2, #8
 8002914:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f022 0201 	bic.w	r2, r2, #1
 8002924:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002926:	e013      	b.n	8002950 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002928:	f7ff f94c 	bl	8001bc4 <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b05      	cmp	r3, #5
 8002934:	d90c      	bls.n	8002950 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2220      	movs	r2, #32
 800293a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2203      	movs	r2, #3
 8002940:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	e015      	b.n	800297c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	2b00      	cmp	r3, #0
 800295c:	d1e4      	bne.n	8002928 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002962:	223f      	movs	r2, #63	; 0x3f
 8002964:	409a      	lsls	r2, r3
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2201      	movs	r2, #1
 800296e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800297a:	2300      	movs	r3, #0
}
 800297c:	4618      	mov	r0, r3
 800297e:	3710      	adds	r7, #16
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b086      	sub	sp, #24
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800298c:	2300      	movs	r3, #0
 800298e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002990:	4b92      	ldr	r3, [pc, #584]	; (8002bdc <HAL_DMA_IRQHandler+0x258>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a92      	ldr	r2, [pc, #584]	; (8002be0 <HAL_DMA_IRQHandler+0x25c>)
 8002996:	fba2 2303 	umull	r2, r3, r2, r3
 800299a:	0a9b      	lsrs	r3, r3, #10
 800299c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ae:	2208      	movs	r2, #8
 80029b0:	409a      	lsls	r2, r3
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	4013      	ands	r3, r2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d01a      	beq.n	80029f0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0304 	and.w	r3, r3, #4
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d013      	beq.n	80029f0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f022 0204 	bic.w	r2, r2, #4
 80029d6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029dc:	2208      	movs	r2, #8
 80029de:	409a      	lsls	r2, r3
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029e8:	f043 0201 	orr.w	r2, r3, #1
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f4:	2201      	movs	r2, #1
 80029f6:	409a      	lsls	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	4013      	ands	r3, r2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d012      	beq.n	8002a26 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	695b      	ldr	r3, [r3, #20]
 8002a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00b      	beq.n	8002a26 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a12:	2201      	movs	r2, #1
 8002a14:	409a      	lsls	r2, r3
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a1e:	f043 0202 	orr.w	r2, r3, #2
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a2a:	2204      	movs	r2, #4
 8002a2c:	409a      	lsls	r2, r3
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	4013      	ands	r3, r2
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d012      	beq.n	8002a5c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0302 	and.w	r3, r3, #2
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d00b      	beq.n	8002a5c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a48:	2204      	movs	r2, #4
 8002a4a:	409a      	lsls	r2, r3
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a54:	f043 0204 	orr.w	r2, r3, #4
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a60:	2210      	movs	r2, #16
 8002a62:	409a      	lsls	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	4013      	ands	r3, r2
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d043      	beq.n	8002af4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0308 	and.w	r3, r3, #8
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d03c      	beq.n	8002af4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a7e:	2210      	movs	r2, #16
 8002a80:	409a      	lsls	r2, r3
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d018      	beq.n	8002ac6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d108      	bne.n	8002ab4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d024      	beq.n	8002af4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	4798      	blx	r3
 8002ab2:	e01f      	b.n	8002af4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d01b      	beq.n	8002af4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	4798      	blx	r3
 8002ac4:	e016      	b.n	8002af4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d107      	bne.n	8002ae4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f022 0208 	bic.w	r2, r2, #8
 8002ae2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d003      	beq.n	8002af4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002af8:	2220      	movs	r2, #32
 8002afa:	409a      	lsls	r2, r3
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	4013      	ands	r3, r2
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	f000 808e 	beq.w	8002c22 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0310 	and.w	r3, r3, #16
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	f000 8086 	beq.w	8002c22 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b1a:	2220      	movs	r2, #32
 8002b1c:	409a      	lsls	r2, r3
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2b05      	cmp	r3, #5
 8002b2c:	d136      	bne.n	8002b9c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f022 0216 	bic.w	r2, r2, #22
 8002b3c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	695a      	ldr	r2, [r3, #20]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b4c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d103      	bne.n	8002b5e <HAL_DMA_IRQHandler+0x1da>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d007      	beq.n	8002b6e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f022 0208 	bic.w	r2, r2, #8
 8002b6c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b72:	223f      	movs	r2, #63	; 0x3f
 8002b74:	409a      	lsls	r2, r3
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d07d      	beq.n	8002c8e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	4798      	blx	r3
        }
        return;
 8002b9a:	e078      	b.n	8002c8e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d01c      	beq.n	8002be4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d108      	bne.n	8002bca <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d030      	beq.n	8002c22 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	4798      	blx	r3
 8002bc8:	e02b      	b.n	8002c22 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d027      	beq.n	8002c22 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	4798      	blx	r3
 8002bda:	e022      	b.n	8002c22 <HAL_DMA_IRQHandler+0x29e>
 8002bdc:	20000000 	.word	0x20000000
 8002be0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d10f      	bne.n	8002c12 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f022 0210 	bic.w	r2, r2, #16
 8002c00:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2201      	movs	r2, #1
 8002c06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d003      	beq.n	8002c22 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d032      	beq.n	8002c90 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d022      	beq.n	8002c7c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2205      	movs	r2, #5
 8002c3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f022 0201 	bic.w	r2, r2, #1
 8002c4c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	3301      	adds	r3, #1
 8002c52:	60bb      	str	r3, [r7, #8]
 8002c54:	697a      	ldr	r2, [r7, #20]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d307      	bcc.n	8002c6a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0301 	and.w	r3, r3, #1
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d1f2      	bne.n	8002c4e <HAL_DMA_IRQHandler+0x2ca>
 8002c68:	e000      	b.n	8002c6c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002c6a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d005      	beq.n	8002c90 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	4798      	blx	r3
 8002c8c:	e000      	b.n	8002c90 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002c8e:	bf00      	nop
    }
  }
}
 8002c90:	3718      	adds	r7, #24
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop

08002c98 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b085      	sub	sp, #20
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]
 8002ca4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002cb4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	683a      	ldr	r2, [r7, #0]
 8002cbc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	2b40      	cmp	r3, #64	; 0x40
 8002cc4:	d108      	bne.n	8002cd8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	68ba      	ldr	r2, [r7, #8]
 8002cd4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002cd6:	e007      	b.n	8002ce8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	68ba      	ldr	r2, [r7, #8]
 8002cde:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	60da      	str	r2, [r3, #12]
}
 8002ce8:	bf00      	nop
 8002cea:	3714      	adds	r7, #20
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b085      	sub	sp, #20
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	3b10      	subs	r3, #16
 8002d04:	4a14      	ldr	r2, [pc, #80]	; (8002d58 <DMA_CalcBaseAndBitshift+0x64>)
 8002d06:	fba2 2303 	umull	r2, r3, r2, r3
 8002d0a:	091b      	lsrs	r3, r3, #4
 8002d0c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002d0e:	4a13      	ldr	r2, [pc, #76]	; (8002d5c <DMA_CalcBaseAndBitshift+0x68>)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	4413      	add	r3, r2
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	461a      	mov	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2b03      	cmp	r3, #3
 8002d20:	d909      	bls.n	8002d36 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002d2a:	f023 0303 	bic.w	r3, r3, #3
 8002d2e:	1d1a      	adds	r2, r3, #4
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	659a      	str	r2, [r3, #88]	; 0x58
 8002d34:	e007      	b.n	8002d46 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002d3e:	f023 0303 	bic.w	r3, r3, #3
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3714      	adds	r7, #20
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	aaaaaaab 	.word	0xaaaaaaab
 8002d5c:	08006b6c 	.word	0x08006b6c

08002d60 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b085      	sub	sp, #20
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d70:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d11f      	bne.n	8002dba <DMA_CheckFifoParam+0x5a>
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	2b03      	cmp	r3, #3
 8002d7e:	d856      	bhi.n	8002e2e <DMA_CheckFifoParam+0xce>
 8002d80:	a201      	add	r2, pc, #4	; (adr r2, 8002d88 <DMA_CheckFifoParam+0x28>)
 8002d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d86:	bf00      	nop
 8002d88:	08002d99 	.word	0x08002d99
 8002d8c:	08002dab 	.word	0x08002dab
 8002d90:	08002d99 	.word	0x08002d99
 8002d94:	08002e2f 	.word	0x08002e2f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d046      	beq.n	8002e32 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002da8:	e043      	b.n	8002e32 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002db2:	d140      	bne.n	8002e36 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002db8:	e03d      	b.n	8002e36 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dc2:	d121      	bne.n	8002e08 <DMA_CheckFifoParam+0xa8>
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	2b03      	cmp	r3, #3
 8002dc8:	d837      	bhi.n	8002e3a <DMA_CheckFifoParam+0xda>
 8002dca:	a201      	add	r2, pc, #4	; (adr r2, 8002dd0 <DMA_CheckFifoParam+0x70>)
 8002dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dd0:	08002de1 	.word	0x08002de1
 8002dd4:	08002de7 	.word	0x08002de7
 8002dd8:	08002de1 	.word	0x08002de1
 8002ddc:	08002df9 	.word	0x08002df9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	73fb      	strb	r3, [r7, #15]
      break;
 8002de4:	e030      	b.n	8002e48 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d025      	beq.n	8002e3e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002df6:	e022      	b.n	8002e3e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dfc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e00:	d11f      	bne.n	8002e42 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002e06:	e01c      	b.n	8002e42 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d903      	bls.n	8002e16 <DMA_CheckFifoParam+0xb6>
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	2b03      	cmp	r3, #3
 8002e12:	d003      	beq.n	8002e1c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002e14:	e018      	b.n	8002e48 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	73fb      	strb	r3, [r7, #15]
      break;
 8002e1a:	e015      	b.n	8002e48 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d00e      	beq.n	8002e46 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e2c:	e00b      	b.n	8002e46 <DMA_CheckFifoParam+0xe6>
      break;
 8002e2e:	bf00      	nop
 8002e30:	e00a      	b.n	8002e48 <DMA_CheckFifoParam+0xe8>
      break;
 8002e32:	bf00      	nop
 8002e34:	e008      	b.n	8002e48 <DMA_CheckFifoParam+0xe8>
      break;
 8002e36:	bf00      	nop
 8002e38:	e006      	b.n	8002e48 <DMA_CheckFifoParam+0xe8>
      break;
 8002e3a:	bf00      	nop
 8002e3c:	e004      	b.n	8002e48 <DMA_CheckFifoParam+0xe8>
      break;
 8002e3e:	bf00      	nop
 8002e40:	e002      	b.n	8002e48 <DMA_CheckFifoParam+0xe8>
      break;   
 8002e42:	bf00      	nop
 8002e44:	e000      	b.n	8002e48 <DMA_CheckFifoParam+0xe8>
      break;
 8002e46:	bf00      	nop
    }
  } 
  
  return status; 
 8002e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3714      	adds	r7, #20
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop

08002e58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b089      	sub	sp, #36	; 0x24
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e62:	2300      	movs	r3, #0
 8002e64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e66:	2300      	movs	r3, #0
 8002e68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e6e:	2300      	movs	r3, #0
 8002e70:	61fb      	str	r3, [r7, #28]
 8002e72:	e159      	b.n	8003128 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e74:	2201      	movs	r2, #1
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	697a      	ldr	r2, [r7, #20]
 8002e84:	4013      	ands	r3, r2
 8002e86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e88:	693a      	ldr	r2, [r7, #16]
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	f040 8148 	bne.w	8003122 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f003 0303 	and.w	r3, r3, #3
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d005      	beq.n	8002eaa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d130      	bne.n	8002f0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	005b      	lsls	r3, r3, #1
 8002eb4:	2203      	movs	r2, #3
 8002eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eba:	43db      	mvns	r3, r3
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	68da      	ldr	r2, [r3, #12]
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	69ba      	ldr	r2, [r7, #24]
 8002ed8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee8:	43db      	mvns	r3, r3
 8002eea:	69ba      	ldr	r2, [r7, #24]
 8002eec:	4013      	ands	r3, r2
 8002eee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	091b      	lsrs	r3, r3, #4
 8002ef6:	f003 0201 	and.w	r2, r3, #1
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	fa02 f303 	lsl.w	r3, r2, r3
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	69ba      	ldr	r2, [r7, #24]
 8002f0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f003 0303 	and.w	r3, r3, #3
 8002f14:	2b03      	cmp	r3, #3
 8002f16:	d017      	beq.n	8002f48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	005b      	lsls	r3, r3, #1
 8002f22:	2203      	movs	r2, #3
 8002f24:	fa02 f303 	lsl.w	r3, r2, r3
 8002f28:	43db      	mvns	r3, r3
 8002f2a:	69ba      	ldr	r2, [r7, #24]
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	689a      	ldr	r2, [r3, #8]
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	005b      	lsls	r3, r3, #1
 8002f38:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3c:	69ba      	ldr	r2, [r7, #24]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	69ba      	ldr	r2, [r7, #24]
 8002f46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f003 0303 	and.w	r3, r3, #3
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d123      	bne.n	8002f9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	08da      	lsrs	r2, r3, #3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	3208      	adds	r2, #8
 8002f5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	f003 0307 	and.w	r3, r3, #7
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	220f      	movs	r2, #15
 8002f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f70:	43db      	mvns	r3, r3
 8002f72:	69ba      	ldr	r2, [r7, #24]
 8002f74:	4013      	ands	r3, r2
 8002f76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	691a      	ldr	r2, [r3, #16]
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	f003 0307 	and.w	r3, r3, #7
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	fa02 f303 	lsl.w	r3, r2, r3
 8002f88:	69ba      	ldr	r2, [r7, #24]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	08da      	lsrs	r2, r3, #3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	3208      	adds	r2, #8
 8002f96:	69b9      	ldr	r1, [r7, #24]
 8002f98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	005b      	lsls	r3, r3, #1
 8002fa6:	2203      	movs	r2, #3
 8002fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fac:	43db      	mvns	r3, r3
 8002fae:	69ba      	ldr	r2, [r7, #24]
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f003 0203 	and.w	r2, r3, #3
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	005b      	lsls	r3, r3, #1
 8002fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	f000 80a2 	beq.w	8003122 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fde:	2300      	movs	r3, #0
 8002fe0:	60fb      	str	r3, [r7, #12]
 8002fe2:	4b57      	ldr	r3, [pc, #348]	; (8003140 <HAL_GPIO_Init+0x2e8>)
 8002fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe6:	4a56      	ldr	r2, [pc, #344]	; (8003140 <HAL_GPIO_Init+0x2e8>)
 8002fe8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fec:	6453      	str	r3, [r2, #68]	; 0x44
 8002fee:	4b54      	ldr	r3, [pc, #336]	; (8003140 <HAL_GPIO_Init+0x2e8>)
 8002ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ff6:	60fb      	str	r3, [r7, #12]
 8002ff8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ffa:	4a52      	ldr	r2, [pc, #328]	; (8003144 <HAL_GPIO_Init+0x2ec>)
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	089b      	lsrs	r3, r3, #2
 8003000:	3302      	adds	r3, #2
 8003002:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003006:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	f003 0303 	and.w	r3, r3, #3
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	220f      	movs	r2, #15
 8003012:	fa02 f303 	lsl.w	r3, r2, r3
 8003016:	43db      	mvns	r3, r3
 8003018:	69ba      	ldr	r2, [r7, #24]
 800301a:	4013      	ands	r3, r2
 800301c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a49      	ldr	r2, [pc, #292]	; (8003148 <HAL_GPIO_Init+0x2f0>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d019      	beq.n	800305a <HAL_GPIO_Init+0x202>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a48      	ldr	r2, [pc, #288]	; (800314c <HAL_GPIO_Init+0x2f4>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d013      	beq.n	8003056 <HAL_GPIO_Init+0x1fe>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a47      	ldr	r2, [pc, #284]	; (8003150 <HAL_GPIO_Init+0x2f8>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d00d      	beq.n	8003052 <HAL_GPIO_Init+0x1fa>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a46      	ldr	r2, [pc, #280]	; (8003154 <HAL_GPIO_Init+0x2fc>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d007      	beq.n	800304e <HAL_GPIO_Init+0x1f6>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a45      	ldr	r2, [pc, #276]	; (8003158 <HAL_GPIO_Init+0x300>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d101      	bne.n	800304a <HAL_GPIO_Init+0x1f2>
 8003046:	2304      	movs	r3, #4
 8003048:	e008      	b.n	800305c <HAL_GPIO_Init+0x204>
 800304a:	2307      	movs	r3, #7
 800304c:	e006      	b.n	800305c <HAL_GPIO_Init+0x204>
 800304e:	2303      	movs	r3, #3
 8003050:	e004      	b.n	800305c <HAL_GPIO_Init+0x204>
 8003052:	2302      	movs	r3, #2
 8003054:	e002      	b.n	800305c <HAL_GPIO_Init+0x204>
 8003056:	2301      	movs	r3, #1
 8003058:	e000      	b.n	800305c <HAL_GPIO_Init+0x204>
 800305a:	2300      	movs	r3, #0
 800305c:	69fa      	ldr	r2, [r7, #28]
 800305e:	f002 0203 	and.w	r2, r2, #3
 8003062:	0092      	lsls	r2, r2, #2
 8003064:	4093      	lsls	r3, r2
 8003066:	69ba      	ldr	r2, [r7, #24]
 8003068:	4313      	orrs	r3, r2
 800306a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800306c:	4935      	ldr	r1, [pc, #212]	; (8003144 <HAL_GPIO_Init+0x2ec>)
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	089b      	lsrs	r3, r3, #2
 8003072:	3302      	adds	r3, #2
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800307a:	4b38      	ldr	r3, [pc, #224]	; (800315c <HAL_GPIO_Init+0x304>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	43db      	mvns	r3, r3
 8003084:	69ba      	ldr	r2, [r7, #24]
 8003086:	4013      	ands	r3, r2
 8003088:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d003      	beq.n	800309e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003096:	69ba      	ldr	r2, [r7, #24]
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	4313      	orrs	r3, r2
 800309c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800309e:	4a2f      	ldr	r2, [pc, #188]	; (800315c <HAL_GPIO_Init+0x304>)
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80030a4:	4b2d      	ldr	r3, [pc, #180]	; (800315c <HAL_GPIO_Init+0x304>)
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	43db      	mvns	r3, r3
 80030ae:	69ba      	ldr	r2, [r7, #24]
 80030b0:	4013      	ands	r3, r2
 80030b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d003      	beq.n	80030c8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80030c0:	69ba      	ldr	r2, [r7, #24]
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030c8:	4a24      	ldr	r2, [pc, #144]	; (800315c <HAL_GPIO_Init+0x304>)
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030ce:	4b23      	ldr	r3, [pc, #140]	; (800315c <HAL_GPIO_Init+0x304>)
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	43db      	mvns	r3, r3
 80030d8:	69ba      	ldr	r2, [r7, #24]
 80030da:	4013      	ands	r3, r2
 80030dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d003      	beq.n	80030f2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80030ea:	69ba      	ldr	r2, [r7, #24]
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80030f2:	4a1a      	ldr	r2, [pc, #104]	; (800315c <HAL_GPIO_Init+0x304>)
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030f8:	4b18      	ldr	r3, [pc, #96]	; (800315c <HAL_GPIO_Init+0x304>)
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	43db      	mvns	r3, r3
 8003102:	69ba      	ldr	r2, [r7, #24]
 8003104:	4013      	ands	r3, r2
 8003106:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d003      	beq.n	800311c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003114:	69ba      	ldr	r2, [r7, #24]
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	4313      	orrs	r3, r2
 800311a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800311c:	4a0f      	ldr	r2, [pc, #60]	; (800315c <HAL_GPIO_Init+0x304>)
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	3301      	adds	r3, #1
 8003126:	61fb      	str	r3, [r7, #28]
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	2b0f      	cmp	r3, #15
 800312c:	f67f aea2 	bls.w	8002e74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003130:	bf00      	nop
 8003132:	bf00      	nop
 8003134:	3724      	adds	r7, #36	; 0x24
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	40023800 	.word	0x40023800
 8003144:	40013800 	.word	0x40013800
 8003148:	40020000 	.word	0x40020000
 800314c:	40020400 	.word	0x40020400
 8003150:	40020800 	.word	0x40020800
 8003154:	40020c00 	.word	0x40020c00
 8003158:	40021000 	.word	0x40021000
 800315c:	40013c00 	.word	0x40013c00

08003160 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003160:	b480      	push	{r7}
 8003162:	b085      	sub	sp, #20
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	460b      	mov	r3, r1
 800316a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	691a      	ldr	r2, [r3, #16]
 8003170:	887b      	ldrh	r3, [r7, #2]
 8003172:	4013      	ands	r3, r2
 8003174:	2b00      	cmp	r3, #0
 8003176:	d002      	beq.n	800317e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003178:	2301      	movs	r3, #1
 800317a:	73fb      	strb	r3, [r7, #15]
 800317c:	e001      	b.n	8003182 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800317e:	2300      	movs	r3, #0
 8003180:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003182:	7bfb      	ldrb	r3, [r7, #15]
}
 8003184:	4618      	mov	r0, r3
 8003186:	3714      	adds	r7, #20
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr

08003190 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d101      	bne.n	80031a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e264      	b.n	800366c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d075      	beq.n	800329a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031ae:	4ba3      	ldr	r3, [pc, #652]	; (800343c <HAL_RCC_OscConfig+0x2ac>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f003 030c 	and.w	r3, r3, #12
 80031b6:	2b04      	cmp	r3, #4
 80031b8:	d00c      	beq.n	80031d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031ba:	4ba0      	ldr	r3, [pc, #640]	; (800343c <HAL_RCC_OscConfig+0x2ac>)
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031c2:	2b08      	cmp	r3, #8
 80031c4:	d112      	bne.n	80031ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031c6:	4b9d      	ldr	r3, [pc, #628]	; (800343c <HAL_RCC_OscConfig+0x2ac>)
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031d2:	d10b      	bne.n	80031ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031d4:	4b99      	ldr	r3, [pc, #612]	; (800343c <HAL_RCC_OscConfig+0x2ac>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d05b      	beq.n	8003298 <HAL_RCC_OscConfig+0x108>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d157      	bne.n	8003298 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e23f      	b.n	800366c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031f4:	d106      	bne.n	8003204 <HAL_RCC_OscConfig+0x74>
 80031f6:	4b91      	ldr	r3, [pc, #580]	; (800343c <HAL_RCC_OscConfig+0x2ac>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a90      	ldr	r2, [pc, #576]	; (800343c <HAL_RCC_OscConfig+0x2ac>)
 80031fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003200:	6013      	str	r3, [r2, #0]
 8003202:	e01d      	b.n	8003240 <HAL_RCC_OscConfig+0xb0>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800320c:	d10c      	bne.n	8003228 <HAL_RCC_OscConfig+0x98>
 800320e:	4b8b      	ldr	r3, [pc, #556]	; (800343c <HAL_RCC_OscConfig+0x2ac>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a8a      	ldr	r2, [pc, #552]	; (800343c <HAL_RCC_OscConfig+0x2ac>)
 8003214:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003218:	6013      	str	r3, [r2, #0]
 800321a:	4b88      	ldr	r3, [pc, #544]	; (800343c <HAL_RCC_OscConfig+0x2ac>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a87      	ldr	r2, [pc, #540]	; (800343c <HAL_RCC_OscConfig+0x2ac>)
 8003220:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003224:	6013      	str	r3, [r2, #0]
 8003226:	e00b      	b.n	8003240 <HAL_RCC_OscConfig+0xb0>
 8003228:	4b84      	ldr	r3, [pc, #528]	; (800343c <HAL_RCC_OscConfig+0x2ac>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a83      	ldr	r2, [pc, #524]	; (800343c <HAL_RCC_OscConfig+0x2ac>)
 800322e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003232:	6013      	str	r3, [r2, #0]
 8003234:	4b81      	ldr	r3, [pc, #516]	; (800343c <HAL_RCC_OscConfig+0x2ac>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a80      	ldr	r2, [pc, #512]	; (800343c <HAL_RCC_OscConfig+0x2ac>)
 800323a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800323e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d013      	beq.n	8003270 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003248:	f7fe fcbc 	bl	8001bc4 <HAL_GetTick>
 800324c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800324e:	e008      	b.n	8003262 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003250:	f7fe fcb8 	bl	8001bc4 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	2b64      	cmp	r3, #100	; 0x64
 800325c:	d901      	bls.n	8003262 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e204      	b.n	800366c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003262:	4b76      	ldr	r3, [pc, #472]	; (800343c <HAL_RCC_OscConfig+0x2ac>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d0f0      	beq.n	8003250 <HAL_RCC_OscConfig+0xc0>
 800326e:	e014      	b.n	800329a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003270:	f7fe fca8 	bl	8001bc4 <HAL_GetTick>
 8003274:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003276:	e008      	b.n	800328a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003278:	f7fe fca4 	bl	8001bc4 <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	2b64      	cmp	r3, #100	; 0x64
 8003284:	d901      	bls.n	800328a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e1f0      	b.n	800366c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800328a:	4b6c      	ldr	r3, [pc, #432]	; (800343c <HAL_RCC_OscConfig+0x2ac>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1f0      	bne.n	8003278 <HAL_RCC_OscConfig+0xe8>
 8003296:	e000      	b.n	800329a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003298:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0302 	and.w	r3, r3, #2
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d063      	beq.n	800336e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032a6:	4b65      	ldr	r3, [pc, #404]	; (800343c <HAL_RCC_OscConfig+0x2ac>)
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f003 030c 	and.w	r3, r3, #12
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d00b      	beq.n	80032ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032b2:	4b62      	ldr	r3, [pc, #392]	; (800343c <HAL_RCC_OscConfig+0x2ac>)
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032ba:	2b08      	cmp	r3, #8
 80032bc:	d11c      	bne.n	80032f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032be:	4b5f      	ldr	r3, [pc, #380]	; (800343c <HAL_RCC_OscConfig+0x2ac>)
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d116      	bne.n	80032f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032ca:	4b5c      	ldr	r3, [pc, #368]	; (800343c <HAL_RCC_OscConfig+0x2ac>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0302 	and.w	r3, r3, #2
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d005      	beq.n	80032e2 <HAL_RCC_OscConfig+0x152>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d001      	beq.n	80032e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e1c4      	b.n	800366c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032e2:	4b56      	ldr	r3, [pc, #344]	; (800343c <HAL_RCC_OscConfig+0x2ac>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	00db      	lsls	r3, r3, #3
 80032f0:	4952      	ldr	r1, [pc, #328]	; (800343c <HAL_RCC_OscConfig+0x2ac>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032f6:	e03a      	b.n	800336e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d020      	beq.n	8003342 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003300:	4b4f      	ldr	r3, [pc, #316]	; (8003440 <HAL_RCC_OscConfig+0x2b0>)
 8003302:	2201      	movs	r2, #1
 8003304:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003306:	f7fe fc5d 	bl	8001bc4 <HAL_GetTick>
 800330a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800330c:	e008      	b.n	8003320 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800330e:	f7fe fc59 	bl	8001bc4 <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	2b02      	cmp	r3, #2
 800331a:	d901      	bls.n	8003320 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e1a5      	b.n	800366c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003320:	4b46      	ldr	r3, [pc, #280]	; (800343c <HAL_RCC_OscConfig+0x2ac>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0302 	and.w	r3, r3, #2
 8003328:	2b00      	cmp	r3, #0
 800332a:	d0f0      	beq.n	800330e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800332c:	4b43      	ldr	r3, [pc, #268]	; (800343c <HAL_RCC_OscConfig+0x2ac>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	691b      	ldr	r3, [r3, #16]
 8003338:	00db      	lsls	r3, r3, #3
 800333a:	4940      	ldr	r1, [pc, #256]	; (800343c <HAL_RCC_OscConfig+0x2ac>)
 800333c:	4313      	orrs	r3, r2
 800333e:	600b      	str	r3, [r1, #0]
 8003340:	e015      	b.n	800336e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003342:	4b3f      	ldr	r3, [pc, #252]	; (8003440 <HAL_RCC_OscConfig+0x2b0>)
 8003344:	2200      	movs	r2, #0
 8003346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003348:	f7fe fc3c 	bl	8001bc4 <HAL_GetTick>
 800334c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800334e:	e008      	b.n	8003362 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003350:	f7fe fc38 	bl	8001bc4 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b02      	cmp	r3, #2
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e184      	b.n	800366c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003362:	4b36      	ldr	r3, [pc, #216]	; (800343c <HAL_RCC_OscConfig+0x2ac>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1f0      	bne.n	8003350 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0308 	and.w	r3, r3, #8
 8003376:	2b00      	cmp	r3, #0
 8003378:	d030      	beq.n	80033dc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	695b      	ldr	r3, [r3, #20]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d016      	beq.n	80033b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003382:	4b30      	ldr	r3, [pc, #192]	; (8003444 <HAL_RCC_OscConfig+0x2b4>)
 8003384:	2201      	movs	r2, #1
 8003386:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003388:	f7fe fc1c 	bl	8001bc4 <HAL_GetTick>
 800338c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800338e:	e008      	b.n	80033a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003390:	f7fe fc18 	bl	8001bc4 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	2b02      	cmp	r3, #2
 800339c:	d901      	bls.n	80033a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e164      	b.n	800366c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033a2:	4b26      	ldr	r3, [pc, #152]	; (800343c <HAL_RCC_OscConfig+0x2ac>)
 80033a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d0f0      	beq.n	8003390 <HAL_RCC_OscConfig+0x200>
 80033ae:	e015      	b.n	80033dc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033b0:	4b24      	ldr	r3, [pc, #144]	; (8003444 <HAL_RCC_OscConfig+0x2b4>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033b6:	f7fe fc05 	bl	8001bc4 <HAL_GetTick>
 80033ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033bc:	e008      	b.n	80033d0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033be:	f7fe fc01 	bl	8001bc4 <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d901      	bls.n	80033d0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	e14d      	b.n	800366c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033d0:	4b1a      	ldr	r3, [pc, #104]	; (800343c <HAL_RCC_OscConfig+0x2ac>)
 80033d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033d4:	f003 0302 	and.w	r3, r3, #2
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d1f0      	bne.n	80033be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0304 	and.w	r3, r3, #4
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	f000 80a0 	beq.w	800352a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033ea:	2300      	movs	r3, #0
 80033ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033ee:	4b13      	ldr	r3, [pc, #76]	; (800343c <HAL_RCC_OscConfig+0x2ac>)
 80033f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d10f      	bne.n	800341a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033fa:	2300      	movs	r3, #0
 80033fc:	60bb      	str	r3, [r7, #8]
 80033fe:	4b0f      	ldr	r3, [pc, #60]	; (800343c <HAL_RCC_OscConfig+0x2ac>)
 8003400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003402:	4a0e      	ldr	r2, [pc, #56]	; (800343c <HAL_RCC_OscConfig+0x2ac>)
 8003404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003408:	6413      	str	r3, [r2, #64]	; 0x40
 800340a:	4b0c      	ldr	r3, [pc, #48]	; (800343c <HAL_RCC_OscConfig+0x2ac>)
 800340c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003412:	60bb      	str	r3, [r7, #8]
 8003414:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003416:	2301      	movs	r3, #1
 8003418:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800341a:	4b0b      	ldr	r3, [pc, #44]	; (8003448 <HAL_RCC_OscConfig+0x2b8>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003422:	2b00      	cmp	r3, #0
 8003424:	d121      	bne.n	800346a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003426:	4b08      	ldr	r3, [pc, #32]	; (8003448 <HAL_RCC_OscConfig+0x2b8>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a07      	ldr	r2, [pc, #28]	; (8003448 <HAL_RCC_OscConfig+0x2b8>)
 800342c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003430:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003432:	f7fe fbc7 	bl	8001bc4 <HAL_GetTick>
 8003436:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003438:	e011      	b.n	800345e <HAL_RCC_OscConfig+0x2ce>
 800343a:	bf00      	nop
 800343c:	40023800 	.word	0x40023800
 8003440:	42470000 	.word	0x42470000
 8003444:	42470e80 	.word	0x42470e80
 8003448:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800344c:	f7fe fbba 	bl	8001bc4 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b02      	cmp	r3, #2
 8003458:	d901      	bls.n	800345e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e106      	b.n	800366c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800345e:	4b85      	ldr	r3, [pc, #532]	; (8003674 <HAL_RCC_OscConfig+0x4e4>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003466:	2b00      	cmp	r3, #0
 8003468:	d0f0      	beq.n	800344c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d106      	bne.n	8003480 <HAL_RCC_OscConfig+0x2f0>
 8003472:	4b81      	ldr	r3, [pc, #516]	; (8003678 <HAL_RCC_OscConfig+0x4e8>)
 8003474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003476:	4a80      	ldr	r2, [pc, #512]	; (8003678 <HAL_RCC_OscConfig+0x4e8>)
 8003478:	f043 0301 	orr.w	r3, r3, #1
 800347c:	6713      	str	r3, [r2, #112]	; 0x70
 800347e:	e01c      	b.n	80034ba <HAL_RCC_OscConfig+0x32a>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	2b05      	cmp	r3, #5
 8003486:	d10c      	bne.n	80034a2 <HAL_RCC_OscConfig+0x312>
 8003488:	4b7b      	ldr	r3, [pc, #492]	; (8003678 <HAL_RCC_OscConfig+0x4e8>)
 800348a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800348c:	4a7a      	ldr	r2, [pc, #488]	; (8003678 <HAL_RCC_OscConfig+0x4e8>)
 800348e:	f043 0304 	orr.w	r3, r3, #4
 8003492:	6713      	str	r3, [r2, #112]	; 0x70
 8003494:	4b78      	ldr	r3, [pc, #480]	; (8003678 <HAL_RCC_OscConfig+0x4e8>)
 8003496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003498:	4a77      	ldr	r2, [pc, #476]	; (8003678 <HAL_RCC_OscConfig+0x4e8>)
 800349a:	f043 0301 	orr.w	r3, r3, #1
 800349e:	6713      	str	r3, [r2, #112]	; 0x70
 80034a0:	e00b      	b.n	80034ba <HAL_RCC_OscConfig+0x32a>
 80034a2:	4b75      	ldr	r3, [pc, #468]	; (8003678 <HAL_RCC_OscConfig+0x4e8>)
 80034a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a6:	4a74      	ldr	r2, [pc, #464]	; (8003678 <HAL_RCC_OscConfig+0x4e8>)
 80034a8:	f023 0301 	bic.w	r3, r3, #1
 80034ac:	6713      	str	r3, [r2, #112]	; 0x70
 80034ae:	4b72      	ldr	r3, [pc, #456]	; (8003678 <HAL_RCC_OscConfig+0x4e8>)
 80034b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b2:	4a71      	ldr	r2, [pc, #452]	; (8003678 <HAL_RCC_OscConfig+0x4e8>)
 80034b4:	f023 0304 	bic.w	r3, r3, #4
 80034b8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d015      	beq.n	80034ee <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034c2:	f7fe fb7f 	bl	8001bc4 <HAL_GetTick>
 80034c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034c8:	e00a      	b.n	80034e0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034ca:	f7fe fb7b 	bl	8001bc4 <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034d8:	4293      	cmp	r3, r2
 80034da:	d901      	bls.n	80034e0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e0c5      	b.n	800366c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034e0:	4b65      	ldr	r3, [pc, #404]	; (8003678 <HAL_RCC_OscConfig+0x4e8>)
 80034e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e4:	f003 0302 	and.w	r3, r3, #2
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d0ee      	beq.n	80034ca <HAL_RCC_OscConfig+0x33a>
 80034ec:	e014      	b.n	8003518 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034ee:	f7fe fb69 	bl	8001bc4 <HAL_GetTick>
 80034f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034f4:	e00a      	b.n	800350c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034f6:	f7fe fb65 	bl	8001bc4 <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	f241 3288 	movw	r2, #5000	; 0x1388
 8003504:	4293      	cmp	r3, r2
 8003506:	d901      	bls.n	800350c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e0af      	b.n	800366c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800350c:	4b5a      	ldr	r3, [pc, #360]	; (8003678 <HAL_RCC_OscConfig+0x4e8>)
 800350e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003510:	f003 0302 	and.w	r3, r3, #2
 8003514:	2b00      	cmp	r3, #0
 8003516:	d1ee      	bne.n	80034f6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003518:	7dfb      	ldrb	r3, [r7, #23]
 800351a:	2b01      	cmp	r3, #1
 800351c:	d105      	bne.n	800352a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800351e:	4b56      	ldr	r3, [pc, #344]	; (8003678 <HAL_RCC_OscConfig+0x4e8>)
 8003520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003522:	4a55      	ldr	r2, [pc, #340]	; (8003678 <HAL_RCC_OscConfig+0x4e8>)
 8003524:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003528:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	699b      	ldr	r3, [r3, #24]
 800352e:	2b00      	cmp	r3, #0
 8003530:	f000 809b 	beq.w	800366a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003534:	4b50      	ldr	r3, [pc, #320]	; (8003678 <HAL_RCC_OscConfig+0x4e8>)
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f003 030c 	and.w	r3, r3, #12
 800353c:	2b08      	cmp	r3, #8
 800353e:	d05c      	beq.n	80035fa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	2b02      	cmp	r3, #2
 8003546:	d141      	bne.n	80035cc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003548:	4b4c      	ldr	r3, [pc, #304]	; (800367c <HAL_RCC_OscConfig+0x4ec>)
 800354a:	2200      	movs	r2, #0
 800354c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800354e:	f7fe fb39 	bl	8001bc4 <HAL_GetTick>
 8003552:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003554:	e008      	b.n	8003568 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003556:	f7fe fb35 	bl	8001bc4 <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	2b02      	cmp	r3, #2
 8003562:	d901      	bls.n	8003568 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e081      	b.n	800366c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003568:	4b43      	ldr	r3, [pc, #268]	; (8003678 <HAL_RCC_OscConfig+0x4e8>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d1f0      	bne.n	8003556 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	69da      	ldr	r2, [r3, #28]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a1b      	ldr	r3, [r3, #32]
 800357c:	431a      	orrs	r2, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003582:	019b      	lsls	r3, r3, #6
 8003584:	431a      	orrs	r2, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800358a:	085b      	lsrs	r3, r3, #1
 800358c:	3b01      	subs	r3, #1
 800358e:	041b      	lsls	r3, r3, #16
 8003590:	431a      	orrs	r2, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003596:	061b      	lsls	r3, r3, #24
 8003598:	4937      	ldr	r1, [pc, #220]	; (8003678 <HAL_RCC_OscConfig+0x4e8>)
 800359a:	4313      	orrs	r3, r2
 800359c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800359e:	4b37      	ldr	r3, [pc, #220]	; (800367c <HAL_RCC_OscConfig+0x4ec>)
 80035a0:	2201      	movs	r2, #1
 80035a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a4:	f7fe fb0e 	bl	8001bc4 <HAL_GetTick>
 80035a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035aa:	e008      	b.n	80035be <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035ac:	f7fe fb0a 	bl	8001bc4 <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d901      	bls.n	80035be <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e056      	b.n	800366c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035be:	4b2e      	ldr	r3, [pc, #184]	; (8003678 <HAL_RCC_OscConfig+0x4e8>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d0f0      	beq.n	80035ac <HAL_RCC_OscConfig+0x41c>
 80035ca:	e04e      	b.n	800366a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035cc:	4b2b      	ldr	r3, [pc, #172]	; (800367c <HAL_RCC_OscConfig+0x4ec>)
 80035ce:	2200      	movs	r2, #0
 80035d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d2:	f7fe faf7 	bl	8001bc4 <HAL_GetTick>
 80035d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035d8:	e008      	b.n	80035ec <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035da:	f7fe faf3 	bl	8001bc4 <HAL_GetTick>
 80035de:	4602      	mov	r2, r0
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d901      	bls.n	80035ec <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	e03f      	b.n	800366c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ec:	4b22      	ldr	r3, [pc, #136]	; (8003678 <HAL_RCC_OscConfig+0x4e8>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d1f0      	bne.n	80035da <HAL_RCC_OscConfig+0x44a>
 80035f8:	e037      	b.n	800366a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	699b      	ldr	r3, [r3, #24]
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d101      	bne.n	8003606 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e032      	b.n	800366c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003606:	4b1c      	ldr	r3, [pc, #112]	; (8003678 <HAL_RCC_OscConfig+0x4e8>)
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	2b01      	cmp	r3, #1
 8003612:	d028      	beq.n	8003666 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800361e:	429a      	cmp	r2, r3
 8003620:	d121      	bne.n	8003666 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800362c:	429a      	cmp	r2, r3
 800362e:	d11a      	bne.n	8003666 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003630:	68fa      	ldr	r2, [r7, #12]
 8003632:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003636:	4013      	ands	r3, r2
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800363c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800363e:	4293      	cmp	r3, r2
 8003640:	d111      	bne.n	8003666 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364c:	085b      	lsrs	r3, r3, #1
 800364e:	3b01      	subs	r3, #1
 8003650:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003652:	429a      	cmp	r2, r3
 8003654:	d107      	bne.n	8003666 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003660:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003662:	429a      	cmp	r2, r3
 8003664:	d001      	beq.n	800366a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e000      	b.n	800366c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800366a:	2300      	movs	r3, #0
}
 800366c:	4618      	mov	r0, r3
 800366e:	3718      	adds	r7, #24
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}
 8003674:	40007000 	.word	0x40007000
 8003678:	40023800 	.word	0x40023800
 800367c:	42470060 	.word	0x42470060

08003680 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d101      	bne.n	8003694 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e0cc      	b.n	800382e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003694:	4b68      	ldr	r3, [pc, #416]	; (8003838 <HAL_RCC_ClockConfig+0x1b8>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0307 	and.w	r3, r3, #7
 800369c:	683a      	ldr	r2, [r7, #0]
 800369e:	429a      	cmp	r2, r3
 80036a0:	d90c      	bls.n	80036bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036a2:	4b65      	ldr	r3, [pc, #404]	; (8003838 <HAL_RCC_ClockConfig+0x1b8>)
 80036a4:	683a      	ldr	r2, [r7, #0]
 80036a6:	b2d2      	uxtb	r2, r2
 80036a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036aa:	4b63      	ldr	r3, [pc, #396]	; (8003838 <HAL_RCC_ClockConfig+0x1b8>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0307 	and.w	r3, r3, #7
 80036b2:	683a      	ldr	r2, [r7, #0]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d001      	beq.n	80036bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e0b8      	b.n	800382e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0302 	and.w	r3, r3, #2
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d020      	beq.n	800370a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0304 	and.w	r3, r3, #4
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d005      	beq.n	80036e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036d4:	4b59      	ldr	r3, [pc, #356]	; (800383c <HAL_RCC_ClockConfig+0x1bc>)
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	4a58      	ldr	r2, [pc, #352]	; (800383c <HAL_RCC_ClockConfig+0x1bc>)
 80036da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80036de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0308 	and.w	r3, r3, #8
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d005      	beq.n	80036f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036ec:	4b53      	ldr	r3, [pc, #332]	; (800383c <HAL_RCC_ClockConfig+0x1bc>)
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	4a52      	ldr	r2, [pc, #328]	; (800383c <HAL_RCC_ClockConfig+0x1bc>)
 80036f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80036f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036f8:	4b50      	ldr	r3, [pc, #320]	; (800383c <HAL_RCC_ClockConfig+0x1bc>)
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	494d      	ldr	r1, [pc, #308]	; (800383c <HAL_RCC_ClockConfig+0x1bc>)
 8003706:	4313      	orrs	r3, r2
 8003708:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0301 	and.w	r3, r3, #1
 8003712:	2b00      	cmp	r3, #0
 8003714:	d044      	beq.n	80037a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d107      	bne.n	800372e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800371e:	4b47      	ldr	r3, [pc, #284]	; (800383c <HAL_RCC_ClockConfig+0x1bc>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d119      	bne.n	800375e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e07f      	b.n	800382e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	2b02      	cmp	r3, #2
 8003734:	d003      	beq.n	800373e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800373a:	2b03      	cmp	r3, #3
 800373c:	d107      	bne.n	800374e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800373e:	4b3f      	ldr	r3, [pc, #252]	; (800383c <HAL_RCC_ClockConfig+0x1bc>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d109      	bne.n	800375e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e06f      	b.n	800382e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800374e:	4b3b      	ldr	r3, [pc, #236]	; (800383c <HAL_RCC_ClockConfig+0x1bc>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0302 	and.w	r3, r3, #2
 8003756:	2b00      	cmp	r3, #0
 8003758:	d101      	bne.n	800375e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e067      	b.n	800382e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800375e:	4b37      	ldr	r3, [pc, #220]	; (800383c <HAL_RCC_ClockConfig+0x1bc>)
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f023 0203 	bic.w	r2, r3, #3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	4934      	ldr	r1, [pc, #208]	; (800383c <HAL_RCC_ClockConfig+0x1bc>)
 800376c:	4313      	orrs	r3, r2
 800376e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003770:	f7fe fa28 	bl	8001bc4 <HAL_GetTick>
 8003774:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003776:	e00a      	b.n	800378e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003778:	f7fe fa24 	bl	8001bc4 <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	f241 3288 	movw	r2, #5000	; 0x1388
 8003786:	4293      	cmp	r3, r2
 8003788:	d901      	bls.n	800378e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e04f      	b.n	800382e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800378e:	4b2b      	ldr	r3, [pc, #172]	; (800383c <HAL_RCC_ClockConfig+0x1bc>)
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	f003 020c 	and.w	r2, r3, #12
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	429a      	cmp	r2, r3
 800379e:	d1eb      	bne.n	8003778 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037a0:	4b25      	ldr	r3, [pc, #148]	; (8003838 <HAL_RCC_ClockConfig+0x1b8>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0307 	and.w	r3, r3, #7
 80037a8:	683a      	ldr	r2, [r7, #0]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d20c      	bcs.n	80037c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ae:	4b22      	ldr	r3, [pc, #136]	; (8003838 <HAL_RCC_ClockConfig+0x1b8>)
 80037b0:	683a      	ldr	r2, [r7, #0]
 80037b2:	b2d2      	uxtb	r2, r2
 80037b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037b6:	4b20      	ldr	r3, [pc, #128]	; (8003838 <HAL_RCC_ClockConfig+0x1b8>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0307 	and.w	r3, r3, #7
 80037be:	683a      	ldr	r2, [r7, #0]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d001      	beq.n	80037c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e032      	b.n	800382e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0304 	and.w	r3, r3, #4
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d008      	beq.n	80037e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037d4:	4b19      	ldr	r3, [pc, #100]	; (800383c <HAL_RCC_ClockConfig+0x1bc>)
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	4916      	ldr	r1, [pc, #88]	; (800383c <HAL_RCC_ClockConfig+0x1bc>)
 80037e2:	4313      	orrs	r3, r2
 80037e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0308 	and.w	r3, r3, #8
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d009      	beq.n	8003806 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037f2:	4b12      	ldr	r3, [pc, #72]	; (800383c <HAL_RCC_ClockConfig+0x1bc>)
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	691b      	ldr	r3, [r3, #16]
 80037fe:	00db      	lsls	r3, r3, #3
 8003800:	490e      	ldr	r1, [pc, #56]	; (800383c <HAL_RCC_ClockConfig+0x1bc>)
 8003802:	4313      	orrs	r3, r2
 8003804:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003806:	f000 f821 	bl	800384c <HAL_RCC_GetSysClockFreq>
 800380a:	4602      	mov	r2, r0
 800380c:	4b0b      	ldr	r3, [pc, #44]	; (800383c <HAL_RCC_ClockConfig+0x1bc>)
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	091b      	lsrs	r3, r3, #4
 8003812:	f003 030f 	and.w	r3, r3, #15
 8003816:	490a      	ldr	r1, [pc, #40]	; (8003840 <HAL_RCC_ClockConfig+0x1c0>)
 8003818:	5ccb      	ldrb	r3, [r1, r3]
 800381a:	fa22 f303 	lsr.w	r3, r2, r3
 800381e:	4a09      	ldr	r2, [pc, #36]	; (8003844 <HAL_RCC_ClockConfig+0x1c4>)
 8003820:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003822:	4b09      	ldr	r3, [pc, #36]	; (8003848 <HAL_RCC_ClockConfig+0x1c8>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4618      	mov	r0, r3
 8003828:	f7fe f988 	bl	8001b3c <HAL_InitTick>

  return HAL_OK;
 800382c:	2300      	movs	r3, #0
}
 800382e:	4618      	mov	r0, r3
 8003830:	3710      	adds	r7, #16
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	40023c00 	.word	0x40023c00
 800383c:	40023800 	.word	0x40023800
 8003840:	08006b54 	.word	0x08006b54
 8003844:	20000000 	.word	0x20000000
 8003848:	20000004 	.word	0x20000004

0800384c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800384c:	b5b0      	push	{r4, r5, r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003852:	2100      	movs	r1, #0
 8003854:	6079      	str	r1, [r7, #4]
 8003856:	2100      	movs	r1, #0
 8003858:	60f9      	str	r1, [r7, #12]
 800385a:	2100      	movs	r1, #0
 800385c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800385e:	2100      	movs	r1, #0
 8003860:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003862:	4952      	ldr	r1, [pc, #328]	; (80039ac <HAL_RCC_GetSysClockFreq+0x160>)
 8003864:	6889      	ldr	r1, [r1, #8]
 8003866:	f001 010c 	and.w	r1, r1, #12
 800386a:	2908      	cmp	r1, #8
 800386c:	d00d      	beq.n	800388a <HAL_RCC_GetSysClockFreq+0x3e>
 800386e:	2908      	cmp	r1, #8
 8003870:	f200 8094 	bhi.w	800399c <HAL_RCC_GetSysClockFreq+0x150>
 8003874:	2900      	cmp	r1, #0
 8003876:	d002      	beq.n	800387e <HAL_RCC_GetSysClockFreq+0x32>
 8003878:	2904      	cmp	r1, #4
 800387a:	d003      	beq.n	8003884 <HAL_RCC_GetSysClockFreq+0x38>
 800387c:	e08e      	b.n	800399c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800387e:	4b4c      	ldr	r3, [pc, #304]	; (80039b0 <HAL_RCC_GetSysClockFreq+0x164>)
 8003880:	60bb      	str	r3, [r7, #8]
       break;
 8003882:	e08e      	b.n	80039a2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003884:	4b4b      	ldr	r3, [pc, #300]	; (80039b4 <HAL_RCC_GetSysClockFreq+0x168>)
 8003886:	60bb      	str	r3, [r7, #8]
      break;
 8003888:	e08b      	b.n	80039a2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800388a:	4948      	ldr	r1, [pc, #288]	; (80039ac <HAL_RCC_GetSysClockFreq+0x160>)
 800388c:	6849      	ldr	r1, [r1, #4]
 800388e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003892:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003894:	4945      	ldr	r1, [pc, #276]	; (80039ac <HAL_RCC_GetSysClockFreq+0x160>)
 8003896:	6849      	ldr	r1, [r1, #4]
 8003898:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800389c:	2900      	cmp	r1, #0
 800389e:	d024      	beq.n	80038ea <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038a0:	4942      	ldr	r1, [pc, #264]	; (80039ac <HAL_RCC_GetSysClockFreq+0x160>)
 80038a2:	6849      	ldr	r1, [r1, #4]
 80038a4:	0989      	lsrs	r1, r1, #6
 80038a6:	4608      	mov	r0, r1
 80038a8:	f04f 0100 	mov.w	r1, #0
 80038ac:	f240 14ff 	movw	r4, #511	; 0x1ff
 80038b0:	f04f 0500 	mov.w	r5, #0
 80038b4:	ea00 0204 	and.w	r2, r0, r4
 80038b8:	ea01 0305 	and.w	r3, r1, r5
 80038bc:	493d      	ldr	r1, [pc, #244]	; (80039b4 <HAL_RCC_GetSysClockFreq+0x168>)
 80038be:	fb01 f003 	mul.w	r0, r1, r3
 80038c2:	2100      	movs	r1, #0
 80038c4:	fb01 f102 	mul.w	r1, r1, r2
 80038c8:	1844      	adds	r4, r0, r1
 80038ca:	493a      	ldr	r1, [pc, #232]	; (80039b4 <HAL_RCC_GetSysClockFreq+0x168>)
 80038cc:	fba2 0101 	umull	r0, r1, r2, r1
 80038d0:	1863      	adds	r3, r4, r1
 80038d2:	4619      	mov	r1, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	461a      	mov	r2, r3
 80038d8:	f04f 0300 	mov.w	r3, #0
 80038dc:	f7fd f94e 	bl	8000b7c <__aeabi_uldivmod>
 80038e0:	4602      	mov	r2, r0
 80038e2:	460b      	mov	r3, r1
 80038e4:	4613      	mov	r3, r2
 80038e6:	60fb      	str	r3, [r7, #12]
 80038e8:	e04a      	b.n	8003980 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038ea:	4b30      	ldr	r3, [pc, #192]	; (80039ac <HAL_RCC_GetSysClockFreq+0x160>)
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	099b      	lsrs	r3, r3, #6
 80038f0:	461a      	mov	r2, r3
 80038f2:	f04f 0300 	mov.w	r3, #0
 80038f6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80038fa:	f04f 0100 	mov.w	r1, #0
 80038fe:	ea02 0400 	and.w	r4, r2, r0
 8003902:	ea03 0501 	and.w	r5, r3, r1
 8003906:	4620      	mov	r0, r4
 8003908:	4629      	mov	r1, r5
 800390a:	f04f 0200 	mov.w	r2, #0
 800390e:	f04f 0300 	mov.w	r3, #0
 8003912:	014b      	lsls	r3, r1, #5
 8003914:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003918:	0142      	lsls	r2, r0, #5
 800391a:	4610      	mov	r0, r2
 800391c:	4619      	mov	r1, r3
 800391e:	1b00      	subs	r0, r0, r4
 8003920:	eb61 0105 	sbc.w	r1, r1, r5
 8003924:	f04f 0200 	mov.w	r2, #0
 8003928:	f04f 0300 	mov.w	r3, #0
 800392c:	018b      	lsls	r3, r1, #6
 800392e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003932:	0182      	lsls	r2, r0, #6
 8003934:	1a12      	subs	r2, r2, r0
 8003936:	eb63 0301 	sbc.w	r3, r3, r1
 800393a:	f04f 0000 	mov.w	r0, #0
 800393e:	f04f 0100 	mov.w	r1, #0
 8003942:	00d9      	lsls	r1, r3, #3
 8003944:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003948:	00d0      	lsls	r0, r2, #3
 800394a:	4602      	mov	r2, r0
 800394c:	460b      	mov	r3, r1
 800394e:	1912      	adds	r2, r2, r4
 8003950:	eb45 0303 	adc.w	r3, r5, r3
 8003954:	f04f 0000 	mov.w	r0, #0
 8003958:	f04f 0100 	mov.w	r1, #0
 800395c:	0299      	lsls	r1, r3, #10
 800395e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003962:	0290      	lsls	r0, r2, #10
 8003964:	4602      	mov	r2, r0
 8003966:	460b      	mov	r3, r1
 8003968:	4610      	mov	r0, r2
 800396a:	4619      	mov	r1, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	461a      	mov	r2, r3
 8003970:	f04f 0300 	mov.w	r3, #0
 8003974:	f7fd f902 	bl	8000b7c <__aeabi_uldivmod>
 8003978:	4602      	mov	r2, r0
 800397a:	460b      	mov	r3, r1
 800397c:	4613      	mov	r3, r2
 800397e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003980:	4b0a      	ldr	r3, [pc, #40]	; (80039ac <HAL_RCC_GetSysClockFreq+0x160>)
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	0c1b      	lsrs	r3, r3, #16
 8003986:	f003 0303 	and.w	r3, r3, #3
 800398a:	3301      	adds	r3, #1
 800398c:	005b      	lsls	r3, r3, #1
 800398e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003990:	68fa      	ldr	r2, [r7, #12]
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	fbb2 f3f3 	udiv	r3, r2, r3
 8003998:	60bb      	str	r3, [r7, #8]
      break;
 800399a:	e002      	b.n	80039a2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800399c:	4b04      	ldr	r3, [pc, #16]	; (80039b0 <HAL_RCC_GetSysClockFreq+0x164>)
 800399e:	60bb      	str	r3, [r7, #8]
      break;
 80039a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039a2:	68bb      	ldr	r3, [r7, #8]
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3710      	adds	r7, #16
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bdb0      	pop	{r4, r5, r7, pc}
 80039ac:	40023800 	.word	0x40023800
 80039b0:	00f42400 	.word	0x00f42400
 80039b4:	017d7840 	.word	0x017d7840

080039b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039b8:	b480      	push	{r7}
 80039ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039bc:	4b03      	ldr	r3, [pc, #12]	; (80039cc <HAL_RCC_GetHCLKFreq+0x14>)
 80039be:	681b      	ldr	r3, [r3, #0]
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop
 80039cc:	20000000 	.word	0x20000000

080039d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80039d4:	f7ff fff0 	bl	80039b8 <HAL_RCC_GetHCLKFreq>
 80039d8:	4602      	mov	r2, r0
 80039da:	4b05      	ldr	r3, [pc, #20]	; (80039f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	0a9b      	lsrs	r3, r3, #10
 80039e0:	f003 0307 	and.w	r3, r3, #7
 80039e4:	4903      	ldr	r1, [pc, #12]	; (80039f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039e6:	5ccb      	ldrb	r3, [r1, r3]
 80039e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	40023800 	.word	0x40023800
 80039f4:	08006b64 	.word	0x08006b64

080039f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80039fc:	f7ff ffdc 	bl	80039b8 <HAL_RCC_GetHCLKFreq>
 8003a00:	4602      	mov	r2, r0
 8003a02:	4b05      	ldr	r3, [pc, #20]	; (8003a18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	0b5b      	lsrs	r3, r3, #13
 8003a08:	f003 0307 	and.w	r3, r3, #7
 8003a0c:	4903      	ldr	r1, [pc, #12]	; (8003a1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a0e:	5ccb      	ldrb	r3, [r1, r3]
 8003a10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	40023800 	.word	0x40023800
 8003a1c:	08006b64 	.word	0x08006b64

08003a20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d101      	bne.n	8003a32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e03f      	b.n	8003ab2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d106      	bne.n	8003a4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f7fd ffb0 	bl	80019ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2224      	movs	r2, #36	; 0x24
 8003a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68da      	ldr	r2, [r3, #12]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f000 f929 	bl	8003cbc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	691a      	ldr	r2, [r3, #16]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	695a      	ldr	r2, [r3, #20]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	68da      	ldr	r2, [r3, #12]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2220      	movs	r2, #32
 8003aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2220      	movs	r2, #32
 8003aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3708      	adds	r7, #8
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003aba:	b580      	push	{r7, lr}
 8003abc:	b08a      	sub	sp, #40	; 0x28
 8003abe:	af02      	add	r7, sp, #8
 8003ac0:	60f8      	str	r0, [r7, #12]
 8003ac2:	60b9      	str	r1, [r7, #8]
 8003ac4:	603b      	str	r3, [r7, #0]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003aca:	2300      	movs	r3, #0
 8003acc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	2b20      	cmp	r3, #32
 8003ad8:	d17c      	bne.n	8003bd4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d002      	beq.n	8003ae6 <HAL_UART_Transmit+0x2c>
 8003ae0:	88fb      	ldrh	r3, [r7, #6]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d101      	bne.n	8003aea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e075      	b.n	8003bd6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d101      	bne.n	8003af8 <HAL_UART_Transmit+0x3e>
 8003af4:	2302      	movs	r3, #2
 8003af6:	e06e      	b.n	8003bd6 <HAL_UART_Transmit+0x11c>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2200      	movs	r2, #0
 8003b04:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2221      	movs	r2, #33	; 0x21
 8003b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b0e:	f7fe f859 	bl	8001bc4 <HAL_GetTick>
 8003b12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	88fa      	ldrh	r2, [r7, #6]
 8003b18:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	88fa      	ldrh	r2, [r7, #6]
 8003b1e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b28:	d108      	bne.n	8003b3c <HAL_UART_Transmit+0x82>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d104      	bne.n	8003b3c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003b32:	2300      	movs	r3, #0
 8003b34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	61bb      	str	r3, [r7, #24]
 8003b3a:	e003      	b.n	8003b44 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b40:	2300      	movs	r3, #0
 8003b42:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003b4c:	e02a      	b.n	8003ba4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	9300      	str	r3, [sp, #0]
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	2200      	movs	r2, #0
 8003b56:	2180      	movs	r1, #128	; 0x80
 8003b58:	68f8      	ldr	r0, [r7, #12]
 8003b5a:	f000 f840 	bl	8003bde <UART_WaitOnFlagUntilTimeout>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d001      	beq.n	8003b68 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e036      	b.n	8003bd6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d10b      	bne.n	8003b86 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	881b      	ldrh	r3, [r3, #0]
 8003b72:	461a      	mov	r2, r3
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b7c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	3302      	adds	r3, #2
 8003b82:	61bb      	str	r3, [r7, #24]
 8003b84:	e007      	b.n	8003b96 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	781a      	ldrb	r2, [r3, #0]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	3301      	adds	r3, #1
 8003b94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	3b01      	subs	r3, #1
 8003b9e:	b29a      	uxth	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d1cf      	bne.n	8003b4e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	9300      	str	r3, [sp, #0]
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	2140      	movs	r1, #64	; 0x40
 8003bb8:	68f8      	ldr	r0, [r7, #12]
 8003bba:	f000 f810 	bl	8003bde <UART_WaitOnFlagUntilTimeout>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d001      	beq.n	8003bc8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e006      	b.n	8003bd6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2220      	movs	r2, #32
 8003bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	e000      	b.n	8003bd6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003bd4:	2302      	movs	r3, #2
  }
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3720      	adds	r7, #32
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}

08003bde <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003bde:	b580      	push	{r7, lr}
 8003be0:	b090      	sub	sp, #64	; 0x40
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	60f8      	str	r0, [r7, #12]
 8003be6:	60b9      	str	r1, [r7, #8]
 8003be8:	603b      	str	r3, [r7, #0]
 8003bea:	4613      	mov	r3, r2
 8003bec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bee:	e050      	b.n	8003c92 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bf6:	d04c      	beq.n	8003c92 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003bf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d007      	beq.n	8003c0e <UART_WaitOnFlagUntilTimeout+0x30>
 8003bfe:	f7fd ffe1 	bl	8001bc4 <HAL_GetTick>
 8003c02:	4602      	mov	r2, r0
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d241      	bcs.n	8003c92 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	330c      	adds	r3, #12
 8003c14:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c18:	e853 3f00 	ldrex	r3, [r3]
 8003c1c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c20:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	330c      	adds	r3, #12
 8003c2c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c2e:	637a      	str	r2, [r7, #52]	; 0x34
 8003c30:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c32:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c36:	e841 2300 	strex	r3, r2, [r1]
 8003c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d1e5      	bne.n	8003c0e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	3314      	adds	r3, #20
 8003c48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	e853 3f00 	ldrex	r3, [r3]
 8003c50:	613b      	str	r3, [r7, #16]
   return(result);
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	f023 0301 	bic.w	r3, r3, #1
 8003c58:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	3314      	adds	r3, #20
 8003c60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c62:	623a      	str	r2, [r7, #32]
 8003c64:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c66:	69f9      	ldr	r1, [r7, #28]
 8003c68:	6a3a      	ldr	r2, [r7, #32]
 8003c6a:	e841 2300 	strex	r3, r2, [r1]
 8003c6e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1e5      	bne.n	8003c42 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2220      	movs	r2, #32
 8003c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2220      	movs	r2, #32
 8003c82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e00f      	b.n	8003cb2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	68ba      	ldr	r2, [r7, #8]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	bf0c      	ite	eq
 8003ca2:	2301      	moveq	r3, #1
 8003ca4:	2300      	movne	r3, #0
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	461a      	mov	r2, r3
 8003caa:	79fb      	ldrb	r3, [r7, #7]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d09f      	beq.n	8003bf0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3740      	adds	r7, #64	; 0x40
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
	...

08003cbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cc0:	b09f      	sub	sp, #124	; 0x7c
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	691b      	ldr	r3, [r3, #16]
 8003ccc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003cd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cd2:	68d9      	ldr	r1, [r3, #12]
 8003cd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	ea40 0301 	orr.w	r3, r0, r1
 8003cdc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003cde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ce0:	689a      	ldr	r2, [r3, #8]
 8003ce2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	431a      	orrs	r2, r3
 8003ce8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cea:	695b      	ldr	r3, [r3, #20]
 8003cec:	431a      	orrs	r2, r3
 8003cee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cf0:	69db      	ldr	r3, [r3, #28]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003cf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003d00:	f021 010c 	bic.w	r1, r1, #12
 8003d04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d0a:	430b      	orrs	r3, r1
 8003d0c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	695b      	ldr	r3, [r3, #20]
 8003d14:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003d18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d1a:	6999      	ldr	r1, [r3, #24]
 8003d1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	ea40 0301 	orr.w	r3, r0, r1
 8003d24:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	4bc5      	ldr	r3, [pc, #788]	; (8004040 <UART_SetConfig+0x384>)
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d004      	beq.n	8003d3a <UART_SetConfig+0x7e>
 8003d30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	4bc3      	ldr	r3, [pc, #780]	; (8004044 <UART_SetConfig+0x388>)
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d103      	bne.n	8003d42 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d3a:	f7ff fe5d 	bl	80039f8 <HAL_RCC_GetPCLK2Freq>
 8003d3e:	6778      	str	r0, [r7, #116]	; 0x74
 8003d40:	e002      	b.n	8003d48 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d42:	f7ff fe45 	bl	80039d0 <HAL_RCC_GetPCLK1Freq>
 8003d46:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d4a:	69db      	ldr	r3, [r3, #28]
 8003d4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d50:	f040 80b6 	bne.w	8003ec0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d56:	461c      	mov	r4, r3
 8003d58:	f04f 0500 	mov.w	r5, #0
 8003d5c:	4622      	mov	r2, r4
 8003d5e:	462b      	mov	r3, r5
 8003d60:	1891      	adds	r1, r2, r2
 8003d62:	6439      	str	r1, [r7, #64]	; 0x40
 8003d64:	415b      	adcs	r3, r3
 8003d66:	647b      	str	r3, [r7, #68]	; 0x44
 8003d68:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003d6c:	1912      	adds	r2, r2, r4
 8003d6e:	eb45 0303 	adc.w	r3, r5, r3
 8003d72:	f04f 0000 	mov.w	r0, #0
 8003d76:	f04f 0100 	mov.w	r1, #0
 8003d7a:	00d9      	lsls	r1, r3, #3
 8003d7c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d80:	00d0      	lsls	r0, r2, #3
 8003d82:	4602      	mov	r2, r0
 8003d84:	460b      	mov	r3, r1
 8003d86:	1911      	adds	r1, r2, r4
 8003d88:	6639      	str	r1, [r7, #96]	; 0x60
 8003d8a:	416b      	adcs	r3, r5
 8003d8c:	667b      	str	r3, [r7, #100]	; 0x64
 8003d8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	461a      	mov	r2, r3
 8003d94:	f04f 0300 	mov.w	r3, #0
 8003d98:	1891      	adds	r1, r2, r2
 8003d9a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003d9c:	415b      	adcs	r3, r3
 8003d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003da0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003da4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003da8:	f7fc fee8 	bl	8000b7c <__aeabi_uldivmod>
 8003dac:	4602      	mov	r2, r0
 8003dae:	460b      	mov	r3, r1
 8003db0:	4ba5      	ldr	r3, [pc, #660]	; (8004048 <UART_SetConfig+0x38c>)
 8003db2:	fba3 2302 	umull	r2, r3, r3, r2
 8003db6:	095b      	lsrs	r3, r3, #5
 8003db8:	011e      	lsls	r6, r3, #4
 8003dba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dbc:	461c      	mov	r4, r3
 8003dbe:	f04f 0500 	mov.w	r5, #0
 8003dc2:	4622      	mov	r2, r4
 8003dc4:	462b      	mov	r3, r5
 8003dc6:	1891      	adds	r1, r2, r2
 8003dc8:	6339      	str	r1, [r7, #48]	; 0x30
 8003dca:	415b      	adcs	r3, r3
 8003dcc:	637b      	str	r3, [r7, #52]	; 0x34
 8003dce:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003dd2:	1912      	adds	r2, r2, r4
 8003dd4:	eb45 0303 	adc.w	r3, r5, r3
 8003dd8:	f04f 0000 	mov.w	r0, #0
 8003ddc:	f04f 0100 	mov.w	r1, #0
 8003de0:	00d9      	lsls	r1, r3, #3
 8003de2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003de6:	00d0      	lsls	r0, r2, #3
 8003de8:	4602      	mov	r2, r0
 8003dea:	460b      	mov	r3, r1
 8003dec:	1911      	adds	r1, r2, r4
 8003dee:	65b9      	str	r1, [r7, #88]	; 0x58
 8003df0:	416b      	adcs	r3, r5
 8003df2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003df4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	461a      	mov	r2, r3
 8003dfa:	f04f 0300 	mov.w	r3, #0
 8003dfe:	1891      	adds	r1, r2, r2
 8003e00:	62b9      	str	r1, [r7, #40]	; 0x28
 8003e02:	415b      	adcs	r3, r3
 8003e04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e06:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e0a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003e0e:	f7fc feb5 	bl	8000b7c <__aeabi_uldivmod>
 8003e12:	4602      	mov	r2, r0
 8003e14:	460b      	mov	r3, r1
 8003e16:	4b8c      	ldr	r3, [pc, #560]	; (8004048 <UART_SetConfig+0x38c>)
 8003e18:	fba3 1302 	umull	r1, r3, r3, r2
 8003e1c:	095b      	lsrs	r3, r3, #5
 8003e1e:	2164      	movs	r1, #100	; 0x64
 8003e20:	fb01 f303 	mul.w	r3, r1, r3
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	00db      	lsls	r3, r3, #3
 8003e28:	3332      	adds	r3, #50	; 0x32
 8003e2a:	4a87      	ldr	r2, [pc, #540]	; (8004048 <UART_SetConfig+0x38c>)
 8003e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e30:	095b      	lsrs	r3, r3, #5
 8003e32:	005b      	lsls	r3, r3, #1
 8003e34:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e38:	441e      	add	r6, r3
 8003e3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f04f 0100 	mov.w	r1, #0
 8003e42:	4602      	mov	r2, r0
 8003e44:	460b      	mov	r3, r1
 8003e46:	1894      	adds	r4, r2, r2
 8003e48:	623c      	str	r4, [r7, #32]
 8003e4a:	415b      	adcs	r3, r3
 8003e4c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e4e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003e52:	1812      	adds	r2, r2, r0
 8003e54:	eb41 0303 	adc.w	r3, r1, r3
 8003e58:	f04f 0400 	mov.w	r4, #0
 8003e5c:	f04f 0500 	mov.w	r5, #0
 8003e60:	00dd      	lsls	r5, r3, #3
 8003e62:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003e66:	00d4      	lsls	r4, r2, #3
 8003e68:	4622      	mov	r2, r4
 8003e6a:	462b      	mov	r3, r5
 8003e6c:	1814      	adds	r4, r2, r0
 8003e6e:	653c      	str	r4, [r7, #80]	; 0x50
 8003e70:	414b      	adcs	r3, r1
 8003e72:	657b      	str	r3, [r7, #84]	; 0x54
 8003e74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	461a      	mov	r2, r3
 8003e7a:	f04f 0300 	mov.w	r3, #0
 8003e7e:	1891      	adds	r1, r2, r2
 8003e80:	61b9      	str	r1, [r7, #24]
 8003e82:	415b      	adcs	r3, r3
 8003e84:	61fb      	str	r3, [r7, #28]
 8003e86:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e8a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003e8e:	f7fc fe75 	bl	8000b7c <__aeabi_uldivmod>
 8003e92:	4602      	mov	r2, r0
 8003e94:	460b      	mov	r3, r1
 8003e96:	4b6c      	ldr	r3, [pc, #432]	; (8004048 <UART_SetConfig+0x38c>)
 8003e98:	fba3 1302 	umull	r1, r3, r3, r2
 8003e9c:	095b      	lsrs	r3, r3, #5
 8003e9e:	2164      	movs	r1, #100	; 0x64
 8003ea0:	fb01 f303 	mul.w	r3, r1, r3
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	00db      	lsls	r3, r3, #3
 8003ea8:	3332      	adds	r3, #50	; 0x32
 8003eaa:	4a67      	ldr	r2, [pc, #412]	; (8004048 <UART_SetConfig+0x38c>)
 8003eac:	fba2 2303 	umull	r2, r3, r2, r3
 8003eb0:	095b      	lsrs	r3, r3, #5
 8003eb2:	f003 0207 	and.w	r2, r3, #7
 8003eb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4432      	add	r2, r6
 8003ebc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003ebe:	e0b9      	b.n	8004034 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ec0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ec2:	461c      	mov	r4, r3
 8003ec4:	f04f 0500 	mov.w	r5, #0
 8003ec8:	4622      	mov	r2, r4
 8003eca:	462b      	mov	r3, r5
 8003ecc:	1891      	adds	r1, r2, r2
 8003ece:	6139      	str	r1, [r7, #16]
 8003ed0:	415b      	adcs	r3, r3
 8003ed2:	617b      	str	r3, [r7, #20]
 8003ed4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003ed8:	1912      	adds	r2, r2, r4
 8003eda:	eb45 0303 	adc.w	r3, r5, r3
 8003ede:	f04f 0000 	mov.w	r0, #0
 8003ee2:	f04f 0100 	mov.w	r1, #0
 8003ee6:	00d9      	lsls	r1, r3, #3
 8003ee8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003eec:	00d0      	lsls	r0, r2, #3
 8003eee:	4602      	mov	r2, r0
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	eb12 0804 	adds.w	r8, r2, r4
 8003ef6:	eb43 0905 	adc.w	r9, r3, r5
 8003efa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	4618      	mov	r0, r3
 8003f00:	f04f 0100 	mov.w	r1, #0
 8003f04:	f04f 0200 	mov.w	r2, #0
 8003f08:	f04f 0300 	mov.w	r3, #0
 8003f0c:	008b      	lsls	r3, r1, #2
 8003f0e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003f12:	0082      	lsls	r2, r0, #2
 8003f14:	4640      	mov	r0, r8
 8003f16:	4649      	mov	r1, r9
 8003f18:	f7fc fe30 	bl	8000b7c <__aeabi_uldivmod>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	460b      	mov	r3, r1
 8003f20:	4b49      	ldr	r3, [pc, #292]	; (8004048 <UART_SetConfig+0x38c>)
 8003f22:	fba3 2302 	umull	r2, r3, r3, r2
 8003f26:	095b      	lsrs	r3, r3, #5
 8003f28:	011e      	lsls	r6, r3, #4
 8003f2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f04f 0100 	mov.w	r1, #0
 8003f32:	4602      	mov	r2, r0
 8003f34:	460b      	mov	r3, r1
 8003f36:	1894      	adds	r4, r2, r2
 8003f38:	60bc      	str	r4, [r7, #8]
 8003f3a:	415b      	adcs	r3, r3
 8003f3c:	60fb      	str	r3, [r7, #12]
 8003f3e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f42:	1812      	adds	r2, r2, r0
 8003f44:	eb41 0303 	adc.w	r3, r1, r3
 8003f48:	f04f 0400 	mov.w	r4, #0
 8003f4c:	f04f 0500 	mov.w	r5, #0
 8003f50:	00dd      	lsls	r5, r3, #3
 8003f52:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003f56:	00d4      	lsls	r4, r2, #3
 8003f58:	4622      	mov	r2, r4
 8003f5a:	462b      	mov	r3, r5
 8003f5c:	1814      	adds	r4, r2, r0
 8003f5e:	64bc      	str	r4, [r7, #72]	; 0x48
 8003f60:	414b      	adcs	r3, r1
 8003f62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f04f 0100 	mov.w	r1, #0
 8003f6e:	f04f 0200 	mov.w	r2, #0
 8003f72:	f04f 0300 	mov.w	r3, #0
 8003f76:	008b      	lsls	r3, r1, #2
 8003f78:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003f7c:	0082      	lsls	r2, r0, #2
 8003f7e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003f82:	f7fc fdfb 	bl	8000b7c <__aeabi_uldivmod>
 8003f86:	4602      	mov	r2, r0
 8003f88:	460b      	mov	r3, r1
 8003f8a:	4b2f      	ldr	r3, [pc, #188]	; (8004048 <UART_SetConfig+0x38c>)
 8003f8c:	fba3 1302 	umull	r1, r3, r3, r2
 8003f90:	095b      	lsrs	r3, r3, #5
 8003f92:	2164      	movs	r1, #100	; 0x64
 8003f94:	fb01 f303 	mul.w	r3, r1, r3
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	011b      	lsls	r3, r3, #4
 8003f9c:	3332      	adds	r3, #50	; 0x32
 8003f9e:	4a2a      	ldr	r2, [pc, #168]	; (8004048 <UART_SetConfig+0x38c>)
 8003fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa4:	095b      	lsrs	r3, r3, #5
 8003fa6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003faa:	441e      	add	r6, r3
 8003fac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f04f 0100 	mov.w	r1, #0
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	460b      	mov	r3, r1
 8003fb8:	1894      	adds	r4, r2, r2
 8003fba:	603c      	str	r4, [r7, #0]
 8003fbc:	415b      	adcs	r3, r3
 8003fbe:	607b      	str	r3, [r7, #4]
 8003fc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003fc4:	1812      	adds	r2, r2, r0
 8003fc6:	eb41 0303 	adc.w	r3, r1, r3
 8003fca:	f04f 0400 	mov.w	r4, #0
 8003fce:	f04f 0500 	mov.w	r5, #0
 8003fd2:	00dd      	lsls	r5, r3, #3
 8003fd4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003fd8:	00d4      	lsls	r4, r2, #3
 8003fda:	4622      	mov	r2, r4
 8003fdc:	462b      	mov	r3, r5
 8003fde:	eb12 0a00 	adds.w	sl, r2, r0
 8003fe2:	eb43 0b01 	adc.w	fp, r3, r1
 8003fe6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f04f 0100 	mov.w	r1, #0
 8003ff0:	f04f 0200 	mov.w	r2, #0
 8003ff4:	f04f 0300 	mov.w	r3, #0
 8003ff8:	008b      	lsls	r3, r1, #2
 8003ffa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003ffe:	0082      	lsls	r2, r0, #2
 8004000:	4650      	mov	r0, sl
 8004002:	4659      	mov	r1, fp
 8004004:	f7fc fdba 	bl	8000b7c <__aeabi_uldivmod>
 8004008:	4602      	mov	r2, r0
 800400a:	460b      	mov	r3, r1
 800400c:	4b0e      	ldr	r3, [pc, #56]	; (8004048 <UART_SetConfig+0x38c>)
 800400e:	fba3 1302 	umull	r1, r3, r3, r2
 8004012:	095b      	lsrs	r3, r3, #5
 8004014:	2164      	movs	r1, #100	; 0x64
 8004016:	fb01 f303 	mul.w	r3, r1, r3
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	011b      	lsls	r3, r3, #4
 800401e:	3332      	adds	r3, #50	; 0x32
 8004020:	4a09      	ldr	r2, [pc, #36]	; (8004048 <UART_SetConfig+0x38c>)
 8004022:	fba2 2303 	umull	r2, r3, r2, r3
 8004026:	095b      	lsrs	r3, r3, #5
 8004028:	f003 020f 	and.w	r2, r3, #15
 800402c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4432      	add	r2, r6
 8004032:	609a      	str	r2, [r3, #8]
}
 8004034:	bf00      	nop
 8004036:	377c      	adds	r7, #124	; 0x7c
 8004038:	46bd      	mov	sp, r7
 800403a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800403e:	bf00      	nop
 8004040:	40011000 	.word	0x40011000
 8004044:	40011400 	.word	0x40011400
 8004048:	51eb851f 	.word	0x51eb851f

0800404c <gcvt>:
 800404c:	b530      	push	{r4, r5, lr}
 800404e:	2200      	movs	r2, #0
 8004050:	b085      	sub	sp, #20
 8004052:	460c      	mov	r4, r1
 8004054:	4605      	mov	r5, r0
 8004056:	2300      	movs	r3, #0
 8004058:	ec51 0b10 	vmov	r0, r1, d0
 800405c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004060:	f7fc fd3c 	bl	8000adc <__aeabi_dcmplt>
 8004064:	ed9d 0b02 	vldr	d0, [sp, #8]
 8004068:	4622      	mov	r2, r4
 800406a:	b118      	cbz	r0, 8004074 <gcvt+0x28>
 800406c:	232d      	movs	r3, #45	; 0x2d
 800406e:	f802 3b01 	strb.w	r3, [r2], #1
 8004072:	3d01      	subs	r5, #1
 8004074:	2300      	movs	r3, #0
 8004076:	4806      	ldr	r0, [pc, #24]	; (8004090 <gcvt+0x44>)
 8004078:	9300      	str	r3, [sp, #0]
 800407a:	4629      	mov	r1, r5
 800407c:	2367      	movs	r3, #103	; 0x67
 800407e:	6800      	ldr	r0, [r0, #0]
 8004080:	f000 f8d2 	bl	8004228 <_gcvt>
 8004084:	2800      	cmp	r0, #0
 8004086:	bf14      	ite	ne
 8004088:	4620      	movne	r0, r4
 800408a:	2000      	moveq	r0, #0
 800408c:	b005      	add	sp, #20
 800408e:	bd30      	pop	{r4, r5, pc}
 8004090:	2000000c 	.word	0x2000000c

08004094 <__errno>:
 8004094:	4b01      	ldr	r3, [pc, #4]	; (800409c <__errno+0x8>)
 8004096:	6818      	ldr	r0, [r3, #0]
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	2000000c 	.word	0x2000000c

080040a0 <__libc_init_array>:
 80040a0:	b570      	push	{r4, r5, r6, lr}
 80040a2:	4d0d      	ldr	r5, [pc, #52]	; (80040d8 <__libc_init_array+0x38>)
 80040a4:	4c0d      	ldr	r4, [pc, #52]	; (80040dc <__libc_init_array+0x3c>)
 80040a6:	1b64      	subs	r4, r4, r5
 80040a8:	10a4      	asrs	r4, r4, #2
 80040aa:	2600      	movs	r6, #0
 80040ac:	42a6      	cmp	r6, r4
 80040ae:	d109      	bne.n	80040c4 <__libc_init_array+0x24>
 80040b0:	4d0b      	ldr	r5, [pc, #44]	; (80040e0 <__libc_init_array+0x40>)
 80040b2:	4c0c      	ldr	r4, [pc, #48]	; (80040e4 <__libc_init_array+0x44>)
 80040b4:	f002 fd1a 	bl	8006aec <_init>
 80040b8:	1b64      	subs	r4, r4, r5
 80040ba:	10a4      	asrs	r4, r4, #2
 80040bc:	2600      	movs	r6, #0
 80040be:	42a6      	cmp	r6, r4
 80040c0:	d105      	bne.n	80040ce <__libc_init_array+0x2e>
 80040c2:	bd70      	pop	{r4, r5, r6, pc}
 80040c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80040c8:	4798      	blx	r3
 80040ca:	3601      	adds	r6, #1
 80040cc:	e7ee      	b.n	80040ac <__libc_init_array+0xc>
 80040ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80040d2:	4798      	blx	r3
 80040d4:	3601      	adds	r6, #1
 80040d6:	e7f2      	b.n	80040be <__libc_init_array+0x1e>
 80040d8:	08006e44 	.word	0x08006e44
 80040dc:	08006e44 	.word	0x08006e44
 80040e0:	08006e44 	.word	0x08006e44
 80040e4:	08006e48 	.word	0x08006e48

080040e8 <memset>:
 80040e8:	4402      	add	r2, r0
 80040ea:	4603      	mov	r3, r0
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d100      	bne.n	80040f2 <memset+0xa>
 80040f0:	4770      	bx	lr
 80040f2:	f803 1b01 	strb.w	r1, [r3], #1
 80040f6:	e7f9      	b.n	80040ec <memset+0x4>

080040f8 <siprintf>:
 80040f8:	b40e      	push	{r1, r2, r3}
 80040fa:	b500      	push	{lr}
 80040fc:	b09c      	sub	sp, #112	; 0x70
 80040fe:	ab1d      	add	r3, sp, #116	; 0x74
 8004100:	9002      	str	r0, [sp, #8]
 8004102:	9006      	str	r0, [sp, #24]
 8004104:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004108:	4809      	ldr	r0, [pc, #36]	; (8004130 <siprintf+0x38>)
 800410a:	9107      	str	r1, [sp, #28]
 800410c:	9104      	str	r1, [sp, #16]
 800410e:	4909      	ldr	r1, [pc, #36]	; (8004134 <siprintf+0x3c>)
 8004110:	f853 2b04 	ldr.w	r2, [r3], #4
 8004114:	9105      	str	r1, [sp, #20]
 8004116:	6800      	ldr	r0, [r0, #0]
 8004118:	9301      	str	r3, [sp, #4]
 800411a:	a902      	add	r1, sp, #8
 800411c:	f000 fdcc 	bl	8004cb8 <_svfiprintf_r>
 8004120:	9b02      	ldr	r3, [sp, #8]
 8004122:	2200      	movs	r2, #0
 8004124:	701a      	strb	r2, [r3, #0]
 8004126:	b01c      	add	sp, #112	; 0x70
 8004128:	f85d eb04 	ldr.w	lr, [sp], #4
 800412c:	b003      	add	sp, #12
 800412e:	4770      	bx	lr
 8004130:	2000000c 	.word	0x2000000c
 8004134:	ffff0208 	.word	0xffff0208

08004138 <print_e>:
 8004138:	b5f0      	push	{r4, r5, r6, r7, lr}
 800413a:	b087      	sub	sp, #28
 800413c:	ec43 2b10 	vmov	d0, r2, r3
 8004140:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8004142:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8004146:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8004148:	ab04      	add	r3, sp, #16
 800414a:	9301      	str	r3, [sp, #4]
 800414c:	ab03      	add	r3, sp, #12
 800414e:	9300      	str	r3, [sp, #0]
 8004150:	1c62      	adds	r2, r4, #1
 8004152:	ab05      	add	r3, sp, #20
 8004154:	460f      	mov	r7, r1
 8004156:	2102      	movs	r1, #2
 8004158:	f001 f906 	bl	8005368 <_dtoa_r>
 800415c:	9a05      	ldr	r2, [sp, #20]
 800415e:	f242 730f 	movw	r3, #9999	; 0x270f
 8004162:	429a      	cmp	r2, r3
 8004164:	d105      	bne.n	8004172 <print_e+0x3a>
 8004166:	4601      	mov	r1, r0
 8004168:	4638      	mov	r0, r7
 800416a:	f001 f849 	bl	8005200 <strcpy>
 800416e:	b007      	add	sp, #28
 8004170:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004172:	463b      	mov	r3, r7
 8004174:	7801      	ldrb	r1, [r0, #0]
 8004176:	f803 1b01 	strb.w	r1, [r3], #1
 800417a:	2c00      	cmp	r4, #0
 800417c:	bfc8      	it	gt
 800417e:	2501      	movgt	r5, #1
 8004180:	212e      	movs	r1, #46	; 0x2e
 8004182:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 8004186:	b10f      	cbz	r7, 800418c <print_e+0x54>
 8004188:	2c00      	cmp	r4, #0
 800418a:	dc37      	bgt.n	80041fc <print_e+0xc4>
 800418c:	2e67      	cmp	r6, #103	; 0x67
 800418e:	d046      	beq.n	800421e <print_e+0xe6>
 8004190:	2e47      	cmp	r6, #71	; 0x47
 8004192:	d046      	beq.n	8004222 <print_e+0xea>
 8004194:	212e      	movs	r1, #46	; 0x2e
 8004196:	2030      	movs	r0, #48	; 0x30
 8004198:	2c00      	cmp	r4, #0
 800419a:	dc38      	bgt.n	800420e <print_e+0xd6>
 800419c:	1e51      	subs	r1, r2, #1
 800419e:	2900      	cmp	r1, #0
 80041a0:	bfb8      	it	lt
 80041a2:	f1c2 0201 	rsblt	r2, r2, #1
 80041a6:	4618      	mov	r0, r3
 80041a8:	9105      	str	r1, [sp, #20]
 80041aa:	bfbc      	itt	lt
 80041ac:	212d      	movlt	r1, #45	; 0x2d
 80041ae:	9205      	strlt	r2, [sp, #20]
 80041b0:	f800 6b02 	strb.w	r6, [r0], #2
 80041b4:	bfb8      	it	lt
 80041b6:	7059      	strblt	r1, [r3, #1]
 80041b8:	9905      	ldr	r1, [sp, #20]
 80041ba:	bfa4      	itt	ge
 80041bc:	222b      	movge	r2, #43	; 0x2b
 80041be:	705a      	strbge	r2, [r3, #1]
 80041c0:	2963      	cmp	r1, #99	; 0x63
 80041c2:	dd0b      	ble.n	80041dc <print_e+0xa4>
 80041c4:	2264      	movs	r2, #100	; 0x64
 80041c6:	fb91 f2f2 	sdiv	r2, r1, r2
 80041ca:	f102 0430 	add.w	r4, r2, #48	; 0x30
 80041ce:	1cd8      	adds	r0, r3, #3
 80041d0:	709c      	strb	r4, [r3, #2]
 80041d2:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80041d6:	fb03 1202 	mla	r2, r3, r2, r1
 80041da:	9205      	str	r2, [sp, #20]
 80041dc:	9a05      	ldr	r2, [sp, #20]
 80041de:	230a      	movs	r3, #10
 80041e0:	fb92 f3f3 	sdiv	r3, r2, r3
 80041e4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80041e8:	7001      	strb	r1, [r0, #0]
 80041ea:	f06f 0109 	mvn.w	r1, #9
 80041ee:	fb01 2303 	mla	r3, r1, r3, r2
 80041f2:	3330      	adds	r3, #48	; 0x30
 80041f4:	7043      	strb	r3, [r0, #1]
 80041f6:	2300      	movs	r3, #0
 80041f8:	7083      	strb	r3, [r0, #2]
 80041fa:	e7b8      	b.n	800416e <print_e+0x36>
 80041fc:	b10d      	cbz	r5, 8004202 <print_e+0xca>
 80041fe:	f803 1b01 	strb.w	r1, [r3], #1
 8004202:	7805      	ldrb	r5, [r0, #0]
 8004204:	f803 5b01 	strb.w	r5, [r3], #1
 8004208:	3c01      	subs	r4, #1
 800420a:	2500      	movs	r5, #0
 800420c:	e7b9      	b.n	8004182 <print_e+0x4a>
 800420e:	b10d      	cbz	r5, 8004214 <print_e+0xdc>
 8004210:	f803 1b01 	strb.w	r1, [r3], #1
 8004214:	f803 0b01 	strb.w	r0, [r3], #1
 8004218:	3c01      	subs	r4, #1
 800421a:	2500      	movs	r5, #0
 800421c:	e7bc      	b.n	8004198 <print_e+0x60>
 800421e:	2665      	movs	r6, #101	; 0x65
 8004220:	e7bc      	b.n	800419c <print_e+0x64>
 8004222:	2645      	movs	r6, #69	; 0x45
 8004224:	e7ba      	b.n	800419c <print_e+0x64>
	...

08004228 <_gcvt>:
 8004228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800422c:	ec55 4b10 	vmov	r4, r5, d0
 8004230:	b088      	sub	sp, #32
 8004232:	4681      	mov	r9, r0
 8004234:	4688      	mov	r8, r1
 8004236:	4616      	mov	r6, r2
 8004238:	469a      	mov	sl, r3
 800423a:	ee10 0a10 	vmov	r0, s0
 800423e:	2200      	movs	r2, #0
 8004240:	2300      	movs	r3, #0
 8004242:	4629      	mov	r1, r5
 8004244:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8004246:	f7fc fc49 	bl	8000adc <__aeabi_dcmplt>
 800424a:	b110      	cbz	r0, 8004252 <_gcvt+0x2a>
 800424c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004250:	461d      	mov	r5, r3
 8004252:	2200      	movs	r2, #0
 8004254:	2300      	movs	r3, #0
 8004256:	4620      	mov	r0, r4
 8004258:	4629      	mov	r1, r5
 800425a:	f7fc fc35 	bl	8000ac8 <__aeabi_dcmpeq>
 800425e:	b138      	cbz	r0, 8004270 <_gcvt+0x48>
 8004260:	2330      	movs	r3, #48	; 0x30
 8004262:	7033      	strb	r3, [r6, #0]
 8004264:	2300      	movs	r3, #0
 8004266:	7073      	strb	r3, [r6, #1]
 8004268:	4630      	mov	r0, r6
 800426a:	b008      	add	sp, #32
 800426c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004270:	a34b      	add	r3, pc, #300	; (adr r3, 80043a0 <_gcvt+0x178>)
 8004272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004276:	4620      	mov	r0, r4
 8004278:	4629      	mov	r1, r5
 800427a:	f7fc fc39 	bl	8000af0 <__aeabi_dcmple>
 800427e:	b158      	cbz	r0, 8004298 <_gcvt+0x70>
 8004280:	f108 31ff 	add.w	r1, r8, #4294967295
 8004284:	9100      	str	r1, [sp, #0]
 8004286:	e9cd a701 	strd	sl, r7, [sp, #4]
 800428a:	4622      	mov	r2, r4
 800428c:	462b      	mov	r3, r5
 800428e:	4631      	mov	r1, r6
 8004290:	4648      	mov	r0, r9
 8004292:	f7ff ff51 	bl	8004138 <print_e>
 8004296:	e7e7      	b.n	8004268 <_gcvt+0x40>
 8004298:	4640      	mov	r0, r8
 800429a:	f000 fc03 	bl	8004aa4 <_mprec_log10>
 800429e:	4622      	mov	r2, r4
 80042a0:	ec51 0b10 	vmov	r0, r1, d0
 80042a4:	462b      	mov	r3, r5
 80042a6:	f7fc fc23 	bl	8000af0 <__aeabi_dcmple>
 80042aa:	2800      	cmp	r0, #0
 80042ac:	d1e8      	bne.n	8004280 <_gcvt+0x58>
 80042ae:	ab07      	add	r3, sp, #28
 80042b0:	9301      	str	r3, [sp, #4]
 80042b2:	ab06      	add	r3, sp, #24
 80042b4:	9300      	str	r3, [sp, #0]
 80042b6:	4642      	mov	r2, r8
 80042b8:	ab05      	add	r3, sp, #20
 80042ba:	ec45 4b10 	vmov	d0, r4, r5
 80042be:	2102      	movs	r1, #2
 80042c0:	4648      	mov	r0, r9
 80042c2:	f001 f851 	bl	8005368 <_dtoa_r>
 80042c6:	9a05      	ldr	r2, [sp, #20]
 80042c8:	f242 730f 	movw	r3, #9999	; 0x270f
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d00e      	beq.n	80042ee <_gcvt+0xc6>
 80042d0:	4633      	mov	r3, r6
 80042d2:	44b0      	add	r8, r6
 80042d4:	4604      	mov	r4, r0
 80042d6:	f810 5b01 	ldrb.w	r5, [r0], #1
 80042da:	9905      	ldr	r1, [sp, #20]
 80042dc:	eba8 0203 	sub.w	r2, r8, r3
 80042e0:	b10d      	cbz	r5, 80042e6 <_gcvt+0xbe>
 80042e2:	2900      	cmp	r1, #0
 80042e4:	dc08      	bgt.n	80042f8 <_gcvt+0xd0>
 80042e6:	2000      	movs	r0, #0
 80042e8:	f04f 0c30 	mov.w	ip, #48	; 0x30
 80042ec:	e00d      	b.n	800430a <_gcvt+0xe2>
 80042ee:	4601      	mov	r1, r0
 80042f0:	4630      	mov	r0, r6
 80042f2:	f000 ff85 	bl	8005200 <strcpy>
 80042f6:	e7b7      	b.n	8004268 <_gcvt+0x40>
 80042f8:	3901      	subs	r1, #1
 80042fa:	f803 5b01 	strb.w	r5, [r3], #1
 80042fe:	9105      	str	r1, [sp, #20]
 8004300:	e7e8      	b.n	80042d4 <_gcvt+0xac>
 8004302:	f803 cb01 	strb.w	ip, [r3], #1
 8004306:	3a01      	subs	r2, #1
 8004308:	2001      	movs	r0, #1
 800430a:	2900      	cmp	r1, #0
 800430c:	460d      	mov	r5, r1
 800430e:	dc2a      	bgt.n	8004366 <_gcvt+0x13e>
 8004310:	b100      	cbz	r0, 8004314 <_gcvt+0xec>
 8004312:	9105      	str	r1, [sp, #20]
 8004314:	b90f      	cbnz	r7, 800431a <_gcvt+0xf2>
 8004316:	7821      	ldrb	r1, [r4, #0]
 8004318:	b311      	cbz	r1, 8004360 <_gcvt+0x138>
 800431a:	42b3      	cmp	r3, r6
 800431c:	bf04      	itt	eq
 800431e:	2130      	moveq	r1, #48	; 0x30
 8004320:	f803 1b01 	strbeq.w	r1, [r3], #1
 8004324:	212e      	movs	r1, #46	; 0x2e
 8004326:	7019      	strb	r1, [r3, #0]
 8004328:	9905      	ldr	r1, [sp, #20]
 800432a:	4618      	mov	r0, r3
 800432c:	2500      	movs	r5, #0
 800432e:	eba1 0c03 	sub.w	ip, r1, r3
 8004332:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8004336:	eb1c 0f00 	cmn.w	ip, r0
 800433a:	d41c      	bmi.n	8004376 <_gcvt+0x14e>
 800433c:	2900      	cmp	r1, #0
 800433e:	f1c1 0000 	rsb	r0, r1, #0
 8004342:	bfc8      	it	gt
 8004344:	2000      	movgt	r0, #0
 8004346:	f100 0c01 	add.w	ip, r0, #1
 800434a:	4463      	add	r3, ip
 800434c:	4401      	add	r1, r0
 800434e:	b105      	cbz	r5, 8004352 <_gcvt+0x12a>
 8004350:	9105      	str	r1, [sp, #20]
 8004352:	1e61      	subs	r1, r4, #1
 8004354:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8004358:	b108      	cbz	r0, 800435e <_gcvt+0x136>
 800435a:	2a00      	cmp	r2, #0
 800435c:	dc0f      	bgt.n	800437e <_gcvt+0x156>
 800435e:	b9df      	cbnz	r7, 8004398 <_gcvt+0x170>
 8004360:	2200      	movs	r2, #0
 8004362:	701a      	strb	r2, [r3, #0]
 8004364:	e780      	b.n	8004268 <_gcvt+0x40>
 8004366:	2a00      	cmp	r2, #0
 8004368:	f101 31ff 	add.w	r1, r1, #4294967295
 800436c:	dcc9      	bgt.n	8004302 <_gcvt+0xda>
 800436e:	2800      	cmp	r0, #0
 8004370:	d0d0      	beq.n	8004314 <_gcvt+0xec>
 8004372:	9505      	str	r5, [sp, #20]
 8004374:	e7ce      	b.n	8004314 <_gcvt+0xec>
 8004376:	f800 ef01 	strb.w	lr, [r0, #1]!
 800437a:	2501      	movs	r5, #1
 800437c:	e7db      	b.n	8004336 <_gcvt+0x10e>
 800437e:	f803 0b01 	strb.w	r0, [r3], #1
 8004382:	3a01      	subs	r2, #1
 8004384:	e7e6      	b.n	8004354 <_gcvt+0x12c>
 8004386:	f801 5b01 	strb.w	r5, [r1], #1
 800438a:	1a60      	subs	r0, r4, r1
 800438c:	2800      	cmp	r0, #0
 800438e:	dcfa      	bgt.n	8004386 <_gcvt+0x15e>
 8004390:	2a00      	cmp	r2, #0
 8004392:	bfa8      	it	ge
 8004394:	189b      	addge	r3, r3, r2
 8004396:	e7e3      	b.n	8004360 <_gcvt+0x138>
 8004398:	4619      	mov	r1, r3
 800439a:	189c      	adds	r4, r3, r2
 800439c:	2530      	movs	r5, #48	; 0x30
 800439e:	e7f4      	b.n	800438a <_gcvt+0x162>
 80043a0:	eb1c432d 	.word	0xeb1c432d
 80043a4:	3f1a36e2 	.word	0x3f1a36e2

080043a8 <_Balloc>:
 80043a8:	b570      	push	{r4, r5, r6, lr}
 80043aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80043ac:	4604      	mov	r4, r0
 80043ae:	460d      	mov	r5, r1
 80043b0:	b976      	cbnz	r6, 80043d0 <_Balloc+0x28>
 80043b2:	2010      	movs	r0, #16
 80043b4:	f001 fdd6 	bl	8005f64 <malloc>
 80043b8:	4602      	mov	r2, r0
 80043ba:	6260      	str	r0, [r4, #36]	; 0x24
 80043bc:	b920      	cbnz	r0, 80043c8 <_Balloc+0x20>
 80043be:	4b18      	ldr	r3, [pc, #96]	; (8004420 <_Balloc+0x78>)
 80043c0:	4818      	ldr	r0, [pc, #96]	; (8004424 <_Balloc+0x7c>)
 80043c2:	2166      	movs	r1, #102	; 0x66
 80043c4:	f000 ff24 	bl	8005210 <__assert_func>
 80043c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80043cc:	6006      	str	r6, [r0, #0]
 80043ce:	60c6      	str	r6, [r0, #12]
 80043d0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80043d2:	68f3      	ldr	r3, [r6, #12]
 80043d4:	b183      	cbz	r3, 80043f8 <_Balloc+0x50>
 80043d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80043de:	b9b8      	cbnz	r0, 8004410 <_Balloc+0x68>
 80043e0:	2101      	movs	r1, #1
 80043e2:	fa01 f605 	lsl.w	r6, r1, r5
 80043e6:	1d72      	adds	r2, r6, #5
 80043e8:	0092      	lsls	r2, r2, #2
 80043ea:	4620      	mov	r0, r4
 80043ec:	f000 fb78 	bl	8004ae0 <_calloc_r>
 80043f0:	b160      	cbz	r0, 800440c <_Balloc+0x64>
 80043f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80043f6:	e00e      	b.n	8004416 <_Balloc+0x6e>
 80043f8:	2221      	movs	r2, #33	; 0x21
 80043fa:	2104      	movs	r1, #4
 80043fc:	4620      	mov	r0, r4
 80043fe:	f000 fb6f 	bl	8004ae0 <_calloc_r>
 8004402:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004404:	60f0      	str	r0, [r6, #12]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d1e4      	bne.n	80043d6 <_Balloc+0x2e>
 800440c:	2000      	movs	r0, #0
 800440e:	bd70      	pop	{r4, r5, r6, pc}
 8004410:	6802      	ldr	r2, [r0, #0]
 8004412:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004416:	2300      	movs	r3, #0
 8004418:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800441c:	e7f7      	b.n	800440e <_Balloc+0x66>
 800441e:	bf00      	nop
 8004420:	08006b78 	.word	0x08006b78
 8004424:	08006b8f 	.word	0x08006b8f

08004428 <_Bfree>:
 8004428:	b570      	push	{r4, r5, r6, lr}
 800442a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800442c:	4605      	mov	r5, r0
 800442e:	460c      	mov	r4, r1
 8004430:	b976      	cbnz	r6, 8004450 <_Bfree+0x28>
 8004432:	2010      	movs	r0, #16
 8004434:	f001 fd96 	bl	8005f64 <malloc>
 8004438:	4602      	mov	r2, r0
 800443a:	6268      	str	r0, [r5, #36]	; 0x24
 800443c:	b920      	cbnz	r0, 8004448 <_Bfree+0x20>
 800443e:	4b09      	ldr	r3, [pc, #36]	; (8004464 <_Bfree+0x3c>)
 8004440:	4809      	ldr	r0, [pc, #36]	; (8004468 <_Bfree+0x40>)
 8004442:	218a      	movs	r1, #138	; 0x8a
 8004444:	f000 fee4 	bl	8005210 <__assert_func>
 8004448:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800444c:	6006      	str	r6, [r0, #0]
 800444e:	60c6      	str	r6, [r0, #12]
 8004450:	b13c      	cbz	r4, 8004462 <_Bfree+0x3a>
 8004452:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004454:	6862      	ldr	r2, [r4, #4]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800445c:	6021      	str	r1, [r4, #0]
 800445e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004462:	bd70      	pop	{r4, r5, r6, pc}
 8004464:	08006b78 	.word	0x08006b78
 8004468:	08006b8f 	.word	0x08006b8f

0800446c <__multadd>:
 800446c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004470:	690e      	ldr	r6, [r1, #16]
 8004472:	4607      	mov	r7, r0
 8004474:	4698      	mov	r8, r3
 8004476:	460c      	mov	r4, r1
 8004478:	f101 0014 	add.w	r0, r1, #20
 800447c:	2300      	movs	r3, #0
 800447e:	6805      	ldr	r5, [r0, #0]
 8004480:	b2a9      	uxth	r1, r5
 8004482:	fb02 8101 	mla	r1, r2, r1, r8
 8004486:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800448a:	0c2d      	lsrs	r5, r5, #16
 800448c:	fb02 c505 	mla	r5, r2, r5, ip
 8004490:	b289      	uxth	r1, r1
 8004492:	3301      	adds	r3, #1
 8004494:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8004498:	429e      	cmp	r6, r3
 800449a:	f840 1b04 	str.w	r1, [r0], #4
 800449e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80044a2:	dcec      	bgt.n	800447e <__multadd+0x12>
 80044a4:	f1b8 0f00 	cmp.w	r8, #0
 80044a8:	d022      	beq.n	80044f0 <__multadd+0x84>
 80044aa:	68a3      	ldr	r3, [r4, #8]
 80044ac:	42b3      	cmp	r3, r6
 80044ae:	dc19      	bgt.n	80044e4 <__multadd+0x78>
 80044b0:	6861      	ldr	r1, [r4, #4]
 80044b2:	4638      	mov	r0, r7
 80044b4:	3101      	adds	r1, #1
 80044b6:	f7ff ff77 	bl	80043a8 <_Balloc>
 80044ba:	4605      	mov	r5, r0
 80044bc:	b928      	cbnz	r0, 80044ca <__multadd+0x5e>
 80044be:	4602      	mov	r2, r0
 80044c0:	4b0d      	ldr	r3, [pc, #52]	; (80044f8 <__multadd+0x8c>)
 80044c2:	480e      	ldr	r0, [pc, #56]	; (80044fc <__multadd+0x90>)
 80044c4:	21b5      	movs	r1, #181	; 0xb5
 80044c6:	f000 fea3 	bl	8005210 <__assert_func>
 80044ca:	6922      	ldr	r2, [r4, #16]
 80044cc:	3202      	adds	r2, #2
 80044ce:	f104 010c 	add.w	r1, r4, #12
 80044d2:	0092      	lsls	r2, r2, #2
 80044d4:	300c      	adds	r0, #12
 80044d6:	f001 fd4d 	bl	8005f74 <memcpy>
 80044da:	4621      	mov	r1, r4
 80044dc:	4638      	mov	r0, r7
 80044de:	f7ff ffa3 	bl	8004428 <_Bfree>
 80044e2:	462c      	mov	r4, r5
 80044e4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80044e8:	3601      	adds	r6, #1
 80044ea:	f8c3 8014 	str.w	r8, [r3, #20]
 80044ee:	6126      	str	r6, [r4, #16]
 80044f0:	4620      	mov	r0, r4
 80044f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044f6:	bf00      	nop
 80044f8:	08006bef 	.word	0x08006bef
 80044fc:	08006b8f 	.word	0x08006b8f

08004500 <__hi0bits>:
 8004500:	0c03      	lsrs	r3, r0, #16
 8004502:	041b      	lsls	r3, r3, #16
 8004504:	b9d3      	cbnz	r3, 800453c <__hi0bits+0x3c>
 8004506:	0400      	lsls	r0, r0, #16
 8004508:	2310      	movs	r3, #16
 800450a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800450e:	bf04      	itt	eq
 8004510:	0200      	lsleq	r0, r0, #8
 8004512:	3308      	addeq	r3, #8
 8004514:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8004518:	bf04      	itt	eq
 800451a:	0100      	lsleq	r0, r0, #4
 800451c:	3304      	addeq	r3, #4
 800451e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8004522:	bf04      	itt	eq
 8004524:	0080      	lsleq	r0, r0, #2
 8004526:	3302      	addeq	r3, #2
 8004528:	2800      	cmp	r0, #0
 800452a:	db05      	blt.n	8004538 <__hi0bits+0x38>
 800452c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8004530:	f103 0301 	add.w	r3, r3, #1
 8004534:	bf08      	it	eq
 8004536:	2320      	moveq	r3, #32
 8004538:	4618      	mov	r0, r3
 800453a:	4770      	bx	lr
 800453c:	2300      	movs	r3, #0
 800453e:	e7e4      	b.n	800450a <__hi0bits+0xa>

08004540 <__lo0bits>:
 8004540:	6803      	ldr	r3, [r0, #0]
 8004542:	f013 0207 	ands.w	r2, r3, #7
 8004546:	4601      	mov	r1, r0
 8004548:	d00b      	beq.n	8004562 <__lo0bits+0x22>
 800454a:	07da      	lsls	r2, r3, #31
 800454c:	d424      	bmi.n	8004598 <__lo0bits+0x58>
 800454e:	0798      	lsls	r0, r3, #30
 8004550:	bf49      	itett	mi
 8004552:	085b      	lsrmi	r3, r3, #1
 8004554:	089b      	lsrpl	r3, r3, #2
 8004556:	2001      	movmi	r0, #1
 8004558:	600b      	strmi	r3, [r1, #0]
 800455a:	bf5c      	itt	pl
 800455c:	600b      	strpl	r3, [r1, #0]
 800455e:	2002      	movpl	r0, #2
 8004560:	4770      	bx	lr
 8004562:	b298      	uxth	r0, r3
 8004564:	b9b0      	cbnz	r0, 8004594 <__lo0bits+0x54>
 8004566:	0c1b      	lsrs	r3, r3, #16
 8004568:	2010      	movs	r0, #16
 800456a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800456e:	bf04      	itt	eq
 8004570:	0a1b      	lsreq	r3, r3, #8
 8004572:	3008      	addeq	r0, #8
 8004574:	071a      	lsls	r2, r3, #28
 8004576:	bf04      	itt	eq
 8004578:	091b      	lsreq	r3, r3, #4
 800457a:	3004      	addeq	r0, #4
 800457c:	079a      	lsls	r2, r3, #30
 800457e:	bf04      	itt	eq
 8004580:	089b      	lsreq	r3, r3, #2
 8004582:	3002      	addeq	r0, #2
 8004584:	07da      	lsls	r2, r3, #31
 8004586:	d403      	bmi.n	8004590 <__lo0bits+0x50>
 8004588:	085b      	lsrs	r3, r3, #1
 800458a:	f100 0001 	add.w	r0, r0, #1
 800458e:	d005      	beq.n	800459c <__lo0bits+0x5c>
 8004590:	600b      	str	r3, [r1, #0]
 8004592:	4770      	bx	lr
 8004594:	4610      	mov	r0, r2
 8004596:	e7e8      	b.n	800456a <__lo0bits+0x2a>
 8004598:	2000      	movs	r0, #0
 800459a:	4770      	bx	lr
 800459c:	2020      	movs	r0, #32
 800459e:	4770      	bx	lr

080045a0 <__i2b>:
 80045a0:	b510      	push	{r4, lr}
 80045a2:	460c      	mov	r4, r1
 80045a4:	2101      	movs	r1, #1
 80045a6:	f7ff feff 	bl	80043a8 <_Balloc>
 80045aa:	4602      	mov	r2, r0
 80045ac:	b928      	cbnz	r0, 80045ba <__i2b+0x1a>
 80045ae:	4b05      	ldr	r3, [pc, #20]	; (80045c4 <__i2b+0x24>)
 80045b0:	4805      	ldr	r0, [pc, #20]	; (80045c8 <__i2b+0x28>)
 80045b2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80045b6:	f000 fe2b 	bl	8005210 <__assert_func>
 80045ba:	2301      	movs	r3, #1
 80045bc:	6144      	str	r4, [r0, #20]
 80045be:	6103      	str	r3, [r0, #16]
 80045c0:	bd10      	pop	{r4, pc}
 80045c2:	bf00      	nop
 80045c4:	08006bef 	.word	0x08006bef
 80045c8:	08006b8f 	.word	0x08006b8f

080045cc <__multiply>:
 80045cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045d0:	4614      	mov	r4, r2
 80045d2:	690a      	ldr	r2, [r1, #16]
 80045d4:	6923      	ldr	r3, [r4, #16]
 80045d6:	429a      	cmp	r2, r3
 80045d8:	bfb8      	it	lt
 80045da:	460b      	movlt	r3, r1
 80045dc:	460d      	mov	r5, r1
 80045de:	bfbc      	itt	lt
 80045e0:	4625      	movlt	r5, r4
 80045e2:	461c      	movlt	r4, r3
 80045e4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80045e8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80045ec:	68ab      	ldr	r3, [r5, #8]
 80045ee:	6869      	ldr	r1, [r5, #4]
 80045f0:	eb0a 0709 	add.w	r7, sl, r9
 80045f4:	42bb      	cmp	r3, r7
 80045f6:	b085      	sub	sp, #20
 80045f8:	bfb8      	it	lt
 80045fa:	3101      	addlt	r1, #1
 80045fc:	f7ff fed4 	bl	80043a8 <_Balloc>
 8004600:	b930      	cbnz	r0, 8004610 <__multiply+0x44>
 8004602:	4602      	mov	r2, r0
 8004604:	4b42      	ldr	r3, [pc, #264]	; (8004710 <__multiply+0x144>)
 8004606:	4843      	ldr	r0, [pc, #268]	; (8004714 <__multiply+0x148>)
 8004608:	f240 115d 	movw	r1, #349	; 0x15d
 800460c:	f000 fe00 	bl	8005210 <__assert_func>
 8004610:	f100 0614 	add.w	r6, r0, #20
 8004614:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8004618:	4633      	mov	r3, r6
 800461a:	2200      	movs	r2, #0
 800461c:	4543      	cmp	r3, r8
 800461e:	d31e      	bcc.n	800465e <__multiply+0x92>
 8004620:	f105 0c14 	add.w	ip, r5, #20
 8004624:	f104 0314 	add.w	r3, r4, #20
 8004628:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800462c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8004630:	9202      	str	r2, [sp, #8]
 8004632:	ebac 0205 	sub.w	r2, ip, r5
 8004636:	3a15      	subs	r2, #21
 8004638:	f022 0203 	bic.w	r2, r2, #3
 800463c:	3204      	adds	r2, #4
 800463e:	f105 0115 	add.w	r1, r5, #21
 8004642:	458c      	cmp	ip, r1
 8004644:	bf38      	it	cc
 8004646:	2204      	movcc	r2, #4
 8004648:	9201      	str	r2, [sp, #4]
 800464a:	9a02      	ldr	r2, [sp, #8]
 800464c:	9303      	str	r3, [sp, #12]
 800464e:	429a      	cmp	r2, r3
 8004650:	d808      	bhi.n	8004664 <__multiply+0x98>
 8004652:	2f00      	cmp	r7, #0
 8004654:	dc55      	bgt.n	8004702 <__multiply+0x136>
 8004656:	6107      	str	r7, [r0, #16]
 8004658:	b005      	add	sp, #20
 800465a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800465e:	f843 2b04 	str.w	r2, [r3], #4
 8004662:	e7db      	b.n	800461c <__multiply+0x50>
 8004664:	f8b3 a000 	ldrh.w	sl, [r3]
 8004668:	f1ba 0f00 	cmp.w	sl, #0
 800466c:	d020      	beq.n	80046b0 <__multiply+0xe4>
 800466e:	f105 0e14 	add.w	lr, r5, #20
 8004672:	46b1      	mov	r9, r6
 8004674:	2200      	movs	r2, #0
 8004676:	f85e 4b04 	ldr.w	r4, [lr], #4
 800467a:	f8d9 b000 	ldr.w	fp, [r9]
 800467e:	b2a1      	uxth	r1, r4
 8004680:	fa1f fb8b 	uxth.w	fp, fp
 8004684:	fb0a b101 	mla	r1, sl, r1, fp
 8004688:	4411      	add	r1, r2
 800468a:	f8d9 2000 	ldr.w	r2, [r9]
 800468e:	0c24      	lsrs	r4, r4, #16
 8004690:	0c12      	lsrs	r2, r2, #16
 8004692:	fb0a 2404 	mla	r4, sl, r4, r2
 8004696:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800469a:	b289      	uxth	r1, r1
 800469c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80046a0:	45f4      	cmp	ip, lr
 80046a2:	f849 1b04 	str.w	r1, [r9], #4
 80046a6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80046aa:	d8e4      	bhi.n	8004676 <__multiply+0xaa>
 80046ac:	9901      	ldr	r1, [sp, #4]
 80046ae:	5072      	str	r2, [r6, r1]
 80046b0:	9a03      	ldr	r2, [sp, #12]
 80046b2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80046b6:	3304      	adds	r3, #4
 80046b8:	f1b9 0f00 	cmp.w	r9, #0
 80046bc:	d01f      	beq.n	80046fe <__multiply+0x132>
 80046be:	6834      	ldr	r4, [r6, #0]
 80046c0:	f105 0114 	add.w	r1, r5, #20
 80046c4:	46b6      	mov	lr, r6
 80046c6:	f04f 0a00 	mov.w	sl, #0
 80046ca:	880a      	ldrh	r2, [r1, #0]
 80046cc:	f8be b002 	ldrh.w	fp, [lr, #2]
 80046d0:	fb09 b202 	mla	r2, r9, r2, fp
 80046d4:	4492      	add	sl, r2
 80046d6:	b2a4      	uxth	r4, r4
 80046d8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80046dc:	f84e 4b04 	str.w	r4, [lr], #4
 80046e0:	f851 4b04 	ldr.w	r4, [r1], #4
 80046e4:	f8be 2000 	ldrh.w	r2, [lr]
 80046e8:	0c24      	lsrs	r4, r4, #16
 80046ea:	fb09 2404 	mla	r4, r9, r4, r2
 80046ee:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80046f2:	458c      	cmp	ip, r1
 80046f4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80046f8:	d8e7      	bhi.n	80046ca <__multiply+0xfe>
 80046fa:	9a01      	ldr	r2, [sp, #4]
 80046fc:	50b4      	str	r4, [r6, r2]
 80046fe:	3604      	adds	r6, #4
 8004700:	e7a3      	b.n	800464a <__multiply+0x7e>
 8004702:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1a5      	bne.n	8004656 <__multiply+0x8a>
 800470a:	3f01      	subs	r7, #1
 800470c:	e7a1      	b.n	8004652 <__multiply+0x86>
 800470e:	bf00      	nop
 8004710:	08006bef 	.word	0x08006bef
 8004714:	08006b8f 	.word	0x08006b8f

08004718 <__pow5mult>:
 8004718:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800471c:	4615      	mov	r5, r2
 800471e:	f012 0203 	ands.w	r2, r2, #3
 8004722:	4606      	mov	r6, r0
 8004724:	460f      	mov	r7, r1
 8004726:	d007      	beq.n	8004738 <__pow5mult+0x20>
 8004728:	4c25      	ldr	r4, [pc, #148]	; (80047c0 <__pow5mult+0xa8>)
 800472a:	3a01      	subs	r2, #1
 800472c:	2300      	movs	r3, #0
 800472e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004732:	f7ff fe9b 	bl	800446c <__multadd>
 8004736:	4607      	mov	r7, r0
 8004738:	10ad      	asrs	r5, r5, #2
 800473a:	d03d      	beq.n	80047b8 <__pow5mult+0xa0>
 800473c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800473e:	b97c      	cbnz	r4, 8004760 <__pow5mult+0x48>
 8004740:	2010      	movs	r0, #16
 8004742:	f001 fc0f 	bl	8005f64 <malloc>
 8004746:	4602      	mov	r2, r0
 8004748:	6270      	str	r0, [r6, #36]	; 0x24
 800474a:	b928      	cbnz	r0, 8004758 <__pow5mult+0x40>
 800474c:	4b1d      	ldr	r3, [pc, #116]	; (80047c4 <__pow5mult+0xac>)
 800474e:	481e      	ldr	r0, [pc, #120]	; (80047c8 <__pow5mult+0xb0>)
 8004750:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8004754:	f000 fd5c 	bl	8005210 <__assert_func>
 8004758:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800475c:	6004      	str	r4, [r0, #0]
 800475e:	60c4      	str	r4, [r0, #12]
 8004760:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004764:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004768:	b94c      	cbnz	r4, 800477e <__pow5mult+0x66>
 800476a:	f240 2171 	movw	r1, #625	; 0x271
 800476e:	4630      	mov	r0, r6
 8004770:	f7ff ff16 	bl	80045a0 <__i2b>
 8004774:	2300      	movs	r3, #0
 8004776:	f8c8 0008 	str.w	r0, [r8, #8]
 800477a:	4604      	mov	r4, r0
 800477c:	6003      	str	r3, [r0, #0]
 800477e:	f04f 0900 	mov.w	r9, #0
 8004782:	07eb      	lsls	r3, r5, #31
 8004784:	d50a      	bpl.n	800479c <__pow5mult+0x84>
 8004786:	4639      	mov	r1, r7
 8004788:	4622      	mov	r2, r4
 800478a:	4630      	mov	r0, r6
 800478c:	f7ff ff1e 	bl	80045cc <__multiply>
 8004790:	4639      	mov	r1, r7
 8004792:	4680      	mov	r8, r0
 8004794:	4630      	mov	r0, r6
 8004796:	f7ff fe47 	bl	8004428 <_Bfree>
 800479a:	4647      	mov	r7, r8
 800479c:	106d      	asrs	r5, r5, #1
 800479e:	d00b      	beq.n	80047b8 <__pow5mult+0xa0>
 80047a0:	6820      	ldr	r0, [r4, #0]
 80047a2:	b938      	cbnz	r0, 80047b4 <__pow5mult+0x9c>
 80047a4:	4622      	mov	r2, r4
 80047a6:	4621      	mov	r1, r4
 80047a8:	4630      	mov	r0, r6
 80047aa:	f7ff ff0f 	bl	80045cc <__multiply>
 80047ae:	6020      	str	r0, [r4, #0]
 80047b0:	f8c0 9000 	str.w	r9, [r0]
 80047b4:	4604      	mov	r4, r0
 80047b6:	e7e4      	b.n	8004782 <__pow5mult+0x6a>
 80047b8:	4638      	mov	r0, r7
 80047ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047be:	bf00      	nop
 80047c0:	08006cf0 	.word	0x08006cf0
 80047c4:	08006b78 	.word	0x08006b78
 80047c8:	08006b8f 	.word	0x08006b8f

080047cc <__lshift>:
 80047cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047d0:	460c      	mov	r4, r1
 80047d2:	6849      	ldr	r1, [r1, #4]
 80047d4:	6923      	ldr	r3, [r4, #16]
 80047d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80047da:	68a3      	ldr	r3, [r4, #8]
 80047dc:	4607      	mov	r7, r0
 80047de:	4691      	mov	r9, r2
 80047e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80047e4:	f108 0601 	add.w	r6, r8, #1
 80047e8:	42b3      	cmp	r3, r6
 80047ea:	db0b      	blt.n	8004804 <__lshift+0x38>
 80047ec:	4638      	mov	r0, r7
 80047ee:	f7ff fddb 	bl	80043a8 <_Balloc>
 80047f2:	4605      	mov	r5, r0
 80047f4:	b948      	cbnz	r0, 800480a <__lshift+0x3e>
 80047f6:	4602      	mov	r2, r0
 80047f8:	4b28      	ldr	r3, [pc, #160]	; (800489c <__lshift+0xd0>)
 80047fa:	4829      	ldr	r0, [pc, #164]	; (80048a0 <__lshift+0xd4>)
 80047fc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004800:	f000 fd06 	bl	8005210 <__assert_func>
 8004804:	3101      	adds	r1, #1
 8004806:	005b      	lsls	r3, r3, #1
 8004808:	e7ee      	b.n	80047e8 <__lshift+0x1c>
 800480a:	2300      	movs	r3, #0
 800480c:	f100 0114 	add.w	r1, r0, #20
 8004810:	f100 0210 	add.w	r2, r0, #16
 8004814:	4618      	mov	r0, r3
 8004816:	4553      	cmp	r3, sl
 8004818:	db33      	blt.n	8004882 <__lshift+0xb6>
 800481a:	6920      	ldr	r0, [r4, #16]
 800481c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004820:	f104 0314 	add.w	r3, r4, #20
 8004824:	f019 091f 	ands.w	r9, r9, #31
 8004828:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800482c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004830:	d02b      	beq.n	800488a <__lshift+0xbe>
 8004832:	f1c9 0e20 	rsb	lr, r9, #32
 8004836:	468a      	mov	sl, r1
 8004838:	2200      	movs	r2, #0
 800483a:	6818      	ldr	r0, [r3, #0]
 800483c:	fa00 f009 	lsl.w	r0, r0, r9
 8004840:	4302      	orrs	r2, r0
 8004842:	f84a 2b04 	str.w	r2, [sl], #4
 8004846:	f853 2b04 	ldr.w	r2, [r3], #4
 800484a:	459c      	cmp	ip, r3
 800484c:	fa22 f20e 	lsr.w	r2, r2, lr
 8004850:	d8f3      	bhi.n	800483a <__lshift+0x6e>
 8004852:	ebac 0304 	sub.w	r3, ip, r4
 8004856:	3b15      	subs	r3, #21
 8004858:	f023 0303 	bic.w	r3, r3, #3
 800485c:	3304      	adds	r3, #4
 800485e:	f104 0015 	add.w	r0, r4, #21
 8004862:	4584      	cmp	ip, r0
 8004864:	bf38      	it	cc
 8004866:	2304      	movcc	r3, #4
 8004868:	50ca      	str	r2, [r1, r3]
 800486a:	b10a      	cbz	r2, 8004870 <__lshift+0xa4>
 800486c:	f108 0602 	add.w	r6, r8, #2
 8004870:	3e01      	subs	r6, #1
 8004872:	4638      	mov	r0, r7
 8004874:	612e      	str	r6, [r5, #16]
 8004876:	4621      	mov	r1, r4
 8004878:	f7ff fdd6 	bl	8004428 <_Bfree>
 800487c:	4628      	mov	r0, r5
 800487e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004882:	f842 0f04 	str.w	r0, [r2, #4]!
 8004886:	3301      	adds	r3, #1
 8004888:	e7c5      	b.n	8004816 <__lshift+0x4a>
 800488a:	3904      	subs	r1, #4
 800488c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004890:	f841 2f04 	str.w	r2, [r1, #4]!
 8004894:	459c      	cmp	ip, r3
 8004896:	d8f9      	bhi.n	800488c <__lshift+0xc0>
 8004898:	e7ea      	b.n	8004870 <__lshift+0xa4>
 800489a:	bf00      	nop
 800489c:	08006bef 	.word	0x08006bef
 80048a0:	08006b8f 	.word	0x08006b8f

080048a4 <__mcmp>:
 80048a4:	b530      	push	{r4, r5, lr}
 80048a6:	6902      	ldr	r2, [r0, #16]
 80048a8:	690c      	ldr	r4, [r1, #16]
 80048aa:	1b12      	subs	r2, r2, r4
 80048ac:	d10e      	bne.n	80048cc <__mcmp+0x28>
 80048ae:	f100 0314 	add.w	r3, r0, #20
 80048b2:	3114      	adds	r1, #20
 80048b4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80048b8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80048bc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80048c0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80048c4:	42a5      	cmp	r5, r4
 80048c6:	d003      	beq.n	80048d0 <__mcmp+0x2c>
 80048c8:	d305      	bcc.n	80048d6 <__mcmp+0x32>
 80048ca:	2201      	movs	r2, #1
 80048cc:	4610      	mov	r0, r2
 80048ce:	bd30      	pop	{r4, r5, pc}
 80048d0:	4283      	cmp	r3, r0
 80048d2:	d3f3      	bcc.n	80048bc <__mcmp+0x18>
 80048d4:	e7fa      	b.n	80048cc <__mcmp+0x28>
 80048d6:	f04f 32ff 	mov.w	r2, #4294967295
 80048da:	e7f7      	b.n	80048cc <__mcmp+0x28>

080048dc <__mdiff>:
 80048dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048e0:	460c      	mov	r4, r1
 80048e2:	4606      	mov	r6, r0
 80048e4:	4611      	mov	r1, r2
 80048e6:	4620      	mov	r0, r4
 80048e8:	4617      	mov	r7, r2
 80048ea:	f7ff ffdb 	bl	80048a4 <__mcmp>
 80048ee:	1e05      	subs	r5, r0, #0
 80048f0:	d110      	bne.n	8004914 <__mdiff+0x38>
 80048f2:	4629      	mov	r1, r5
 80048f4:	4630      	mov	r0, r6
 80048f6:	f7ff fd57 	bl	80043a8 <_Balloc>
 80048fa:	b930      	cbnz	r0, 800490a <__mdiff+0x2e>
 80048fc:	4b39      	ldr	r3, [pc, #228]	; (80049e4 <__mdiff+0x108>)
 80048fe:	4602      	mov	r2, r0
 8004900:	f240 2132 	movw	r1, #562	; 0x232
 8004904:	4838      	ldr	r0, [pc, #224]	; (80049e8 <__mdiff+0x10c>)
 8004906:	f000 fc83 	bl	8005210 <__assert_func>
 800490a:	2301      	movs	r3, #1
 800490c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004910:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004914:	bfa4      	itt	ge
 8004916:	463b      	movge	r3, r7
 8004918:	4627      	movge	r7, r4
 800491a:	4630      	mov	r0, r6
 800491c:	6879      	ldr	r1, [r7, #4]
 800491e:	bfa6      	itte	ge
 8004920:	461c      	movge	r4, r3
 8004922:	2500      	movge	r5, #0
 8004924:	2501      	movlt	r5, #1
 8004926:	f7ff fd3f 	bl	80043a8 <_Balloc>
 800492a:	b920      	cbnz	r0, 8004936 <__mdiff+0x5a>
 800492c:	4b2d      	ldr	r3, [pc, #180]	; (80049e4 <__mdiff+0x108>)
 800492e:	4602      	mov	r2, r0
 8004930:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004934:	e7e6      	b.n	8004904 <__mdiff+0x28>
 8004936:	693e      	ldr	r6, [r7, #16]
 8004938:	60c5      	str	r5, [r0, #12]
 800493a:	6925      	ldr	r5, [r4, #16]
 800493c:	f107 0114 	add.w	r1, r7, #20
 8004940:	f104 0914 	add.w	r9, r4, #20
 8004944:	f100 0e14 	add.w	lr, r0, #20
 8004948:	f107 0210 	add.w	r2, r7, #16
 800494c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8004950:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8004954:	46f2      	mov	sl, lr
 8004956:	2700      	movs	r7, #0
 8004958:	f859 3b04 	ldr.w	r3, [r9], #4
 800495c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8004960:	fa1f f883 	uxth.w	r8, r3
 8004964:	fa17 f78b 	uxtah	r7, r7, fp
 8004968:	0c1b      	lsrs	r3, r3, #16
 800496a:	eba7 0808 	sub.w	r8, r7, r8
 800496e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004972:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8004976:	fa1f f888 	uxth.w	r8, r8
 800497a:	141f      	asrs	r7, r3, #16
 800497c:	454d      	cmp	r5, r9
 800497e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8004982:	f84a 3b04 	str.w	r3, [sl], #4
 8004986:	d8e7      	bhi.n	8004958 <__mdiff+0x7c>
 8004988:	1b2b      	subs	r3, r5, r4
 800498a:	3b15      	subs	r3, #21
 800498c:	f023 0303 	bic.w	r3, r3, #3
 8004990:	3304      	adds	r3, #4
 8004992:	3415      	adds	r4, #21
 8004994:	42a5      	cmp	r5, r4
 8004996:	bf38      	it	cc
 8004998:	2304      	movcc	r3, #4
 800499a:	4419      	add	r1, r3
 800499c:	4473      	add	r3, lr
 800499e:	469e      	mov	lr, r3
 80049a0:	460d      	mov	r5, r1
 80049a2:	4565      	cmp	r5, ip
 80049a4:	d30e      	bcc.n	80049c4 <__mdiff+0xe8>
 80049a6:	f10c 0203 	add.w	r2, ip, #3
 80049aa:	1a52      	subs	r2, r2, r1
 80049ac:	f022 0203 	bic.w	r2, r2, #3
 80049b0:	3903      	subs	r1, #3
 80049b2:	458c      	cmp	ip, r1
 80049b4:	bf38      	it	cc
 80049b6:	2200      	movcc	r2, #0
 80049b8:	441a      	add	r2, r3
 80049ba:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80049be:	b17b      	cbz	r3, 80049e0 <__mdiff+0x104>
 80049c0:	6106      	str	r6, [r0, #16]
 80049c2:	e7a5      	b.n	8004910 <__mdiff+0x34>
 80049c4:	f855 8b04 	ldr.w	r8, [r5], #4
 80049c8:	fa17 f488 	uxtah	r4, r7, r8
 80049cc:	1422      	asrs	r2, r4, #16
 80049ce:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80049d2:	b2a4      	uxth	r4, r4
 80049d4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80049d8:	f84e 4b04 	str.w	r4, [lr], #4
 80049dc:	1417      	asrs	r7, r2, #16
 80049de:	e7e0      	b.n	80049a2 <__mdiff+0xc6>
 80049e0:	3e01      	subs	r6, #1
 80049e2:	e7ea      	b.n	80049ba <__mdiff+0xde>
 80049e4:	08006bef 	.word	0x08006bef
 80049e8:	08006b8f 	.word	0x08006b8f

080049ec <__d2b>:
 80049ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80049f0:	4689      	mov	r9, r1
 80049f2:	2101      	movs	r1, #1
 80049f4:	ec57 6b10 	vmov	r6, r7, d0
 80049f8:	4690      	mov	r8, r2
 80049fa:	f7ff fcd5 	bl	80043a8 <_Balloc>
 80049fe:	4604      	mov	r4, r0
 8004a00:	b930      	cbnz	r0, 8004a10 <__d2b+0x24>
 8004a02:	4602      	mov	r2, r0
 8004a04:	4b25      	ldr	r3, [pc, #148]	; (8004a9c <__d2b+0xb0>)
 8004a06:	4826      	ldr	r0, [pc, #152]	; (8004aa0 <__d2b+0xb4>)
 8004a08:	f240 310a 	movw	r1, #778	; 0x30a
 8004a0c:	f000 fc00 	bl	8005210 <__assert_func>
 8004a10:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8004a14:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004a18:	bb35      	cbnz	r5, 8004a68 <__d2b+0x7c>
 8004a1a:	2e00      	cmp	r6, #0
 8004a1c:	9301      	str	r3, [sp, #4]
 8004a1e:	d028      	beq.n	8004a72 <__d2b+0x86>
 8004a20:	4668      	mov	r0, sp
 8004a22:	9600      	str	r6, [sp, #0]
 8004a24:	f7ff fd8c 	bl	8004540 <__lo0bits>
 8004a28:	9900      	ldr	r1, [sp, #0]
 8004a2a:	b300      	cbz	r0, 8004a6e <__d2b+0x82>
 8004a2c:	9a01      	ldr	r2, [sp, #4]
 8004a2e:	f1c0 0320 	rsb	r3, r0, #32
 8004a32:	fa02 f303 	lsl.w	r3, r2, r3
 8004a36:	430b      	orrs	r3, r1
 8004a38:	40c2      	lsrs	r2, r0
 8004a3a:	6163      	str	r3, [r4, #20]
 8004a3c:	9201      	str	r2, [sp, #4]
 8004a3e:	9b01      	ldr	r3, [sp, #4]
 8004a40:	61a3      	str	r3, [r4, #24]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	bf14      	ite	ne
 8004a46:	2202      	movne	r2, #2
 8004a48:	2201      	moveq	r2, #1
 8004a4a:	6122      	str	r2, [r4, #16]
 8004a4c:	b1d5      	cbz	r5, 8004a84 <__d2b+0x98>
 8004a4e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8004a52:	4405      	add	r5, r0
 8004a54:	f8c9 5000 	str.w	r5, [r9]
 8004a58:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004a5c:	f8c8 0000 	str.w	r0, [r8]
 8004a60:	4620      	mov	r0, r4
 8004a62:	b003      	add	sp, #12
 8004a64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004a68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a6c:	e7d5      	b.n	8004a1a <__d2b+0x2e>
 8004a6e:	6161      	str	r1, [r4, #20]
 8004a70:	e7e5      	b.n	8004a3e <__d2b+0x52>
 8004a72:	a801      	add	r0, sp, #4
 8004a74:	f7ff fd64 	bl	8004540 <__lo0bits>
 8004a78:	9b01      	ldr	r3, [sp, #4]
 8004a7a:	6163      	str	r3, [r4, #20]
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	6122      	str	r2, [r4, #16]
 8004a80:	3020      	adds	r0, #32
 8004a82:	e7e3      	b.n	8004a4c <__d2b+0x60>
 8004a84:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004a88:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004a8c:	f8c9 0000 	str.w	r0, [r9]
 8004a90:	6918      	ldr	r0, [r3, #16]
 8004a92:	f7ff fd35 	bl	8004500 <__hi0bits>
 8004a96:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8004a9a:	e7df      	b.n	8004a5c <__d2b+0x70>
 8004a9c:	08006bef 	.word	0x08006bef
 8004aa0:	08006b8f 	.word	0x08006b8f

08004aa4 <_mprec_log10>:
 8004aa4:	2817      	cmp	r0, #23
 8004aa6:	b5d0      	push	{r4, r6, r7, lr}
 8004aa8:	4604      	mov	r4, r0
 8004aaa:	dc07      	bgt.n	8004abc <_mprec_log10+0x18>
 8004aac:	4809      	ldr	r0, [pc, #36]	; (8004ad4 <_mprec_log10+0x30>)
 8004aae:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8004ab2:	e9d4 0100 	ldrd	r0, r1, [r4]
 8004ab6:	ec41 0b10 	vmov	d0, r0, r1
 8004aba:	bdd0      	pop	{r4, r6, r7, pc}
 8004abc:	4906      	ldr	r1, [pc, #24]	; (8004ad8 <_mprec_log10+0x34>)
 8004abe:	4f07      	ldr	r7, [pc, #28]	; (8004adc <_mprec_log10+0x38>)
 8004ac0:	2000      	movs	r0, #0
 8004ac2:	2600      	movs	r6, #0
 8004ac4:	4632      	mov	r2, r6
 8004ac6:	463b      	mov	r3, r7
 8004ac8:	f7fb fd96 	bl	80005f8 <__aeabi_dmul>
 8004acc:	3c01      	subs	r4, #1
 8004ace:	d1f9      	bne.n	8004ac4 <_mprec_log10+0x20>
 8004ad0:	e7f1      	b.n	8004ab6 <_mprec_log10+0x12>
 8004ad2:	bf00      	nop
 8004ad4:	08006c28 	.word	0x08006c28
 8004ad8:	3ff00000 	.word	0x3ff00000
 8004adc:	40240000 	.word	0x40240000

08004ae0 <_calloc_r>:
 8004ae0:	b513      	push	{r0, r1, r4, lr}
 8004ae2:	434a      	muls	r2, r1
 8004ae4:	4611      	mov	r1, r2
 8004ae6:	9201      	str	r2, [sp, #4]
 8004ae8:	f000 f80a 	bl	8004b00 <_malloc_r>
 8004aec:	4604      	mov	r4, r0
 8004aee:	b118      	cbz	r0, 8004af8 <_calloc_r+0x18>
 8004af0:	9a01      	ldr	r2, [sp, #4]
 8004af2:	2100      	movs	r1, #0
 8004af4:	f7ff faf8 	bl	80040e8 <memset>
 8004af8:	4620      	mov	r0, r4
 8004afa:	b002      	add	sp, #8
 8004afc:	bd10      	pop	{r4, pc}
	...

08004b00 <_malloc_r>:
 8004b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b02:	1ccd      	adds	r5, r1, #3
 8004b04:	f025 0503 	bic.w	r5, r5, #3
 8004b08:	3508      	adds	r5, #8
 8004b0a:	2d0c      	cmp	r5, #12
 8004b0c:	bf38      	it	cc
 8004b0e:	250c      	movcc	r5, #12
 8004b10:	2d00      	cmp	r5, #0
 8004b12:	4606      	mov	r6, r0
 8004b14:	db01      	blt.n	8004b1a <_malloc_r+0x1a>
 8004b16:	42a9      	cmp	r1, r5
 8004b18:	d903      	bls.n	8004b22 <_malloc_r+0x22>
 8004b1a:	230c      	movs	r3, #12
 8004b1c:	6033      	str	r3, [r6, #0]
 8004b1e:	2000      	movs	r0, #0
 8004b20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b22:	f001 fa4f 	bl	8005fc4 <__malloc_lock>
 8004b26:	4921      	ldr	r1, [pc, #132]	; (8004bac <_malloc_r+0xac>)
 8004b28:	680a      	ldr	r2, [r1, #0]
 8004b2a:	4614      	mov	r4, r2
 8004b2c:	b99c      	cbnz	r4, 8004b56 <_malloc_r+0x56>
 8004b2e:	4f20      	ldr	r7, [pc, #128]	; (8004bb0 <_malloc_r+0xb0>)
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	b923      	cbnz	r3, 8004b3e <_malloc_r+0x3e>
 8004b34:	4621      	mov	r1, r4
 8004b36:	4630      	mov	r0, r6
 8004b38:	f000 fb52 	bl	80051e0 <_sbrk_r>
 8004b3c:	6038      	str	r0, [r7, #0]
 8004b3e:	4629      	mov	r1, r5
 8004b40:	4630      	mov	r0, r6
 8004b42:	f000 fb4d 	bl	80051e0 <_sbrk_r>
 8004b46:	1c43      	adds	r3, r0, #1
 8004b48:	d123      	bne.n	8004b92 <_malloc_r+0x92>
 8004b4a:	230c      	movs	r3, #12
 8004b4c:	6033      	str	r3, [r6, #0]
 8004b4e:	4630      	mov	r0, r6
 8004b50:	f001 fa3e 	bl	8005fd0 <__malloc_unlock>
 8004b54:	e7e3      	b.n	8004b1e <_malloc_r+0x1e>
 8004b56:	6823      	ldr	r3, [r4, #0]
 8004b58:	1b5b      	subs	r3, r3, r5
 8004b5a:	d417      	bmi.n	8004b8c <_malloc_r+0x8c>
 8004b5c:	2b0b      	cmp	r3, #11
 8004b5e:	d903      	bls.n	8004b68 <_malloc_r+0x68>
 8004b60:	6023      	str	r3, [r4, #0]
 8004b62:	441c      	add	r4, r3
 8004b64:	6025      	str	r5, [r4, #0]
 8004b66:	e004      	b.n	8004b72 <_malloc_r+0x72>
 8004b68:	6863      	ldr	r3, [r4, #4]
 8004b6a:	42a2      	cmp	r2, r4
 8004b6c:	bf0c      	ite	eq
 8004b6e:	600b      	streq	r3, [r1, #0]
 8004b70:	6053      	strne	r3, [r2, #4]
 8004b72:	4630      	mov	r0, r6
 8004b74:	f001 fa2c 	bl	8005fd0 <__malloc_unlock>
 8004b78:	f104 000b 	add.w	r0, r4, #11
 8004b7c:	1d23      	adds	r3, r4, #4
 8004b7e:	f020 0007 	bic.w	r0, r0, #7
 8004b82:	1ac2      	subs	r2, r0, r3
 8004b84:	d0cc      	beq.n	8004b20 <_malloc_r+0x20>
 8004b86:	1a1b      	subs	r3, r3, r0
 8004b88:	50a3      	str	r3, [r4, r2]
 8004b8a:	e7c9      	b.n	8004b20 <_malloc_r+0x20>
 8004b8c:	4622      	mov	r2, r4
 8004b8e:	6864      	ldr	r4, [r4, #4]
 8004b90:	e7cc      	b.n	8004b2c <_malloc_r+0x2c>
 8004b92:	1cc4      	adds	r4, r0, #3
 8004b94:	f024 0403 	bic.w	r4, r4, #3
 8004b98:	42a0      	cmp	r0, r4
 8004b9a:	d0e3      	beq.n	8004b64 <_malloc_r+0x64>
 8004b9c:	1a21      	subs	r1, r4, r0
 8004b9e:	4630      	mov	r0, r6
 8004ba0:	f000 fb1e 	bl	80051e0 <_sbrk_r>
 8004ba4:	3001      	adds	r0, #1
 8004ba6:	d1dd      	bne.n	8004b64 <_malloc_r+0x64>
 8004ba8:	e7cf      	b.n	8004b4a <_malloc_r+0x4a>
 8004baa:	bf00      	nop
 8004bac:	20000090 	.word	0x20000090
 8004bb0:	20000094 	.word	0x20000094

08004bb4 <_realloc_r>:
 8004bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bb6:	4607      	mov	r7, r0
 8004bb8:	4614      	mov	r4, r2
 8004bba:	460e      	mov	r6, r1
 8004bbc:	b921      	cbnz	r1, 8004bc8 <_realloc_r+0x14>
 8004bbe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004bc2:	4611      	mov	r1, r2
 8004bc4:	f7ff bf9c 	b.w	8004b00 <_malloc_r>
 8004bc8:	b922      	cbnz	r2, 8004bd4 <_realloc_r+0x20>
 8004bca:	f001 fa07 	bl	8005fdc <_free_r>
 8004bce:	4625      	mov	r5, r4
 8004bd0:	4628      	mov	r0, r5
 8004bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bd4:	f001 fa52 	bl	800607c <_malloc_usable_size_r>
 8004bd8:	42a0      	cmp	r0, r4
 8004bda:	d20f      	bcs.n	8004bfc <_realloc_r+0x48>
 8004bdc:	4621      	mov	r1, r4
 8004bde:	4638      	mov	r0, r7
 8004be0:	f7ff ff8e 	bl	8004b00 <_malloc_r>
 8004be4:	4605      	mov	r5, r0
 8004be6:	2800      	cmp	r0, #0
 8004be8:	d0f2      	beq.n	8004bd0 <_realloc_r+0x1c>
 8004bea:	4631      	mov	r1, r6
 8004bec:	4622      	mov	r2, r4
 8004bee:	f001 f9c1 	bl	8005f74 <memcpy>
 8004bf2:	4631      	mov	r1, r6
 8004bf4:	4638      	mov	r0, r7
 8004bf6:	f001 f9f1 	bl	8005fdc <_free_r>
 8004bfa:	e7e9      	b.n	8004bd0 <_realloc_r+0x1c>
 8004bfc:	4635      	mov	r5, r6
 8004bfe:	e7e7      	b.n	8004bd0 <_realloc_r+0x1c>

08004c00 <__ssputs_r>:
 8004c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c04:	688e      	ldr	r6, [r1, #8]
 8004c06:	429e      	cmp	r6, r3
 8004c08:	4682      	mov	sl, r0
 8004c0a:	460c      	mov	r4, r1
 8004c0c:	4690      	mov	r8, r2
 8004c0e:	461f      	mov	r7, r3
 8004c10:	d838      	bhi.n	8004c84 <__ssputs_r+0x84>
 8004c12:	898a      	ldrh	r2, [r1, #12]
 8004c14:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004c18:	d032      	beq.n	8004c80 <__ssputs_r+0x80>
 8004c1a:	6825      	ldr	r5, [r4, #0]
 8004c1c:	6909      	ldr	r1, [r1, #16]
 8004c1e:	eba5 0901 	sub.w	r9, r5, r1
 8004c22:	6965      	ldr	r5, [r4, #20]
 8004c24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004c28:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004c2c:	3301      	adds	r3, #1
 8004c2e:	444b      	add	r3, r9
 8004c30:	106d      	asrs	r5, r5, #1
 8004c32:	429d      	cmp	r5, r3
 8004c34:	bf38      	it	cc
 8004c36:	461d      	movcc	r5, r3
 8004c38:	0553      	lsls	r3, r2, #21
 8004c3a:	d531      	bpl.n	8004ca0 <__ssputs_r+0xa0>
 8004c3c:	4629      	mov	r1, r5
 8004c3e:	f7ff ff5f 	bl	8004b00 <_malloc_r>
 8004c42:	4606      	mov	r6, r0
 8004c44:	b950      	cbnz	r0, 8004c5c <__ssputs_r+0x5c>
 8004c46:	230c      	movs	r3, #12
 8004c48:	f8ca 3000 	str.w	r3, [sl]
 8004c4c:	89a3      	ldrh	r3, [r4, #12]
 8004c4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c52:	81a3      	strh	r3, [r4, #12]
 8004c54:	f04f 30ff 	mov.w	r0, #4294967295
 8004c58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c5c:	6921      	ldr	r1, [r4, #16]
 8004c5e:	464a      	mov	r2, r9
 8004c60:	f001 f988 	bl	8005f74 <memcpy>
 8004c64:	89a3      	ldrh	r3, [r4, #12]
 8004c66:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004c6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c6e:	81a3      	strh	r3, [r4, #12]
 8004c70:	6126      	str	r6, [r4, #16]
 8004c72:	6165      	str	r5, [r4, #20]
 8004c74:	444e      	add	r6, r9
 8004c76:	eba5 0509 	sub.w	r5, r5, r9
 8004c7a:	6026      	str	r6, [r4, #0]
 8004c7c:	60a5      	str	r5, [r4, #8]
 8004c7e:	463e      	mov	r6, r7
 8004c80:	42be      	cmp	r6, r7
 8004c82:	d900      	bls.n	8004c86 <__ssputs_r+0x86>
 8004c84:	463e      	mov	r6, r7
 8004c86:	4632      	mov	r2, r6
 8004c88:	6820      	ldr	r0, [r4, #0]
 8004c8a:	4641      	mov	r1, r8
 8004c8c:	f001 f980 	bl	8005f90 <memmove>
 8004c90:	68a3      	ldr	r3, [r4, #8]
 8004c92:	6822      	ldr	r2, [r4, #0]
 8004c94:	1b9b      	subs	r3, r3, r6
 8004c96:	4432      	add	r2, r6
 8004c98:	60a3      	str	r3, [r4, #8]
 8004c9a:	6022      	str	r2, [r4, #0]
 8004c9c:	2000      	movs	r0, #0
 8004c9e:	e7db      	b.n	8004c58 <__ssputs_r+0x58>
 8004ca0:	462a      	mov	r2, r5
 8004ca2:	f7ff ff87 	bl	8004bb4 <_realloc_r>
 8004ca6:	4606      	mov	r6, r0
 8004ca8:	2800      	cmp	r0, #0
 8004caa:	d1e1      	bne.n	8004c70 <__ssputs_r+0x70>
 8004cac:	6921      	ldr	r1, [r4, #16]
 8004cae:	4650      	mov	r0, sl
 8004cb0:	f001 f994 	bl	8005fdc <_free_r>
 8004cb4:	e7c7      	b.n	8004c46 <__ssputs_r+0x46>
	...

08004cb8 <_svfiprintf_r>:
 8004cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cbc:	4698      	mov	r8, r3
 8004cbe:	898b      	ldrh	r3, [r1, #12]
 8004cc0:	061b      	lsls	r3, r3, #24
 8004cc2:	b09d      	sub	sp, #116	; 0x74
 8004cc4:	4607      	mov	r7, r0
 8004cc6:	460d      	mov	r5, r1
 8004cc8:	4614      	mov	r4, r2
 8004cca:	d50e      	bpl.n	8004cea <_svfiprintf_r+0x32>
 8004ccc:	690b      	ldr	r3, [r1, #16]
 8004cce:	b963      	cbnz	r3, 8004cea <_svfiprintf_r+0x32>
 8004cd0:	2140      	movs	r1, #64	; 0x40
 8004cd2:	f7ff ff15 	bl	8004b00 <_malloc_r>
 8004cd6:	6028      	str	r0, [r5, #0]
 8004cd8:	6128      	str	r0, [r5, #16]
 8004cda:	b920      	cbnz	r0, 8004ce6 <_svfiprintf_r+0x2e>
 8004cdc:	230c      	movs	r3, #12
 8004cde:	603b      	str	r3, [r7, #0]
 8004ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ce4:	e0d1      	b.n	8004e8a <_svfiprintf_r+0x1d2>
 8004ce6:	2340      	movs	r3, #64	; 0x40
 8004ce8:	616b      	str	r3, [r5, #20]
 8004cea:	2300      	movs	r3, #0
 8004cec:	9309      	str	r3, [sp, #36]	; 0x24
 8004cee:	2320      	movs	r3, #32
 8004cf0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004cf4:	f8cd 800c 	str.w	r8, [sp, #12]
 8004cf8:	2330      	movs	r3, #48	; 0x30
 8004cfa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004ea4 <_svfiprintf_r+0x1ec>
 8004cfe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004d02:	f04f 0901 	mov.w	r9, #1
 8004d06:	4623      	mov	r3, r4
 8004d08:	469a      	mov	sl, r3
 8004d0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d0e:	b10a      	cbz	r2, 8004d14 <_svfiprintf_r+0x5c>
 8004d10:	2a25      	cmp	r2, #37	; 0x25
 8004d12:	d1f9      	bne.n	8004d08 <_svfiprintf_r+0x50>
 8004d14:	ebba 0b04 	subs.w	fp, sl, r4
 8004d18:	d00b      	beq.n	8004d32 <_svfiprintf_r+0x7a>
 8004d1a:	465b      	mov	r3, fp
 8004d1c:	4622      	mov	r2, r4
 8004d1e:	4629      	mov	r1, r5
 8004d20:	4638      	mov	r0, r7
 8004d22:	f7ff ff6d 	bl	8004c00 <__ssputs_r>
 8004d26:	3001      	adds	r0, #1
 8004d28:	f000 80aa 	beq.w	8004e80 <_svfiprintf_r+0x1c8>
 8004d2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d2e:	445a      	add	r2, fp
 8004d30:	9209      	str	r2, [sp, #36]	; 0x24
 8004d32:	f89a 3000 	ldrb.w	r3, [sl]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	f000 80a2 	beq.w	8004e80 <_svfiprintf_r+0x1c8>
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	f04f 32ff 	mov.w	r2, #4294967295
 8004d42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d46:	f10a 0a01 	add.w	sl, sl, #1
 8004d4a:	9304      	str	r3, [sp, #16]
 8004d4c:	9307      	str	r3, [sp, #28]
 8004d4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004d52:	931a      	str	r3, [sp, #104]	; 0x68
 8004d54:	4654      	mov	r4, sl
 8004d56:	2205      	movs	r2, #5
 8004d58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d5c:	4851      	ldr	r0, [pc, #324]	; (8004ea4 <_svfiprintf_r+0x1ec>)
 8004d5e:	f7fb fa3f 	bl	80001e0 <memchr>
 8004d62:	9a04      	ldr	r2, [sp, #16]
 8004d64:	b9d8      	cbnz	r0, 8004d9e <_svfiprintf_r+0xe6>
 8004d66:	06d0      	lsls	r0, r2, #27
 8004d68:	bf44      	itt	mi
 8004d6a:	2320      	movmi	r3, #32
 8004d6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d70:	0711      	lsls	r1, r2, #28
 8004d72:	bf44      	itt	mi
 8004d74:	232b      	movmi	r3, #43	; 0x2b
 8004d76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d7a:	f89a 3000 	ldrb.w	r3, [sl]
 8004d7e:	2b2a      	cmp	r3, #42	; 0x2a
 8004d80:	d015      	beq.n	8004dae <_svfiprintf_r+0xf6>
 8004d82:	9a07      	ldr	r2, [sp, #28]
 8004d84:	4654      	mov	r4, sl
 8004d86:	2000      	movs	r0, #0
 8004d88:	f04f 0c0a 	mov.w	ip, #10
 8004d8c:	4621      	mov	r1, r4
 8004d8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d92:	3b30      	subs	r3, #48	; 0x30
 8004d94:	2b09      	cmp	r3, #9
 8004d96:	d94e      	bls.n	8004e36 <_svfiprintf_r+0x17e>
 8004d98:	b1b0      	cbz	r0, 8004dc8 <_svfiprintf_r+0x110>
 8004d9a:	9207      	str	r2, [sp, #28]
 8004d9c:	e014      	b.n	8004dc8 <_svfiprintf_r+0x110>
 8004d9e:	eba0 0308 	sub.w	r3, r0, r8
 8004da2:	fa09 f303 	lsl.w	r3, r9, r3
 8004da6:	4313      	orrs	r3, r2
 8004da8:	9304      	str	r3, [sp, #16]
 8004daa:	46a2      	mov	sl, r4
 8004dac:	e7d2      	b.n	8004d54 <_svfiprintf_r+0x9c>
 8004dae:	9b03      	ldr	r3, [sp, #12]
 8004db0:	1d19      	adds	r1, r3, #4
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	9103      	str	r1, [sp, #12]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	bfbb      	ittet	lt
 8004dba:	425b      	neglt	r3, r3
 8004dbc:	f042 0202 	orrlt.w	r2, r2, #2
 8004dc0:	9307      	strge	r3, [sp, #28]
 8004dc2:	9307      	strlt	r3, [sp, #28]
 8004dc4:	bfb8      	it	lt
 8004dc6:	9204      	strlt	r2, [sp, #16]
 8004dc8:	7823      	ldrb	r3, [r4, #0]
 8004dca:	2b2e      	cmp	r3, #46	; 0x2e
 8004dcc:	d10c      	bne.n	8004de8 <_svfiprintf_r+0x130>
 8004dce:	7863      	ldrb	r3, [r4, #1]
 8004dd0:	2b2a      	cmp	r3, #42	; 0x2a
 8004dd2:	d135      	bne.n	8004e40 <_svfiprintf_r+0x188>
 8004dd4:	9b03      	ldr	r3, [sp, #12]
 8004dd6:	1d1a      	adds	r2, r3, #4
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	9203      	str	r2, [sp, #12]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	bfb8      	it	lt
 8004de0:	f04f 33ff 	movlt.w	r3, #4294967295
 8004de4:	3402      	adds	r4, #2
 8004de6:	9305      	str	r3, [sp, #20]
 8004de8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004eb4 <_svfiprintf_r+0x1fc>
 8004dec:	7821      	ldrb	r1, [r4, #0]
 8004dee:	2203      	movs	r2, #3
 8004df0:	4650      	mov	r0, sl
 8004df2:	f7fb f9f5 	bl	80001e0 <memchr>
 8004df6:	b140      	cbz	r0, 8004e0a <_svfiprintf_r+0x152>
 8004df8:	2340      	movs	r3, #64	; 0x40
 8004dfa:	eba0 000a 	sub.w	r0, r0, sl
 8004dfe:	fa03 f000 	lsl.w	r0, r3, r0
 8004e02:	9b04      	ldr	r3, [sp, #16]
 8004e04:	4303      	orrs	r3, r0
 8004e06:	3401      	adds	r4, #1
 8004e08:	9304      	str	r3, [sp, #16]
 8004e0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e0e:	4826      	ldr	r0, [pc, #152]	; (8004ea8 <_svfiprintf_r+0x1f0>)
 8004e10:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004e14:	2206      	movs	r2, #6
 8004e16:	f7fb f9e3 	bl	80001e0 <memchr>
 8004e1a:	2800      	cmp	r0, #0
 8004e1c:	d038      	beq.n	8004e90 <_svfiprintf_r+0x1d8>
 8004e1e:	4b23      	ldr	r3, [pc, #140]	; (8004eac <_svfiprintf_r+0x1f4>)
 8004e20:	bb1b      	cbnz	r3, 8004e6a <_svfiprintf_r+0x1b2>
 8004e22:	9b03      	ldr	r3, [sp, #12]
 8004e24:	3307      	adds	r3, #7
 8004e26:	f023 0307 	bic.w	r3, r3, #7
 8004e2a:	3308      	adds	r3, #8
 8004e2c:	9303      	str	r3, [sp, #12]
 8004e2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e30:	4433      	add	r3, r6
 8004e32:	9309      	str	r3, [sp, #36]	; 0x24
 8004e34:	e767      	b.n	8004d06 <_svfiprintf_r+0x4e>
 8004e36:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e3a:	460c      	mov	r4, r1
 8004e3c:	2001      	movs	r0, #1
 8004e3e:	e7a5      	b.n	8004d8c <_svfiprintf_r+0xd4>
 8004e40:	2300      	movs	r3, #0
 8004e42:	3401      	adds	r4, #1
 8004e44:	9305      	str	r3, [sp, #20]
 8004e46:	4619      	mov	r1, r3
 8004e48:	f04f 0c0a 	mov.w	ip, #10
 8004e4c:	4620      	mov	r0, r4
 8004e4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e52:	3a30      	subs	r2, #48	; 0x30
 8004e54:	2a09      	cmp	r2, #9
 8004e56:	d903      	bls.n	8004e60 <_svfiprintf_r+0x1a8>
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d0c5      	beq.n	8004de8 <_svfiprintf_r+0x130>
 8004e5c:	9105      	str	r1, [sp, #20]
 8004e5e:	e7c3      	b.n	8004de8 <_svfiprintf_r+0x130>
 8004e60:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e64:	4604      	mov	r4, r0
 8004e66:	2301      	movs	r3, #1
 8004e68:	e7f0      	b.n	8004e4c <_svfiprintf_r+0x194>
 8004e6a:	ab03      	add	r3, sp, #12
 8004e6c:	9300      	str	r3, [sp, #0]
 8004e6e:	462a      	mov	r2, r5
 8004e70:	4b0f      	ldr	r3, [pc, #60]	; (8004eb0 <_svfiprintf_r+0x1f8>)
 8004e72:	a904      	add	r1, sp, #16
 8004e74:	4638      	mov	r0, r7
 8004e76:	f3af 8000 	nop.w
 8004e7a:	1c42      	adds	r2, r0, #1
 8004e7c:	4606      	mov	r6, r0
 8004e7e:	d1d6      	bne.n	8004e2e <_svfiprintf_r+0x176>
 8004e80:	89ab      	ldrh	r3, [r5, #12]
 8004e82:	065b      	lsls	r3, r3, #25
 8004e84:	f53f af2c 	bmi.w	8004ce0 <_svfiprintf_r+0x28>
 8004e88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004e8a:	b01d      	add	sp, #116	; 0x74
 8004e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e90:	ab03      	add	r3, sp, #12
 8004e92:	9300      	str	r3, [sp, #0]
 8004e94:	462a      	mov	r2, r5
 8004e96:	4b06      	ldr	r3, [pc, #24]	; (8004eb0 <_svfiprintf_r+0x1f8>)
 8004e98:	a904      	add	r1, sp, #16
 8004e9a:	4638      	mov	r0, r7
 8004e9c:	f000 f87a 	bl	8004f94 <_printf_i>
 8004ea0:	e7eb      	b.n	8004e7a <_svfiprintf_r+0x1c2>
 8004ea2:	bf00      	nop
 8004ea4:	08006cfc 	.word	0x08006cfc
 8004ea8:	08006d06 	.word	0x08006d06
 8004eac:	00000000 	.word	0x00000000
 8004eb0:	08004c01 	.word	0x08004c01
 8004eb4:	08006d02 	.word	0x08006d02

08004eb8 <_printf_common>:
 8004eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ebc:	4616      	mov	r6, r2
 8004ebe:	4699      	mov	r9, r3
 8004ec0:	688a      	ldr	r2, [r1, #8]
 8004ec2:	690b      	ldr	r3, [r1, #16]
 8004ec4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	bfb8      	it	lt
 8004ecc:	4613      	movlt	r3, r2
 8004ece:	6033      	str	r3, [r6, #0]
 8004ed0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ed4:	4607      	mov	r7, r0
 8004ed6:	460c      	mov	r4, r1
 8004ed8:	b10a      	cbz	r2, 8004ede <_printf_common+0x26>
 8004eda:	3301      	adds	r3, #1
 8004edc:	6033      	str	r3, [r6, #0]
 8004ede:	6823      	ldr	r3, [r4, #0]
 8004ee0:	0699      	lsls	r1, r3, #26
 8004ee2:	bf42      	ittt	mi
 8004ee4:	6833      	ldrmi	r3, [r6, #0]
 8004ee6:	3302      	addmi	r3, #2
 8004ee8:	6033      	strmi	r3, [r6, #0]
 8004eea:	6825      	ldr	r5, [r4, #0]
 8004eec:	f015 0506 	ands.w	r5, r5, #6
 8004ef0:	d106      	bne.n	8004f00 <_printf_common+0x48>
 8004ef2:	f104 0a19 	add.w	sl, r4, #25
 8004ef6:	68e3      	ldr	r3, [r4, #12]
 8004ef8:	6832      	ldr	r2, [r6, #0]
 8004efa:	1a9b      	subs	r3, r3, r2
 8004efc:	42ab      	cmp	r3, r5
 8004efe:	dc26      	bgt.n	8004f4e <_printf_common+0x96>
 8004f00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004f04:	1e13      	subs	r3, r2, #0
 8004f06:	6822      	ldr	r2, [r4, #0]
 8004f08:	bf18      	it	ne
 8004f0a:	2301      	movne	r3, #1
 8004f0c:	0692      	lsls	r2, r2, #26
 8004f0e:	d42b      	bmi.n	8004f68 <_printf_common+0xb0>
 8004f10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f14:	4649      	mov	r1, r9
 8004f16:	4638      	mov	r0, r7
 8004f18:	47c0      	blx	r8
 8004f1a:	3001      	adds	r0, #1
 8004f1c:	d01e      	beq.n	8004f5c <_printf_common+0xa4>
 8004f1e:	6823      	ldr	r3, [r4, #0]
 8004f20:	68e5      	ldr	r5, [r4, #12]
 8004f22:	6832      	ldr	r2, [r6, #0]
 8004f24:	f003 0306 	and.w	r3, r3, #6
 8004f28:	2b04      	cmp	r3, #4
 8004f2a:	bf08      	it	eq
 8004f2c:	1aad      	subeq	r5, r5, r2
 8004f2e:	68a3      	ldr	r3, [r4, #8]
 8004f30:	6922      	ldr	r2, [r4, #16]
 8004f32:	bf0c      	ite	eq
 8004f34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f38:	2500      	movne	r5, #0
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	bfc4      	itt	gt
 8004f3e:	1a9b      	subgt	r3, r3, r2
 8004f40:	18ed      	addgt	r5, r5, r3
 8004f42:	2600      	movs	r6, #0
 8004f44:	341a      	adds	r4, #26
 8004f46:	42b5      	cmp	r5, r6
 8004f48:	d11a      	bne.n	8004f80 <_printf_common+0xc8>
 8004f4a:	2000      	movs	r0, #0
 8004f4c:	e008      	b.n	8004f60 <_printf_common+0xa8>
 8004f4e:	2301      	movs	r3, #1
 8004f50:	4652      	mov	r2, sl
 8004f52:	4649      	mov	r1, r9
 8004f54:	4638      	mov	r0, r7
 8004f56:	47c0      	blx	r8
 8004f58:	3001      	adds	r0, #1
 8004f5a:	d103      	bne.n	8004f64 <_printf_common+0xac>
 8004f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f64:	3501      	adds	r5, #1
 8004f66:	e7c6      	b.n	8004ef6 <_printf_common+0x3e>
 8004f68:	18e1      	adds	r1, r4, r3
 8004f6a:	1c5a      	adds	r2, r3, #1
 8004f6c:	2030      	movs	r0, #48	; 0x30
 8004f6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f72:	4422      	add	r2, r4
 8004f74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f7c:	3302      	adds	r3, #2
 8004f7e:	e7c7      	b.n	8004f10 <_printf_common+0x58>
 8004f80:	2301      	movs	r3, #1
 8004f82:	4622      	mov	r2, r4
 8004f84:	4649      	mov	r1, r9
 8004f86:	4638      	mov	r0, r7
 8004f88:	47c0      	blx	r8
 8004f8a:	3001      	adds	r0, #1
 8004f8c:	d0e6      	beq.n	8004f5c <_printf_common+0xa4>
 8004f8e:	3601      	adds	r6, #1
 8004f90:	e7d9      	b.n	8004f46 <_printf_common+0x8e>
	...

08004f94 <_printf_i>:
 8004f94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f98:	460c      	mov	r4, r1
 8004f9a:	4691      	mov	r9, r2
 8004f9c:	7e27      	ldrb	r7, [r4, #24]
 8004f9e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004fa0:	2f78      	cmp	r7, #120	; 0x78
 8004fa2:	4680      	mov	r8, r0
 8004fa4:	469a      	mov	sl, r3
 8004fa6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004faa:	d807      	bhi.n	8004fbc <_printf_i+0x28>
 8004fac:	2f62      	cmp	r7, #98	; 0x62
 8004fae:	d80a      	bhi.n	8004fc6 <_printf_i+0x32>
 8004fb0:	2f00      	cmp	r7, #0
 8004fb2:	f000 80d8 	beq.w	8005166 <_printf_i+0x1d2>
 8004fb6:	2f58      	cmp	r7, #88	; 0x58
 8004fb8:	f000 80a3 	beq.w	8005102 <_printf_i+0x16e>
 8004fbc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004fc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004fc4:	e03a      	b.n	800503c <_printf_i+0xa8>
 8004fc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004fca:	2b15      	cmp	r3, #21
 8004fcc:	d8f6      	bhi.n	8004fbc <_printf_i+0x28>
 8004fce:	a001      	add	r0, pc, #4	; (adr r0, 8004fd4 <_printf_i+0x40>)
 8004fd0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004fd4:	0800502d 	.word	0x0800502d
 8004fd8:	08005041 	.word	0x08005041
 8004fdc:	08004fbd 	.word	0x08004fbd
 8004fe0:	08004fbd 	.word	0x08004fbd
 8004fe4:	08004fbd 	.word	0x08004fbd
 8004fe8:	08004fbd 	.word	0x08004fbd
 8004fec:	08005041 	.word	0x08005041
 8004ff0:	08004fbd 	.word	0x08004fbd
 8004ff4:	08004fbd 	.word	0x08004fbd
 8004ff8:	08004fbd 	.word	0x08004fbd
 8004ffc:	08004fbd 	.word	0x08004fbd
 8005000:	0800514d 	.word	0x0800514d
 8005004:	08005071 	.word	0x08005071
 8005008:	0800512f 	.word	0x0800512f
 800500c:	08004fbd 	.word	0x08004fbd
 8005010:	08004fbd 	.word	0x08004fbd
 8005014:	0800516f 	.word	0x0800516f
 8005018:	08004fbd 	.word	0x08004fbd
 800501c:	08005071 	.word	0x08005071
 8005020:	08004fbd 	.word	0x08004fbd
 8005024:	08004fbd 	.word	0x08004fbd
 8005028:	08005137 	.word	0x08005137
 800502c:	680b      	ldr	r3, [r1, #0]
 800502e:	1d1a      	adds	r2, r3, #4
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	600a      	str	r2, [r1, #0]
 8005034:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005038:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800503c:	2301      	movs	r3, #1
 800503e:	e0a3      	b.n	8005188 <_printf_i+0x1f4>
 8005040:	6825      	ldr	r5, [r4, #0]
 8005042:	6808      	ldr	r0, [r1, #0]
 8005044:	062e      	lsls	r6, r5, #24
 8005046:	f100 0304 	add.w	r3, r0, #4
 800504a:	d50a      	bpl.n	8005062 <_printf_i+0xce>
 800504c:	6805      	ldr	r5, [r0, #0]
 800504e:	600b      	str	r3, [r1, #0]
 8005050:	2d00      	cmp	r5, #0
 8005052:	da03      	bge.n	800505c <_printf_i+0xc8>
 8005054:	232d      	movs	r3, #45	; 0x2d
 8005056:	426d      	negs	r5, r5
 8005058:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800505c:	485e      	ldr	r0, [pc, #376]	; (80051d8 <_printf_i+0x244>)
 800505e:	230a      	movs	r3, #10
 8005060:	e019      	b.n	8005096 <_printf_i+0x102>
 8005062:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005066:	6805      	ldr	r5, [r0, #0]
 8005068:	600b      	str	r3, [r1, #0]
 800506a:	bf18      	it	ne
 800506c:	b22d      	sxthne	r5, r5
 800506e:	e7ef      	b.n	8005050 <_printf_i+0xbc>
 8005070:	680b      	ldr	r3, [r1, #0]
 8005072:	6825      	ldr	r5, [r4, #0]
 8005074:	1d18      	adds	r0, r3, #4
 8005076:	6008      	str	r0, [r1, #0]
 8005078:	0628      	lsls	r0, r5, #24
 800507a:	d501      	bpl.n	8005080 <_printf_i+0xec>
 800507c:	681d      	ldr	r5, [r3, #0]
 800507e:	e002      	b.n	8005086 <_printf_i+0xf2>
 8005080:	0669      	lsls	r1, r5, #25
 8005082:	d5fb      	bpl.n	800507c <_printf_i+0xe8>
 8005084:	881d      	ldrh	r5, [r3, #0]
 8005086:	4854      	ldr	r0, [pc, #336]	; (80051d8 <_printf_i+0x244>)
 8005088:	2f6f      	cmp	r7, #111	; 0x6f
 800508a:	bf0c      	ite	eq
 800508c:	2308      	moveq	r3, #8
 800508e:	230a      	movne	r3, #10
 8005090:	2100      	movs	r1, #0
 8005092:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005096:	6866      	ldr	r6, [r4, #4]
 8005098:	60a6      	str	r6, [r4, #8]
 800509a:	2e00      	cmp	r6, #0
 800509c:	bfa2      	ittt	ge
 800509e:	6821      	ldrge	r1, [r4, #0]
 80050a0:	f021 0104 	bicge.w	r1, r1, #4
 80050a4:	6021      	strge	r1, [r4, #0]
 80050a6:	b90d      	cbnz	r5, 80050ac <_printf_i+0x118>
 80050a8:	2e00      	cmp	r6, #0
 80050aa:	d04d      	beq.n	8005148 <_printf_i+0x1b4>
 80050ac:	4616      	mov	r6, r2
 80050ae:	fbb5 f1f3 	udiv	r1, r5, r3
 80050b2:	fb03 5711 	mls	r7, r3, r1, r5
 80050b6:	5dc7      	ldrb	r7, [r0, r7]
 80050b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80050bc:	462f      	mov	r7, r5
 80050be:	42bb      	cmp	r3, r7
 80050c0:	460d      	mov	r5, r1
 80050c2:	d9f4      	bls.n	80050ae <_printf_i+0x11a>
 80050c4:	2b08      	cmp	r3, #8
 80050c6:	d10b      	bne.n	80050e0 <_printf_i+0x14c>
 80050c8:	6823      	ldr	r3, [r4, #0]
 80050ca:	07df      	lsls	r7, r3, #31
 80050cc:	d508      	bpl.n	80050e0 <_printf_i+0x14c>
 80050ce:	6923      	ldr	r3, [r4, #16]
 80050d0:	6861      	ldr	r1, [r4, #4]
 80050d2:	4299      	cmp	r1, r3
 80050d4:	bfde      	ittt	le
 80050d6:	2330      	movle	r3, #48	; 0x30
 80050d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80050dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80050e0:	1b92      	subs	r2, r2, r6
 80050e2:	6122      	str	r2, [r4, #16]
 80050e4:	f8cd a000 	str.w	sl, [sp]
 80050e8:	464b      	mov	r3, r9
 80050ea:	aa03      	add	r2, sp, #12
 80050ec:	4621      	mov	r1, r4
 80050ee:	4640      	mov	r0, r8
 80050f0:	f7ff fee2 	bl	8004eb8 <_printf_common>
 80050f4:	3001      	adds	r0, #1
 80050f6:	d14c      	bne.n	8005192 <_printf_i+0x1fe>
 80050f8:	f04f 30ff 	mov.w	r0, #4294967295
 80050fc:	b004      	add	sp, #16
 80050fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005102:	4835      	ldr	r0, [pc, #212]	; (80051d8 <_printf_i+0x244>)
 8005104:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005108:	6823      	ldr	r3, [r4, #0]
 800510a:	680e      	ldr	r6, [r1, #0]
 800510c:	061f      	lsls	r7, r3, #24
 800510e:	f856 5b04 	ldr.w	r5, [r6], #4
 8005112:	600e      	str	r6, [r1, #0]
 8005114:	d514      	bpl.n	8005140 <_printf_i+0x1ac>
 8005116:	07d9      	lsls	r1, r3, #31
 8005118:	bf44      	itt	mi
 800511a:	f043 0320 	orrmi.w	r3, r3, #32
 800511e:	6023      	strmi	r3, [r4, #0]
 8005120:	b91d      	cbnz	r5, 800512a <_printf_i+0x196>
 8005122:	6823      	ldr	r3, [r4, #0]
 8005124:	f023 0320 	bic.w	r3, r3, #32
 8005128:	6023      	str	r3, [r4, #0]
 800512a:	2310      	movs	r3, #16
 800512c:	e7b0      	b.n	8005090 <_printf_i+0xfc>
 800512e:	6823      	ldr	r3, [r4, #0]
 8005130:	f043 0320 	orr.w	r3, r3, #32
 8005134:	6023      	str	r3, [r4, #0]
 8005136:	2378      	movs	r3, #120	; 0x78
 8005138:	4828      	ldr	r0, [pc, #160]	; (80051dc <_printf_i+0x248>)
 800513a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800513e:	e7e3      	b.n	8005108 <_printf_i+0x174>
 8005140:	065e      	lsls	r6, r3, #25
 8005142:	bf48      	it	mi
 8005144:	b2ad      	uxthmi	r5, r5
 8005146:	e7e6      	b.n	8005116 <_printf_i+0x182>
 8005148:	4616      	mov	r6, r2
 800514a:	e7bb      	b.n	80050c4 <_printf_i+0x130>
 800514c:	680b      	ldr	r3, [r1, #0]
 800514e:	6826      	ldr	r6, [r4, #0]
 8005150:	6960      	ldr	r0, [r4, #20]
 8005152:	1d1d      	adds	r5, r3, #4
 8005154:	600d      	str	r5, [r1, #0]
 8005156:	0635      	lsls	r5, r6, #24
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	d501      	bpl.n	8005160 <_printf_i+0x1cc>
 800515c:	6018      	str	r0, [r3, #0]
 800515e:	e002      	b.n	8005166 <_printf_i+0x1d2>
 8005160:	0671      	lsls	r1, r6, #25
 8005162:	d5fb      	bpl.n	800515c <_printf_i+0x1c8>
 8005164:	8018      	strh	r0, [r3, #0]
 8005166:	2300      	movs	r3, #0
 8005168:	6123      	str	r3, [r4, #16]
 800516a:	4616      	mov	r6, r2
 800516c:	e7ba      	b.n	80050e4 <_printf_i+0x150>
 800516e:	680b      	ldr	r3, [r1, #0]
 8005170:	1d1a      	adds	r2, r3, #4
 8005172:	600a      	str	r2, [r1, #0]
 8005174:	681e      	ldr	r6, [r3, #0]
 8005176:	6862      	ldr	r2, [r4, #4]
 8005178:	2100      	movs	r1, #0
 800517a:	4630      	mov	r0, r6
 800517c:	f7fb f830 	bl	80001e0 <memchr>
 8005180:	b108      	cbz	r0, 8005186 <_printf_i+0x1f2>
 8005182:	1b80      	subs	r0, r0, r6
 8005184:	6060      	str	r0, [r4, #4]
 8005186:	6863      	ldr	r3, [r4, #4]
 8005188:	6123      	str	r3, [r4, #16]
 800518a:	2300      	movs	r3, #0
 800518c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005190:	e7a8      	b.n	80050e4 <_printf_i+0x150>
 8005192:	6923      	ldr	r3, [r4, #16]
 8005194:	4632      	mov	r2, r6
 8005196:	4649      	mov	r1, r9
 8005198:	4640      	mov	r0, r8
 800519a:	47d0      	blx	sl
 800519c:	3001      	adds	r0, #1
 800519e:	d0ab      	beq.n	80050f8 <_printf_i+0x164>
 80051a0:	6823      	ldr	r3, [r4, #0]
 80051a2:	079b      	lsls	r3, r3, #30
 80051a4:	d413      	bmi.n	80051ce <_printf_i+0x23a>
 80051a6:	68e0      	ldr	r0, [r4, #12]
 80051a8:	9b03      	ldr	r3, [sp, #12]
 80051aa:	4298      	cmp	r0, r3
 80051ac:	bfb8      	it	lt
 80051ae:	4618      	movlt	r0, r3
 80051b0:	e7a4      	b.n	80050fc <_printf_i+0x168>
 80051b2:	2301      	movs	r3, #1
 80051b4:	4632      	mov	r2, r6
 80051b6:	4649      	mov	r1, r9
 80051b8:	4640      	mov	r0, r8
 80051ba:	47d0      	blx	sl
 80051bc:	3001      	adds	r0, #1
 80051be:	d09b      	beq.n	80050f8 <_printf_i+0x164>
 80051c0:	3501      	adds	r5, #1
 80051c2:	68e3      	ldr	r3, [r4, #12]
 80051c4:	9903      	ldr	r1, [sp, #12]
 80051c6:	1a5b      	subs	r3, r3, r1
 80051c8:	42ab      	cmp	r3, r5
 80051ca:	dcf2      	bgt.n	80051b2 <_printf_i+0x21e>
 80051cc:	e7eb      	b.n	80051a6 <_printf_i+0x212>
 80051ce:	2500      	movs	r5, #0
 80051d0:	f104 0619 	add.w	r6, r4, #25
 80051d4:	e7f5      	b.n	80051c2 <_printf_i+0x22e>
 80051d6:	bf00      	nop
 80051d8:	08006d0d 	.word	0x08006d0d
 80051dc:	08006d1e 	.word	0x08006d1e

080051e0 <_sbrk_r>:
 80051e0:	b538      	push	{r3, r4, r5, lr}
 80051e2:	4d06      	ldr	r5, [pc, #24]	; (80051fc <_sbrk_r+0x1c>)
 80051e4:	2300      	movs	r3, #0
 80051e6:	4604      	mov	r4, r0
 80051e8:	4608      	mov	r0, r1
 80051ea:	602b      	str	r3, [r5, #0]
 80051ec:	f7fc fb42 	bl	8001874 <_sbrk>
 80051f0:	1c43      	adds	r3, r0, #1
 80051f2:	d102      	bne.n	80051fa <_sbrk_r+0x1a>
 80051f4:	682b      	ldr	r3, [r5, #0]
 80051f6:	b103      	cbz	r3, 80051fa <_sbrk_r+0x1a>
 80051f8:	6023      	str	r3, [r4, #0]
 80051fa:	bd38      	pop	{r3, r4, r5, pc}
 80051fc:	200001cc 	.word	0x200001cc

08005200 <strcpy>:
 8005200:	4603      	mov	r3, r0
 8005202:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005206:	f803 2b01 	strb.w	r2, [r3], #1
 800520a:	2a00      	cmp	r2, #0
 800520c:	d1f9      	bne.n	8005202 <strcpy+0x2>
 800520e:	4770      	bx	lr

08005210 <__assert_func>:
 8005210:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005212:	4614      	mov	r4, r2
 8005214:	461a      	mov	r2, r3
 8005216:	4b09      	ldr	r3, [pc, #36]	; (800523c <__assert_func+0x2c>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4605      	mov	r5, r0
 800521c:	68d8      	ldr	r0, [r3, #12]
 800521e:	b14c      	cbz	r4, 8005234 <__assert_func+0x24>
 8005220:	4b07      	ldr	r3, [pc, #28]	; (8005240 <__assert_func+0x30>)
 8005222:	9100      	str	r1, [sp, #0]
 8005224:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005228:	4906      	ldr	r1, [pc, #24]	; (8005244 <__assert_func+0x34>)
 800522a:	462b      	mov	r3, r5
 800522c:	f000 fe88 	bl	8005f40 <fiprintf>
 8005230:	f001 f946 	bl	80064c0 <abort>
 8005234:	4b04      	ldr	r3, [pc, #16]	; (8005248 <__assert_func+0x38>)
 8005236:	461c      	mov	r4, r3
 8005238:	e7f3      	b.n	8005222 <__assert_func+0x12>
 800523a:	bf00      	nop
 800523c:	2000000c 	.word	0x2000000c
 8005240:	08006d2f 	.word	0x08006d2f
 8005244:	08006d3c 	.word	0x08006d3c
 8005248:	08006d6a 	.word	0x08006d6a

0800524c <quorem>:
 800524c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005250:	6903      	ldr	r3, [r0, #16]
 8005252:	690c      	ldr	r4, [r1, #16]
 8005254:	42a3      	cmp	r3, r4
 8005256:	4607      	mov	r7, r0
 8005258:	f2c0 8081 	blt.w	800535e <quorem+0x112>
 800525c:	3c01      	subs	r4, #1
 800525e:	f101 0814 	add.w	r8, r1, #20
 8005262:	f100 0514 	add.w	r5, r0, #20
 8005266:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800526a:	9301      	str	r3, [sp, #4]
 800526c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005270:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005274:	3301      	adds	r3, #1
 8005276:	429a      	cmp	r2, r3
 8005278:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800527c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005280:	fbb2 f6f3 	udiv	r6, r2, r3
 8005284:	d331      	bcc.n	80052ea <quorem+0x9e>
 8005286:	f04f 0e00 	mov.w	lr, #0
 800528a:	4640      	mov	r0, r8
 800528c:	46ac      	mov	ip, r5
 800528e:	46f2      	mov	sl, lr
 8005290:	f850 2b04 	ldr.w	r2, [r0], #4
 8005294:	b293      	uxth	r3, r2
 8005296:	fb06 e303 	mla	r3, r6, r3, lr
 800529a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800529e:	b29b      	uxth	r3, r3
 80052a0:	ebaa 0303 	sub.w	r3, sl, r3
 80052a4:	0c12      	lsrs	r2, r2, #16
 80052a6:	f8dc a000 	ldr.w	sl, [ip]
 80052aa:	fb06 e202 	mla	r2, r6, r2, lr
 80052ae:	fa13 f38a 	uxtah	r3, r3, sl
 80052b2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80052b6:	fa1f fa82 	uxth.w	sl, r2
 80052ba:	f8dc 2000 	ldr.w	r2, [ip]
 80052be:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80052c2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80052cc:	4581      	cmp	r9, r0
 80052ce:	f84c 3b04 	str.w	r3, [ip], #4
 80052d2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80052d6:	d2db      	bcs.n	8005290 <quorem+0x44>
 80052d8:	f855 300b 	ldr.w	r3, [r5, fp]
 80052dc:	b92b      	cbnz	r3, 80052ea <quorem+0x9e>
 80052de:	9b01      	ldr	r3, [sp, #4]
 80052e0:	3b04      	subs	r3, #4
 80052e2:	429d      	cmp	r5, r3
 80052e4:	461a      	mov	r2, r3
 80052e6:	d32e      	bcc.n	8005346 <quorem+0xfa>
 80052e8:	613c      	str	r4, [r7, #16]
 80052ea:	4638      	mov	r0, r7
 80052ec:	f7ff fada 	bl	80048a4 <__mcmp>
 80052f0:	2800      	cmp	r0, #0
 80052f2:	db24      	blt.n	800533e <quorem+0xf2>
 80052f4:	3601      	adds	r6, #1
 80052f6:	4628      	mov	r0, r5
 80052f8:	f04f 0c00 	mov.w	ip, #0
 80052fc:	f858 2b04 	ldr.w	r2, [r8], #4
 8005300:	f8d0 e000 	ldr.w	lr, [r0]
 8005304:	b293      	uxth	r3, r2
 8005306:	ebac 0303 	sub.w	r3, ip, r3
 800530a:	0c12      	lsrs	r2, r2, #16
 800530c:	fa13 f38e 	uxtah	r3, r3, lr
 8005310:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005314:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005318:	b29b      	uxth	r3, r3
 800531a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800531e:	45c1      	cmp	r9, r8
 8005320:	f840 3b04 	str.w	r3, [r0], #4
 8005324:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005328:	d2e8      	bcs.n	80052fc <quorem+0xb0>
 800532a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800532e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005332:	b922      	cbnz	r2, 800533e <quorem+0xf2>
 8005334:	3b04      	subs	r3, #4
 8005336:	429d      	cmp	r5, r3
 8005338:	461a      	mov	r2, r3
 800533a:	d30a      	bcc.n	8005352 <quorem+0x106>
 800533c:	613c      	str	r4, [r7, #16]
 800533e:	4630      	mov	r0, r6
 8005340:	b003      	add	sp, #12
 8005342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005346:	6812      	ldr	r2, [r2, #0]
 8005348:	3b04      	subs	r3, #4
 800534a:	2a00      	cmp	r2, #0
 800534c:	d1cc      	bne.n	80052e8 <quorem+0x9c>
 800534e:	3c01      	subs	r4, #1
 8005350:	e7c7      	b.n	80052e2 <quorem+0x96>
 8005352:	6812      	ldr	r2, [r2, #0]
 8005354:	3b04      	subs	r3, #4
 8005356:	2a00      	cmp	r2, #0
 8005358:	d1f0      	bne.n	800533c <quorem+0xf0>
 800535a:	3c01      	subs	r4, #1
 800535c:	e7eb      	b.n	8005336 <quorem+0xea>
 800535e:	2000      	movs	r0, #0
 8005360:	e7ee      	b.n	8005340 <quorem+0xf4>
 8005362:	0000      	movs	r0, r0
 8005364:	0000      	movs	r0, r0
	...

08005368 <_dtoa_r>:
 8005368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800536c:	ed2d 8b02 	vpush	{d8}
 8005370:	ec57 6b10 	vmov	r6, r7, d0
 8005374:	b095      	sub	sp, #84	; 0x54
 8005376:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005378:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800537c:	9105      	str	r1, [sp, #20]
 800537e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005382:	4604      	mov	r4, r0
 8005384:	9209      	str	r2, [sp, #36]	; 0x24
 8005386:	930f      	str	r3, [sp, #60]	; 0x3c
 8005388:	b975      	cbnz	r5, 80053a8 <_dtoa_r+0x40>
 800538a:	2010      	movs	r0, #16
 800538c:	f000 fdea 	bl	8005f64 <malloc>
 8005390:	4602      	mov	r2, r0
 8005392:	6260      	str	r0, [r4, #36]	; 0x24
 8005394:	b920      	cbnz	r0, 80053a0 <_dtoa_r+0x38>
 8005396:	4bb2      	ldr	r3, [pc, #712]	; (8005660 <_dtoa_r+0x2f8>)
 8005398:	21ea      	movs	r1, #234	; 0xea
 800539a:	48b2      	ldr	r0, [pc, #712]	; (8005664 <_dtoa_r+0x2fc>)
 800539c:	f7ff ff38 	bl	8005210 <__assert_func>
 80053a0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80053a4:	6005      	str	r5, [r0, #0]
 80053a6:	60c5      	str	r5, [r0, #12]
 80053a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80053aa:	6819      	ldr	r1, [r3, #0]
 80053ac:	b151      	cbz	r1, 80053c4 <_dtoa_r+0x5c>
 80053ae:	685a      	ldr	r2, [r3, #4]
 80053b0:	604a      	str	r2, [r1, #4]
 80053b2:	2301      	movs	r3, #1
 80053b4:	4093      	lsls	r3, r2
 80053b6:	608b      	str	r3, [r1, #8]
 80053b8:	4620      	mov	r0, r4
 80053ba:	f7ff f835 	bl	8004428 <_Bfree>
 80053be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80053c0:	2200      	movs	r2, #0
 80053c2:	601a      	str	r2, [r3, #0]
 80053c4:	1e3b      	subs	r3, r7, #0
 80053c6:	bfb9      	ittee	lt
 80053c8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80053cc:	9303      	strlt	r3, [sp, #12]
 80053ce:	2300      	movge	r3, #0
 80053d0:	f8c8 3000 	strge.w	r3, [r8]
 80053d4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80053d8:	4ba3      	ldr	r3, [pc, #652]	; (8005668 <_dtoa_r+0x300>)
 80053da:	bfbc      	itt	lt
 80053dc:	2201      	movlt	r2, #1
 80053de:	f8c8 2000 	strlt.w	r2, [r8]
 80053e2:	ea33 0309 	bics.w	r3, r3, r9
 80053e6:	d11b      	bne.n	8005420 <_dtoa_r+0xb8>
 80053e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80053ea:	f242 730f 	movw	r3, #9999	; 0x270f
 80053ee:	6013      	str	r3, [r2, #0]
 80053f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80053f4:	4333      	orrs	r3, r6
 80053f6:	f000 857a 	beq.w	8005eee <_dtoa_r+0xb86>
 80053fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80053fc:	b963      	cbnz	r3, 8005418 <_dtoa_r+0xb0>
 80053fe:	4b9b      	ldr	r3, [pc, #620]	; (800566c <_dtoa_r+0x304>)
 8005400:	e024      	b.n	800544c <_dtoa_r+0xe4>
 8005402:	4b9b      	ldr	r3, [pc, #620]	; (8005670 <_dtoa_r+0x308>)
 8005404:	9300      	str	r3, [sp, #0]
 8005406:	3308      	adds	r3, #8
 8005408:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800540a:	6013      	str	r3, [r2, #0]
 800540c:	9800      	ldr	r0, [sp, #0]
 800540e:	b015      	add	sp, #84	; 0x54
 8005410:	ecbd 8b02 	vpop	{d8}
 8005414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005418:	4b94      	ldr	r3, [pc, #592]	; (800566c <_dtoa_r+0x304>)
 800541a:	9300      	str	r3, [sp, #0]
 800541c:	3303      	adds	r3, #3
 800541e:	e7f3      	b.n	8005408 <_dtoa_r+0xa0>
 8005420:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005424:	2200      	movs	r2, #0
 8005426:	ec51 0b17 	vmov	r0, r1, d7
 800542a:	2300      	movs	r3, #0
 800542c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8005430:	f7fb fb4a 	bl	8000ac8 <__aeabi_dcmpeq>
 8005434:	4680      	mov	r8, r0
 8005436:	b158      	cbz	r0, 8005450 <_dtoa_r+0xe8>
 8005438:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800543a:	2301      	movs	r3, #1
 800543c:	6013      	str	r3, [r2, #0]
 800543e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005440:	2b00      	cmp	r3, #0
 8005442:	f000 8551 	beq.w	8005ee8 <_dtoa_r+0xb80>
 8005446:	488b      	ldr	r0, [pc, #556]	; (8005674 <_dtoa_r+0x30c>)
 8005448:	6018      	str	r0, [r3, #0]
 800544a:	1e43      	subs	r3, r0, #1
 800544c:	9300      	str	r3, [sp, #0]
 800544e:	e7dd      	b.n	800540c <_dtoa_r+0xa4>
 8005450:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8005454:	aa12      	add	r2, sp, #72	; 0x48
 8005456:	a913      	add	r1, sp, #76	; 0x4c
 8005458:	4620      	mov	r0, r4
 800545a:	f7ff fac7 	bl	80049ec <__d2b>
 800545e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005462:	4683      	mov	fp, r0
 8005464:	2d00      	cmp	r5, #0
 8005466:	d07c      	beq.n	8005562 <_dtoa_r+0x1fa>
 8005468:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800546a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800546e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005472:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8005476:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800547a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800547e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005482:	4b7d      	ldr	r3, [pc, #500]	; (8005678 <_dtoa_r+0x310>)
 8005484:	2200      	movs	r2, #0
 8005486:	4630      	mov	r0, r6
 8005488:	4639      	mov	r1, r7
 800548a:	f7fa fefd 	bl	8000288 <__aeabi_dsub>
 800548e:	a36e      	add	r3, pc, #440	; (adr r3, 8005648 <_dtoa_r+0x2e0>)
 8005490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005494:	f7fb f8b0 	bl	80005f8 <__aeabi_dmul>
 8005498:	a36d      	add	r3, pc, #436	; (adr r3, 8005650 <_dtoa_r+0x2e8>)
 800549a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800549e:	f7fa fef5 	bl	800028c <__adddf3>
 80054a2:	4606      	mov	r6, r0
 80054a4:	4628      	mov	r0, r5
 80054a6:	460f      	mov	r7, r1
 80054a8:	f7fb f83c 	bl	8000524 <__aeabi_i2d>
 80054ac:	a36a      	add	r3, pc, #424	; (adr r3, 8005658 <_dtoa_r+0x2f0>)
 80054ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054b2:	f7fb f8a1 	bl	80005f8 <__aeabi_dmul>
 80054b6:	4602      	mov	r2, r0
 80054b8:	460b      	mov	r3, r1
 80054ba:	4630      	mov	r0, r6
 80054bc:	4639      	mov	r1, r7
 80054be:	f7fa fee5 	bl	800028c <__adddf3>
 80054c2:	4606      	mov	r6, r0
 80054c4:	460f      	mov	r7, r1
 80054c6:	f7fb fb31 	bl	8000b2c <__aeabi_d2iz>
 80054ca:	2200      	movs	r2, #0
 80054cc:	4682      	mov	sl, r0
 80054ce:	2300      	movs	r3, #0
 80054d0:	4630      	mov	r0, r6
 80054d2:	4639      	mov	r1, r7
 80054d4:	f7fb fb02 	bl	8000adc <__aeabi_dcmplt>
 80054d8:	b148      	cbz	r0, 80054ee <_dtoa_r+0x186>
 80054da:	4650      	mov	r0, sl
 80054dc:	f7fb f822 	bl	8000524 <__aeabi_i2d>
 80054e0:	4632      	mov	r2, r6
 80054e2:	463b      	mov	r3, r7
 80054e4:	f7fb faf0 	bl	8000ac8 <__aeabi_dcmpeq>
 80054e8:	b908      	cbnz	r0, 80054ee <_dtoa_r+0x186>
 80054ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80054ee:	f1ba 0f16 	cmp.w	sl, #22
 80054f2:	d854      	bhi.n	800559e <_dtoa_r+0x236>
 80054f4:	4b61      	ldr	r3, [pc, #388]	; (800567c <_dtoa_r+0x314>)
 80054f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80054fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005502:	f7fb faeb 	bl	8000adc <__aeabi_dcmplt>
 8005506:	2800      	cmp	r0, #0
 8005508:	d04b      	beq.n	80055a2 <_dtoa_r+0x23a>
 800550a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800550e:	2300      	movs	r3, #0
 8005510:	930e      	str	r3, [sp, #56]	; 0x38
 8005512:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005514:	1b5d      	subs	r5, r3, r5
 8005516:	1e6b      	subs	r3, r5, #1
 8005518:	9304      	str	r3, [sp, #16]
 800551a:	bf43      	ittte	mi
 800551c:	2300      	movmi	r3, #0
 800551e:	f1c5 0801 	rsbmi	r8, r5, #1
 8005522:	9304      	strmi	r3, [sp, #16]
 8005524:	f04f 0800 	movpl.w	r8, #0
 8005528:	f1ba 0f00 	cmp.w	sl, #0
 800552c:	db3b      	blt.n	80055a6 <_dtoa_r+0x23e>
 800552e:	9b04      	ldr	r3, [sp, #16]
 8005530:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8005534:	4453      	add	r3, sl
 8005536:	9304      	str	r3, [sp, #16]
 8005538:	2300      	movs	r3, #0
 800553a:	9306      	str	r3, [sp, #24]
 800553c:	9b05      	ldr	r3, [sp, #20]
 800553e:	2b09      	cmp	r3, #9
 8005540:	d869      	bhi.n	8005616 <_dtoa_r+0x2ae>
 8005542:	2b05      	cmp	r3, #5
 8005544:	bfc4      	itt	gt
 8005546:	3b04      	subgt	r3, #4
 8005548:	9305      	strgt	r3, [sp, #20]
 800554a:	9b05      	ldr	r3, [sp, #20]
 800554c:	f1a3 0302 	sub.w	r3, r3, #2
 8005550:	bfcc      	ite	gt
 8005552:	2500      	movgt	r5, #0
 8005554:	2501      	movle	r5, #1
 8005556:	2b03      	cmp	r3, #3
 8005558:	d869      	bhi.n	800562e <_dtoa_r+0x2c6>
 800555a:	e8df f003 	tbb	[pc, r3]
 800555e:	4e2c      	.short	0x4e2c
 8005560:	5a4c      	.short	0x5a4c
 8005562:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005566:	441d      	add	r5, r3
 8005568:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800556c:	2b20      	cmp	r3, #32
 800556e:	bfc1      	itttt	gt
 8005570:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005574:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005578:	fa09 f303 	lslgt.w	r3, r9, r3
 800557c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005580:	bfda      	itte	le
 8005582:	f1c3 0320 	rsble	r3, r3, #32
 8005586:	fa06 f003 	lslle.w	r0, r6, r3
 800558a:	4318      	orrgt	r0, r3
 800558c:	f7fa ffba 	bl	8000504 <__aeabi_ui2d>
 8005590:	2301      	movs	r3, #1
 8005592:	4606      	mov	r6, r0
 8005594:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005598:	3d01      	subs	r5, #1
 800559a:	9310      	str	r3, [sp, #64]	; 0x40
 800559c:	e771      	b.n	8005482 <_dtoa_r+0x11a>
 800559e:	2301      	movs	r3, #1
 80055a0:	e7b6      	b.n	8005510 <_dtoa_r+0x1a8>
 80055a2:	900e      	str	r0, [sp, #56]	; 0x38
 80055a4:	e7b5      	b.n	8005512 <_dtoa_r+0x1aa>
 80055a6:	f1ca 0300 	rsb	r3, sl, #0
 80055aa:	9306      	str	r3, [sp, #24]
 80055ac:	2300      	movs	r3, #0
 80055ae:	eba8 080a 	sub.w	r8, r8, sl
 80055b2:	930d      	str	r3, [sp, #52]	; 0x34
 80055b4:	e7c2      	b.n	800553c <_dtoa_r+0x1d4>
 80055b6:	2300      	movs	r3, #0
 80055b8:	9308      	str	r3, [sp, #32]
 80055ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055bc:	2b00      	cmp	r3, #0
 80055be:	dc39      	bgt.n	8005634 <_dtoa_r+0x2cc>
 80055c0:	f04f 0901 	mov.w	r9, #1
 80055c4:	f8cd 9004 	str.w	r9, [sp, #4]
 80055c8:	464b      	mov	r3, r9
 80055ca:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80055ce:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80055d0:	2200      	movs	r2, #0
 80055d2:	6042      	str	r2, [r0, #4]
 80055d4:	2204      	movs	r2, #4
 80055d6:	f102 0614 	add.w	r6, r2, #20
 80055da:	429e      	cmp	r6, r3
 80055dc:	6841      	ldr	r1, [r0, #4]
 80055de:	d92f      	bls.n	8005640 <_dtoa_r+0x2d8>
 80055e0:	4620      	mov	r0, r4
 80055e2:	f7fe fee1 	bl	80043a8 <_Balloc>
 80055e6:	9000      	str	r0, [sp, #0]
 80055e8:	2800      	cmp	r0, #0
 80055ea:	d14b      	bne.n	8005684 <_dtoa_r+0x31c>
 80055ec:	4b24      	ldr	r3, [pc, #144]	; (8005680 <_dtoa_r+0x318>)
 80055ee:	4602      	mov	r2, r0
 80055f0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80055f4:	e6d1      	b.n	800539a <_dtoa_r+0x32>
 80055f6:	2301      	movs	r3, #1
 80055f8:	e7de      	b.n	80055b8 <_dtoa_r+0x250>
 80055fa:	2300      	movs	r3, #0
 80055fc:	9308      	str	r3, [sp, #32]
 80055fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005600:	eb0a 0903 	add.w	r9, sl, r3
 8005604:	f109 0301 	add.w	r3, r9, #1
 8005608:	2b01      	cmp	r3, #1
 800560a:	9301      	str	r3, [sp, #4]
 800560c:	bfb8      	it	lt
 800560e:	2301      	movlt	r3, #1
 8005610:	e7dd      	b.n	80055ce <_dtoa_r+0x266>
 8005612:	2301      	movs	r3, #1
 8005614:	e7f2      	b.n	80055fc <_dtoa_r+0x294>
 8005616:	2501      	movs	r5, #1
 8005618:	2300      	movs	r3, #0
 800561a:	9305      	str	r3, [sp, #20]
 800561c:	9508      	str	r5, [sp, #32]
 800561e:	f04f 39ff 	mov.w	r9, #4294967295
 8005622:	2200      	movs	r2, #0
 8005624:	f8cd 9004 	str.w	r9, [sp, #4]
 8005628:	2312      	movs	r3, #18
 800562a:	9209      	str	r2, [sp, #36]	; 0x24
 800562c:	e7cf      	b.n	80055ce <_dtoa_r+0x266>
 800562e:	2301      	movs	r3, #1
 8005630:	9308      	str	r3, [sp, #32]
 8005632:	e7f4      	b.n	800561e <_dtoa_r+0x2b6>
 8005634:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005638:	f8cd 9004 	str.w	r9, [sp, #4]
 800563c:	464b      	mov	r3, r9
 800563e:	e7c6      	b.n	80055ce <_dtoa_r+0x266>
 8005640:	3101      	adds	r1, #1
 8005642:	6041      	str	r1, [r0, #4]
 8005644:	0052      	lsls	r2, r2, #1
 8005646:	e7c6      	b.n	80055d6 <_dtoa_r+0x26e>
 8005648:	636f4361 	.word	0x636f4361
 800564c:	3fd287a7 	.word	0x3fd287a7
 8005650:	8b60c8b3 	.word	0x8b60c8b3
 8005654:	3fc68a28 	.word	0x3fc68a28
 8005658:	509f79fb 	.word	0x509f79fb
 800565c:	3fd34413 	.word	0x3fd34413
 8005660:	08006b78 	.word	0x08006b78
 8005664:	08006d7a 	.word	0x08006d7a
 8005668:	7ff00000 	.word	0x7ff00000
 800566c:	08006d74 	.word	0x08006d74
 8005670:	08006d6b 	.word	0x08006d6b
 8005674:	08006d79 	.word	0x08006d79
 8005678:	3ff80000 	.word	0x3ff80000
 800567c:	08006c28 	.word	0x08006c28
 8005680:	08006bef 	.word	0x08006bef
 8005684:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005686:	9a00      	ldr	r2, [sp, #0]
 8005688:	601a      	str	r2, [r3, #0]
 800568a:	9b01      	ldr	r3, [sp, #4]
 800568c:	2b0e      	cmp	r3, #14
 800568e:	f200 80ad 	bhi.w	80057ec <_dtoa_r+0x484>
 8005692:	2d00      	cmp	r5, #0
 8005694:	f000 80aa 	beq.w	80057ec <_dtoa_r+0x484>
 8005698:	f1ba 0f00 	cmp.w	sl, #0
 800569c:	dd36      	ble.n	800570c <_dtoa_r+0x3a4>
 800569e:	4ac3      	ldr	r2, [pc, #780]	; (80059ac <_dtoa_r+0x644>)
 80056a0:	f00a 030f 	and.w	r3, sl, #15
 80056a4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80056a8:	ed93 7b00 	vldr	d7, [r3]
 80056ac:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80056b0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80056b4:	eeb0 8a47 	vmov.f32	s16, s14
 80056b8:	eef0 8a67 	vmov.f32	s17, s15
 80056bc:	d016      	beq.n	80056ec <_dtoa_r+0x384>
 80056be:	4bbc      	ldr	r3, [pc, #752]	; (80059b0 <_dtoa_r+0x648>)
 80056c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80056c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80056c8:	f7fb f8c0 	bl	800084c <__aeabi_ddiv>
 80056cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80056d0:	f007 070f 	and.w	r7, r7, #15
 80056d4:	2503      	movs	r5, #3
 80056d6:	4eb6      	ldr	r6, [pc, #728]	; (80059b0 <_dtoa_r+0x648>)
 80056d8:	b957      	cbnz	r7, 80056f0 <_dtoa_r+0x388>
 80056da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80056de:	ec53 2b18 	vmov	r2, r3, d8
 80056e2:	f7fb f8b3 	bl	800084c <__aeabi_ddiv>
 80056e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80056ea:	e029      	b.n	8005740 <_dtoa_r+0x3d8>
 80056ec:	2502      	movs	r5, #2
 80056ee:	e7f2      	b.n	80056d6 <_dtoa_r+0x36e>
 80056f0:	07f9      	lsls	r1, r7, #31
 80056f2:	d508      	bpl.n	8005706 <_dtoa_r+0x39e>
 80056f4:	ec51 0b18 	vmov	r0, r1, d8
 80056f8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80056fc:	f7fa ff7c 	bl	80005f8 <__aeabi_dmul>
 8005700:	ec41 0b18 	vmov	d8, r0, r1
 8005704:	3501      	adds	r5, #1
 8005706:	107f      	asrs	r7, r7, #1
 8005708:	3608      	adds	r6, #8
 800570a:	e7e5      	b.n	80056d8 <_dtoa_r+0x370>
 800570c:	f000 80a6 	beq.w	800585c <_dtoa_r+0x4f4>
 8005710:	f1ca 0600 	rsb	r6, sl, #0
 8005714:	4ba5      	ldr	r3, [pc, #660]	; (80059ac <_dtoa_r+0x644>)
 8005716:	4fa6      	ldr	r7, [pc, #664]	; (80059b0 <_dtoa_r+0x648>)
 8005718:	f006 020f 	and.w	r2, r6, #15
 800571c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005724:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005728:	f7fa ff66 	bl	80005f8 <__aeabi_dmul>
 800572c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005730:	1136      	asrs	r6, r6, #4
 8005732:	2300      	movs	r3, #0
 8005734:	2502      	movs	r5, #2
 8005736:	2e00      	cmp	r6, #0
 8005738:	f040 8085 	bne.w	8005846 <_dtoa_r+0x4de>
 800573c:	2b00      	cmp	r3, #0
 800573e:	d1d2      	bne.n	80056e6 <_dtoa_r+0x37e>
 8005740:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005742:	2b00      	cmp	r3, #0
 8005744:	f000 808c 	beq.w	8005860 <_dtoa_r+0x4f8>
 8005748:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800574c:	4b99      	ldr	r3, [pc, #612]	; (80059b4 <_dtoa_r+0x64c>)
 800574e:	2200      	movs	r2, #0
 8005750:	4630      	mov	r0, r6
 8005752:	4639      	mov	r1, r7
 8005754:	f7fb f9c2 	bl	8000adc <__aeabi_dcmplt>
 8005758:	2800      	cmp	r0, #0
 800575a:	f000 8081 	beq.w	8005860 <_dtoa_r+0x4f8>
 800575e:	9b01      	ldr	r3, [sp, #4]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d07d      	beq.n	8005860 <_dtoa_r+0x4f8>
 8005764:	f1b9 0f00 	cmp.w	r9, #0
 8005768:	dd3c      	ble.n	80057e4 <_dtoa_r+0x47c>
 800576a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800576e:	9307      	str	r3, [sp, #28]
 8005770:	2200      	movs	r2, #0
 8005772:	4b91      	ldr	r3, [pc, #580]	; (80059b8 <_dtoa_r+0x650>)
 8005774:	4630      	mov	r0, r6
 8005776:	4639      	mov	r1, r7
 8005778:	f7fa ff3e 	bl	80005f8 <__aeabi_dmul>
 800577c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005780:	3501      	adds	r5, #1
 8005782:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8005786:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800578a:	4628      	mov	r0, r5
 800578c:	f7fa feca 	bl	8000524 <__aeabi_i2d>
 8005790:	4632      	mov	r2, r6
 8005792:	463b      	mov	r3, r7
 8005794:	f7fa ff30 	bl	80005f8 <__aeabi_dmul>
 8005798:	4b88      	ldr	r3, [pc, #544]	; (80059bc <_dtoa_r+0x654>)
 800579a:	2200      	movs	r2, #0
 800579c:	f7fa fd76 	bl	800028c <__adddf3>
 80057a0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80057a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80057a8:	9303      	str	r3, [sp, #12]
 80057aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d15c      	bne.n	800586a <_dtoa_r+0x502>
 80057b0:	4b83      	ldr	r3, [pc, #524]	; (80059c0 <_dtoa_r+0x658>)
 80057b2:	2200      	movs	r2, #0
 80057b4:	4630      	mov	r0, r6
 80057b6:	4639      	mov	r1, r7
 80057b8:	f7fa fd66 	bl	8000288 <__aeabi_dsub>
 80057bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80057c0:	4606      	mov	r6, r0
 80057c2:	460f      	mov	r7, r1
 80057c4:	f7fb f9a8 	bl	8000b18 <__aeabi_dcmpgt>
 80057c8:	2800      	cmp	r0, #0
 80057ca:	f040 8296 	bne.w	8005cfa <_dtoa_r+0x992>
 80057ce:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80057d2:	4630      	mov	r0, r6
 80057d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80057d8:	4639      	mov	r1, r7
 80057da:	f7fb f97f 	bl	8000adc <__aeabi_dcmplt>
 80057de:	2800      	cmp	r0, #0
 80057e0:	f040 8288 	bne.w	8005cf4 <_dtoa_r+0x98c>
 80057e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80057e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80057ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	f2c0 8158 	blt.w	8005aa4 <_dtoa_r+0x73c>
 80057f4:	f1ba 0f0e 	cmp.w	sl, #14
 80057f8:	f300 8154 	bgt.w	8005aa4 <_dtoa_r+0x73c>
 80057fc:	4b6b      	ldr	r3, [pc, #428]	; (80059ac <_dtoa_r+0x644>)
 80057fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005802:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005806:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005808:	2b00      	cmp	r3, #0
 800580a:	f280 80e3 	bge.w	80059d4 <_dtoa_r+0x66c>
 800580e:	9b01      	ldr	r3, [sp, #4]
 8005810:	2b00      	cmp	r3, #0
 8005812:	f300 80df 	bgt.w	80059d4 <_dtoa_r+0x66c>
 8005816:	f040 826d 	bne.w	8005cf4 <_dtoa_r+0x98c>
 800581a:	4b69      	ldr	r3, [pc, #420]	; (80059c0 <_dtoa_r+0x658>)
 800581c:	2200      	movs	r2, #0
 800581e:	4640      	mov	r0, r8
 8005820:	4649      	mov	r1, r9
 8005822:	f7fa fee9 	bl	80005f8 <__aeabi_dmul>
 8005826:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800582a:	f7fb f96b 	bl	8000b04 <__aeabi_dcmpge>
 800582e:	9e01      	ldr	r6, [sp, #4]
 8005830:	4637      	mov	r7, r6
 8005832:	2800      	cmp	r0, #0
 8005834:	f040 8243 	bne.w	8005cbe <_dtoa_r+0x956>
 8005838:	9d00      	ldr	r5, [sp, #0]
 800583a:	2331      	movs	r3, #49	; 0x31
 800583c:	f805 3b01 	strb.w	r3, [r5], #1
 8005840:	f10a 0a01 	add.w	sl, sl, #1
 8005844:	e23f      	b.n	8005cc6 <_dtoa_r+0x95e>
 8005846:	07f2      	lsls	r2, r6, #31
 8005848:	d505      	bpl.n	8005856 <_dtoa_r+0x4ee>
 800584a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800584e:	f7fa fed3 	bl	80005f8 <__aeabi_dmul>
 8005852:	3501      	adds	r5, #1
 8005854:	2301      	movs	r3, #1
 8005856:	1076      	asrs	r6, r6, #1
 8005858:	3708      	adds	r7, #8
 800585a:	e76c      	b.n	8005736 <_dtoa_r+0x3ce>
 800585c:	2502      	movs	r5, #2
 800585e:	e76f      	b.n	8005740 <_dtoa_r+0x3d8>
 8005860:	9b01      	ldr	r3, [sp, #4]
 8005862:	f8cd a01c 	str.w	sl, [sp, #28]
 8005866:	930c      	str	r3, [sp, #48]	; 0x30
 8005868:	e78d      	b.n	8005786 <_dtoa_r+0x41e>
 800586a:	9900      	ldr	r1, [sp, #0]
 800586c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800586e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005870:	4b4e      	ldr	r3, [pc, #312]	; (80059ac <_dtoa_r+0x644>)
 8005872:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005876:	4401      	add	r1, r0
 8005878:	9102      	str	r1, [sp, #8]
 800587a:	9908      	ldr	r1, [sp, #32]
 800587c:	eeb0 8a47 	vmov.f32	s16, s14
 8005880:	eef0 8a67 	vmov.f32	s17, s15
 8005884:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005888:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800588c:	2900      	cmp	r1, #0
 800588e:	d045      	beq.n	800591c <_dtoa_r+0x5b4>
 8005890:	494c      	ldr	r1, [pc, #304]	; (80059c4 <_dtoa_r+0x65c>)
 8005892:	2000      	movs	r0, #0
 8005894:	f7fa ffda 	bl	800084c <__aeabi_ddiv>
 8005898:	ec53 2b18 	vmov	r2, r3, d8
 800589c:	f7fa fcf4 	bl	8000288 <__aeabi_dsub>
 80058a0:	9d00      	ldr	r5, [sp, #0]
 80058a2:	ec41 0b18 	vmov	d8, r0, r1
 80058a6:	4639      	mov	r1, r7
 80058a8:	4630      	mov	r0, r6
 80058aa:	f7fb f93f 	bl	8000b2c <__aeabi_d2iz>
 80058ae:	900c      	str	r0, [sp, #48]	; 0x30
 80058b0:	f7fa fe38 	bl	8000524 <__aeabi_i2d>
 80058b4:	4602      	mov	r2, r0
 80058b6:	460b      	mov	r3, r1
 80058b8:	4630      	mov	r0, r6
 80058ba:	4639      	mov	r1, r7
 80058bc:	f7fa fce4 	bl	8000288 <__aeabi_dsub>
 80058c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80058c2:	3330      	adds	r3, #48	; 0x30
 80058c4:	f805 3b01 	strb.w	r3, [r5], #1
 80058c8:	ec53 2b18 	vmov	r2, r3, d8
 80058cc:	4606      	mov	r6, r0
 80058ce:	460f      	mov	r7, r1
 80058d0:	f7fb f904 	bl	8000adc <__aeabi_dcmplt>
 80058d4:	2800      	cmp	r0, #0
 80058d6:	d165      	bne.n	80059a4 <_dtoa_r+0x63c>
 80058d8:	4632      	mov	r2, r6
 80058da:	463b      	mov	r3, r7
 80058dc:	4935      	ldr	r1, [pc, #212]	; (80059b4 <_dtoa_r+0x64c>)
 80058de:	2000      	movs	r0, #0
 80058e0:	f7fa fcd2 	bl	8000288 <__aeabi_dsub>
 80058e4:	ec53 2b18 	vmov	r2, r3, d8
 80058e8:	f7fb f8f8 	bl	8000adc <__aeabi_dcmplt>
 80058ec:	2800      	cmp	r0, #0
 80058ee:	f040 80b9 	bne.w	8005a64 <_dtoa_r+0x6fc>
 80058f2:	9b02      	ldr	r3, [sp, #8]
 80058f4:	429d      	cmp	r5, r3
 80058f6:	f43f af75 	beq.w	80057e4 <_dtoa_r+0x47c>
 80058fa:	4b2f      	ldr	r3, [pc, #188]	; (80059b8 <_dtoa_r+0x650>)
 80058fc:	ec51 0b18 	vmov	r0, r1, d8
 8005900:	2200      	movs	r2, #0
 8005902:	f7fa fe79 	bl	80005f8 <__aeabi_dmul>
 8005906:	4b2c      	ldr	r3, [pc, #176]	; (80059b8 <_dtoa_r+0x650>)
 8005908:	ec41 0b18 	vmov	d8, r0, r1
 800590c:	2200      	movs	r2, #0
 800590e:	4630      	mov	r0, r6
 8005910:	4639      	mov	r1, r7
 8005912:	f7fa fe71 	bl	80005f8 <__aeabi_dmul>
 8005916:	4606      	mov	r6, r0
 8005918:	460f      	mov	r7, r1
 800591a:	e7c4      	b.n	80058a6 <_dtoa_r+0x53e>
 800591c:	ec51 0b17 	vmov	r0, r1, d7
 8005920:	f7fa fe6a 	bl	80005f8 <__aeabi_dmul>
 8005924:	9b02      	ldr	r3, [sp, #8]
 8005926:	9d00      	ldr	r5, [sp, #0]
 8005928:	930c      	str	r3, [sp, #48]	; 0x30
 800592a:	ec41 0b18 	vmov	d8, r0, r1
 800592e:	4639      	mov	r1, r7
 8005930:	4630      	mov	r0, r6
 8005932:	f7fb f8fb 	bl	8000b2c <__aeabi_d2iz>
 8005936:	9011      	str	r0, [sp, #68]	; 0x44
 8005938:	f7fa fdf4 	bl	8000524 <__aeabi_i2d>
 800593c:	4602      	mov	r2, r0
 800593e:	460b      	mov	r3, r1
 8005940:	4630      	mov	r0, r6
 8005942:	4639      	mov	r1, r7
 8005944:	f7fa fca0 	bl	8000288 <__aeabi_dsub>
 8005948:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800594a:	3330      	adds	r3, #48	; 0x30
 800594c:	f805 3b01 	strb.w	r3, [r5], #1
 8005950:	9b02      	ldr	r3, [sp, #8]
 8005952:	429d      	cmp	r5, r3
 8005954:	4606      	mov	r6, r0
 8005956:	460f      	mov	r7, r1
 8005958:	f04f 0200 	mov.w	r2, #0
 800595c:	d134      	bne.n	80059c8 <_dtoa_r+0x660>
 800595e:	4b19      	ldr	r3, [pc, #100]	; (80059c4 <_dtoa_r+0x65c>)
 8005960:	ec51 0b18 	vmov	r0, r1, d8
 8005964:	f7fa fc92 	bl	800028c <__adddf3>
 8005968:	4602      	mov	r2, r0
 800596a:	460b      	mov	r3, r1
 800596c:	4630      	mov	r0, r6
 800596e:	4639      	mov	r1, r7
 8005970:	f7fb f8d2 	bl	8000b18 <__aeabi_dcmpgt>
 8005974:	2800      	cmp	r0, #0
 8005976:	d175      	bne.n	8005a64 <_dtoa_r+0x6fc>
 8005978:	ec53 2b18 	vmov	r2, r3, d8
 800597c:	4911      	ldr	r1, [pc, #68]	; (80059c4 <_dtoa_r+0x65c>)
 800597e:	2000      	movs	r0, #0
 8005980:	f7fa fc82 	bl	8000288 <__aeabi_dsub>
 8005984:	4602      	mov	r2, r0
 8005986:	460b      	mov	r3, r1
 8005988:	4630      	mov	r0, r6
 800598a:	4639      	mov	r1, r7
 800598c:	f7fb f8a6 	bl	8000adc <__aeabi_dcmplt>
 8005990:	2800      	cmp	r0, #0
 8005992:	f43f af27 	beq.w	80057e4 <_dtoa_r+0x47c>
 8005996:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005998:	1e6b      	subs	r3, r5, #1
 800599a:	930c      	str	r3, [sp, #48]	; 0x30
 800599c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80059a0:	2b30      	cmp	r3, #48	; 0x30
 80059a2:	d0f8      	beq.n	8005996 <_dtoa_r+0x62e>
 80059a4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80059a8:	e04a      	b.n	8005a40 <_dtoa_r+0x6d8>
 80059aa:	bf00      	nop
 80059ac:	08006c28 	.word	0x08006c28
 80059b0:	08006c00 	.word	0x08006c00
 80059b4:	3ff00000 	.word	0x3ff00000
 80059b8:	40240000 	.word	0x40240000
 80059bc:	401c0000 	.word	0x401c0000
 80059c0:	40140000 	.word	0x40140000
 80059c4:	3fe00000 	.word	0x3fe00000
 80059c8:	4baf      	ldr	r3, [pc, #700]	; (8005c88 <_dtoa_r+0x920>)
 80059ca:	f7fa fe15 	bl	80005f8 <__aeabi_dmul>
 80059ce:	4606      	mov	r6, r0
 80059d0:	460f      	mov	r7, r1
 80059d2:	e7ac      	b.n	800592e <_dtoa_r+0x5c6>
 80059d4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80059d8:	9d00      	ldr	r5, [sp, #0]
 80059da:	4642      	mov	r2, r8
 80059dc:	464b      	mov	r3, r9
 80059de:	4630      	mov	r0, r6
 80059e0:	4639      	mov	r1, r7
 80059e2:	f7fa ff33 	bl	800084c <__aeabi_ddiv>
 80059e6:	f7fb f8a1 	bl	8000b2c <__aeabi_d2iz>
 80059ea:	9002      	str	r0, [sp, #8]
 80059ec:	f7fa fd9a 	bl	8000524 <__aeabi_i2d>
 80059f0:	4642      	mov	r2, r8
 80059f2:	464b      	mov	r3, r9
 80059f4:	f7fa fe00 	bl	80005f8 <__aeabi_dmul>
 80059f8:	4602      	mov	r2, r0
 80059fa:	460b      	mov	r3, r1
 80059fc:	4630      	mov	r0, r6
 80059fe:	4639      	mov	r1, r7
 8005a00:	f7fa fc42 	bl	8000288 <__aeabi_dsub>
 8005a04:	9e02      	ldr	r6, [sp, #8]
 8005a06:	9f01      	ldr	r7, [sp, #4]
 8005a08:	3630      	adds	r6, #48	; 0x30
 8005a0a:	f805 6b01 	strb.w	r6, [r5], #1
 8005a0e:	9e00      	ldr	r6, [sp, #0]
 8005a10:	1bae      	subs	r6, r5, r6
 8005a12:	42b7      	cmp	r7, r6
 8005a14:	4602      	mov	r2, r0
 8005a16:	460b      	mov	r3, r1
 8005a18:	d137      	bne.n	8005a8a <_dtoa_r+0x722>
 8005a1a:	f7fa fc37 	bl	800028c <__adddf3>
 8005a1e:	4642      	mov	r2, r8
 8005a20:	464b      	mov	r3, r9
 8005a22:	4606      	mov	r6, r0
 8005a24:	460f      	mov	r7, r1
 8005a26:	f7fb f877 	bl	8000b18 <__aeabi_dcmpgt>
 8005a2a:	b9c8      	cbnz	r0, 8005a60 <_dtoa_r+0x6f8>
 8005a2c:	4642      	mov	r2, r8
 8005a2e:	464b      	mov	r3, r9
 8005a30:	4630      	mov	r0, r6
 8005a32:	4639      	mov	r1, r7
 8005a34:	f7fb f848 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a38:	b110      	cbz	r0, 8005a40 <_dtoa_r+0x6d8>
 8005a3a:	9b02      	ldr	r3, [sp, #8]
 8005a3c:	07d9      	lsls	r1, r3, #31
 8005a3e:	d40f      	bmi.n	8005a60 <_dtoa_r+0x6f8>
 8005a40:	4620      	mov	r0, r4
 8005a42:	4659      	mov	r1, fp
 8005a44:	f7fe fcf0 	bl	8004428 <_Bfree>
 8005a48:	2300      	movs	r3, #0
 8005a4a:	702b      	strb	r3, [r5, #0]
 8005a4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005a4e:	f10a 0001 	add.w	r0, sl, #1
 8005a52:	6018      	str	r0, [r3, #0]
 8005a54:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	f43f acd8 	beq.w	800540c <_dtoa_r+0xa4>
 8005a5c:	601d      	str	r5, [r3, #0]
 8005a5e:	e4d5      	b.n	800540c <_dtoa_r+0xa4>
 8005a60:	f8cd a01c 	str.w	sl, [sp, #28]
 8005a64:	462b      	mov	r3, r5
 8005a66:	461d      	mov	r5, r3
 8005a68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005a6c:	2a39      	cmp	r2, #57	; 0x39
 8005a6e:	d108      	bne.n	8005a82 <_dtoa_r+0x71a>
 8005a70:	9a00      	ldr	r2, [sp, #0]
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d1f7      	bne.n	8005a66 <_dtoa_r+0x6fe>
 8005a76:	9a07      	ldr	r2, [sp, #28]
 8005a78:	9900      	ldr	r1, [sp, #0]
 8005a7a:	3201      	adds	r2, #1
 8005a7c:	9207      	str	r2, [sp, #28]
 8005a7e:	2230      	movs	r2, #48	; 0x30
 8005a80:	700a      	strb	r2, [r1, #0]
 8005a82:	781a      	ldrb	r2, [r3, #0]
 8005a84:	3201      	adds	r2, #1
 8005a86:	701a      	strb	r2, [r3, #0]
 8005a88:	e78c      	b.n	80059a4 <_dtoa_r+0x63c>
 8005a8a:	4b7f      	ldr	r3, [pc, #508]	; (8005c88 <_dtoa_r+0x920>)
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	f7fa fdb3 	bl	80005f8 <__aeabi_dmul>
 8005a92:	2200      	movs	r2, #0
 8005a94:	2300      	movs	r3, #0
 8005a96:	4606      	mov	r6, r0
 8005a98:	460f      	mov	r7, r1
 8005a9a:	f7fb f815 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a9e:	2800      	cmp	r0, #0
 8005aa0:	d09b      	beq.n	80059da <_dtoa_r+0x672>
 8005aa2:	e7cd      	b.n	8005a40 <_dtoa_r+0x6d8>
 8005aa4:	9a08      	ldr	r2, [sp, #32]
 8005aa6:	2a00      	cmp	r2, #0
 8005aa8:	f000 80c4 	beq.w	8005c34 <_dtoa_r+0x8cc>
 8005aac:	9a05      	ldr	r2, [sp, #20]
 8005aae:	2a01      	cmp	r2, #1
 8005ab0:	f300 80a8 	bgt.w	8005c04 <_dtoa_r+0x89c>
 8005ab4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005ab6:	2a00      	cmp	r2, #0
 8005ab8:	f000 80a0 	beq.w	8005bfc <_dtoa_r+0x894>
 8005abc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005ac0:	9e06      	ldr	r6, [sp, #24]
 8005ac2:	4645      	mov	r5, r8
 8005ac4:	9a04      	ldr	r2, [sp, #16]
 8005ac6:	2101      	movs	r1, #1
 8005ac8:	441a      	add	r2, r3
 8005aca:	4620      	mov	r0, r4
 8005acc:	4498      	add	r8, r3
 8005ace:	9204      	str	r2, [sp, #16]
 8005ad0:	f7fe fd66 	bl	80045a0 <__i2b>
 8005ad4:	4607      	mov	r7, r0
 8005ad6:	2d00      	cmp	r5, #0
 8005ad8:	dd0b      	ble.n	8005af2 <_dtoa_r+0x78a>
 8005ada:	9b04      	ldr	r3, [sp, #16]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	dd08      	ble.n	8005af2 <_dtoa_r+0x78a>
 8005ae0:	42ab      	cmp	r3, r5
 8005ae2:	9a04      	ldr	r2, [sp, #16]
 8005ae4:	bfa8      	it	ge
 8005ae6:	462b      	movge	r3, r5
 8005ae8:	eba8 0803 	sub.w	r8, r8, r3
 8005aec:	1aed      	subs	r5, r5, r3
 8005aee:	1ad3      	subs	r3, r2, r3
 8005af0:	9304      	str	r3, [sp, #16]
 8005af2:	9b06      	ldr	r3, [sp, #24]
 8005af4:	b1fb      	cbz	r3, 8005b36 <_dtoa_r+0x7ce>
 8005af6:	9b08      	ldr	r3, [sp, #32]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	f000 809f 	beq.w	8005c3c <_dtoa_r+0x8d4>
 8005afe:	2e00      	cmp	r6, #0
 8005b00:	dd11      	ble.n	8005b26 <_dtoa_r+0x7be>
 8005b02:	4639      	mov	r1, r7
 8005b04:	4632      	mov	r2, r6
 8005b06:	4620      	mov	r0, r4
 8005b08:	f7fe fe06 	bl	8004718 <__pow5mult>
 8005b0c:	465a      	mov	r2, fp
 8005b0e:	4601      	mov	r1, r0
 8005b10:	4607      	mov	r7, r0
 8005b12:	4620      	mov	r0, r4
 8005b14:	f7fe fd5a 	bl	80045cc <__multiply>
 8005b18:	4659      	mov	r1, fp
 8005b1a:	9007      	str	r0, [sp, #28]
 8005b1c:	4620      	mov	r0, r4
 8005b1e:	f7fe fc83 	bl	8004428 <_Bfree>
 8005b22:	9b07      	ldr	r3, [sp, #28]
 8005b24:	469b      	mov	fp, r3
 8005b26:	9b06      	ldr	r3, [sp, #24]
 8005b28:	1b9a      	subs	r2, r3, r6
 8005b2a:	d004      	beq.n	8005b36 <_dtoa_r+0x7ce>
 8005b2c:	4659      	mov	r1, fp
 8005b2e:	4620      	mov	r0, r4
 8005b30:	f7fe fdf2 	bl	8004718 <__pow5mult>
 8005b34:	4683      	mov	fp, r0
 8005b36:	2101      	movs	r1, #1
 8005b38:	4620      	mov	r0, r4
 8005b3a:	f7fe fd31 	bl	80045a0 <__i2b>
 8005b3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	4606      	mov	r6, r0
 8005b44:	dd7c      	ble.n	8005c40 <_dtoa_r+0x8d8>
 8005b46:	461a      	mov	r2, r3
 8005b48:	4601      	mov	r1, r0
 8005b4a:	4620      	mov	r0, r4
 8005b4c:	f7fe fde4 	bl	8004718 <__pow5mult>
 8005b50:	9b05      	ldr	r3, [sp, #20]
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	4606      	mov	r6, r0
 8005b56:	dd76      	ble.n	8005c46 <_dtoa_r+0x8de>
 8005b58:	2300      	movs	r3, #0
 8005b5a:	9306      	str	r3, [sp, #24]
 8005b5c:	6933      	ldr	r3, [r6, #16]
 8005b5e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005b62:	6918      	ldr	r0, [r3, #16]
 8005b64:	f7fe fccc 	bl	8004500 <__hi0bits>
 8005b68:	f1c0 0020 	rsb	r0, r0, #32
 8005b6c:	9b04      	ldr	r3, [sp, #16]
 8005b6e:	4418      	add	r0, r3
 8005b70:	f010 001f 	ands.w	r0, r0, #31
 8005b74:	f000 8086 	beq.w	8005c84 <_dtoa_r+0x91c>
 8005b78:	f1c0 0320 	rsb	r3, r0, #32
 8005b7c:	2b04      	cmp	r3, #4
 8005b7e:	dd7f      	ble.n	8005c80 <_dtoa_r+0x918>
 8005b80:	f1c0 001c 	rsb	r0, r0, #28
 8005b84:	9b04      	ldr	r3, [sp, #16]
 8005b86:	4403      	add	r3, r0
 8005b88:	4480      	add	r8, r0
 8005b8a:	4405      	add	r5, r0
 8005b8c:	9304      	str	r3, [sp, #16]
 8005b8e:	f1b8 0f00 	cmp.w	r8, #0
 8005b92:	dd05      	ble.n	8005ba0 <_dtoa_r+0x838>
 8005b94:	4659      	mov	r1, fp
 8005b96:	4642      	mov	r2, r8
 8005b98:	4620      	mov	r0, r4
 8005b9a:	f7fe fe17 	bl	80047cc <__lshift>
 8005b9e:	4683      	mov	fp, r0
 8005ba0:	9b04      	ldr	r3, [sp, #16]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	dd05      	ble.n	8005bb2 <_dtoa_r+0x84a>
 8005ba6:	4631      	mov	r1, r6
 8005ba8:	461a      	mov	r2, r3
 8005baa:	4620      	mov	r0, r4
 8005bac:	f7fe fe0e 	bl	80047cc <__lshift>
 8005bb0:	4606      	mov	r6, r0
 8005bb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d069      	beq.n	8005c8c <_dtoa_r+0x924>
 8005bb8:	4631      	mov	r1, r6
 8005bba:	4658      	mov	r0, fp
 8005bbc:	f7fe fe72 	bl	80048a4 <__mcmp>
 8005bc0:	2800      	cmp	r0, #0
 8005bc2:	da63      	bge.n	8005c8c <_dtoa_r+0x924>
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	4659      	mov	r1, fp
 8005bc8:	220a      	movs	r2, #10
 8005bca:	4620      	mov	r0, r4
 8005bcc:	f7fe fc4e 	bl	800446c <__multadd>
 8005bd0:	9b08      	ldr	r3, [sp, #32]
 8005bd2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005bd6:	4683      	mov	fp, r0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	f000 818f 	beq.w	8005efc <_dtoa_r+0xb94>
 8005bde:	4639      	mov	r1, r7
 8005be0:	2300      	movs	r3, #0
 8005be2:	220a      	movs	r2, #10
 8005be4:	4620      	mov	r0, r4
 8005be6:	f7fe fc41 	bl	800446c <__multadd>
 8005bea:	f1b9 0f00 	cmp.w	r9, #0
 8005bee:	4607      	mov	r7, r0
 8005bf0:	f300 808e 	bgt.w	8005d10 <_dtoa_r+0x9a8>
 8005bf4:	9b05      	ldr	r3, [sp, #20]
 8005bf6:	2b02      	cmp	r3, #2
 8005bf8:	dc50      	bgt.n	8005c9c <_dtoa_r+0x934>
 8005bfa:	e089      	b.n	8005d10 <_dtoa_r+0x9a8>
 8005bfc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005bfe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005c02:	e75d      	b.n	8005ac0 <_dtoa_r+0x758>
 8005c04:	9b01      	ldr	r3, [sp, #4]
 8005c06:	1e5e      	subs	r6, r3, #1
 8005c08:	9b06      	ldr	r3, [sp, #24]
 8005c0a:	42b3      	cmp	r3, r6
 8005c0c:	bfbf      	itttt	lt
 8005c0e:	9b06      	ldrlt	r3, [sp, #24]
 8005c10:	9606      	strlt	r6, [sp, #24]
 8005c12:	1af2      	sublt	r2, r6, r3
 8005c14:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8005c16:	bfb6      	itet	lt
 8005c18:	189b      	addlt	r3, r3, r2
 8005c1a:	1b9e      	subge	r6, r3, r6
 8005c1c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8005c1e:	9b01      	ldr	r3, [sp, #4]
 8005c20:	bfb8      	it	lt
 8005c22:	2600      	movlt	r6, #0
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	bfb5      	itete	lt
 8005c28:	eba8 0503 	sublt.w	r5, r8, r3
 8005c2c:	9b01      	ldrge	r3, [sp, #4]
 8005c2e:	2300      	movlt	r3, #0
 8005c30:	4645      	movge	r5, r8
 8005c32:	e747      	b.n	8005ac4 <_dtoa_r+0x75c>
 8005c34:	9e06      	ldr	r6, [sp, #24]
 8005c36:	9f08      	ldr	r7, [sp, #32]
 8005c38:	4645      	mov	r5, r8
 8005c3a:	e74c      	b.n	8005ad6 <_dtoa_r+0x76e>
 8005c3c:	9a06      	ldr	r2, [sp, #24]
 8005c3e:	e775      	b.n	8005b2c <_dtoa_r+0x7c4>
 8005c40:	9b05      	ldr	r3, [sp, #20]
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	dc18      	bgt.n	8005c78 <_dtoa_r+0x910>
 8005c46:	9b02      	ldr	r3, [sp, #8]
 8005c48:	b9b3      	cbnz	r3, 8005c78 <_dtoa_r+0x910>
 8005c4a:	9b03      	ldr	r3, [sp, #12]
 8005c4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c50:	b9a3      	cbnz	r3, 8005c7c <_dtoa_r+0x914>
 8005c52:	9b03      	ldr	r3, [sp, #12]
 8005c54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c58:	0d1b      	lsrs	r3, r3, #20
 8005c5a:	051b      	lsls	r3, r3, #20
 8005c5c:	b12b      	cbz	r3, 8005c6a <_dtoa_r+0x902>
 8005c5e:	9b04      	ldr	r3, [sp, #16]
 8005c60:	3301      	adds	r3, #1
 8005c62:	9304      	str	r3, [sp, #16]
 8005c64:	f108 0801 	add.w	r8, r8, #1
 8005c68:	2301      	movs	r3, #1
 8005c6a:	9306      	str	r3, [sp, #24]
 8005c6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	f47f af74 	bne.w	8005b5c <_dtoa_r+0x7f4>
 8005c74:	2001      	movs	r0, #1
 8005c76:	e779      	b.n	8005b6c <_dtoa_r+0x804>
 8005c78:	2300      	movs	r3, #0
 8005c7a:	e7f6      	b.n	8005c6a <_dtoa_r+0x902>
 8005c7c:	9b02      	ldr	r3, [sp, #8]
 8005c7e:	e7f4      	b.n	8005c6a <_dtoa_r+0x902>
 8005c80:	d085      	beq.n	8005b8e <_dtoa_r+0x826>
 8005c82:	4618      	mov	r0, r3
 8005c84:	301c      	adds	r0, #28
 8005c86:	e77d      	b.n	8005b84 <_dtoa_r+0x81c>
 8005c88:	40240000 	.word	0x40240000
 8005c8c:	9b01      	ldr	r3, [sp, #4]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	dc38      	bgt.n	8005d04 <_dtoa_r+0x99c>
 8005c92:	9b05      	ldr	r3, [sp, #20]
 8005c94:	2b02      	cmp	r3, #2
 8005c96:	dd35      	ble.n	8005d04 <_dtoa_r+0x99c>
 8005c98:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005c9c:	f1b9 0f00 	cmp.w	r9, #0
 8005ca0:	d10d      	bne.n	8005cbe <_dtoa_r+0x956>
 8005ca2:	4631      	mov	r1, r6
 8005ca4:	464b      	mov	r3, r9
 8005ca6:	2205      	movs	r2, #5
 8005ca8:	4620      	mov	r0, r4
 8005caa:	f7fe fbdf 	bl	800446c <__multadd>
 8005cae:	4601      	mov	r1, r0
 8005cb0:	4606      	mov	r6, r0
 8005cb2:	4658      	mov	r0, fp
 8005cb4:	f7fe fdf6 	bl	80048a4 <__mcmp>
 8005cb8:	2800      	cmp	r0, #0
 8005cba:	f73f adbd 	bgt.w	8005838 <_dtoa_r+0x4d0>
 8005cbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cc0:	9d00      	ldr	r5, [sp, #0]
 8005cc2:	ea6f 0a03 	mvn.w	sl, r3
 8005cc6:	f04f 0800 	mov.w	r8, #0
 8005cca:	4631      	mov	r1, r6
 8005ccc:	4620      	mov	r0, r4
 8005cce:	f7fe fbab 	bl	8004428 <_Bfree>
 8005cd2:	2f00      	cmp	r7, #0
 8005cd4:	f43f aeb4 	beq.w	8005a40 <_dtoa_r+0x6d8>
 8005cd8:	f1b8 0f00 	cmp.w	r8, #0
 8005cdc:	d005      	beq.n	8005cea <_dtoa_r+0x982>
 8005cde:	45b8      	cmp	r8, r7
 8005ce0:	d003      	beq.n	8005cea <_dtoa_r+0x982>
 8005ce2:	4641      	mov	r1, r8
 8005ce4:	4620      	mov	r0, r4
 8005ce6:	f7fe fb9f 	bl	8004428 <_Bfree>
 8005cea:	4639      	mov	r1, r7
 8005cec:	4620      	mov	r0, r4
 8005cee:	f7fe fb9b 	bl	8004428 <_Bfree>
 8005cf2:	e6a5      	b.n	8005a40 <_dtoa_r+0x6d8>
 8005cf4:	2600      	movs	r6, #0
 8005cf6:	4637      	mov	r7, r6
 8005cf8:	e7e1      	b.n	8005cbe <_dtoa_r+0x956>
 8005cfa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8005cfc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005d00:	4637      	mov	r7, r6
 8005d02:	e599      	b.n	8005838 <_dtoa_r+0x4d0>
 8005d04:	9b08      	ldr	r3, [sp, #32]
 8005d06:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	f000 80fd 	beq.w	8005f0a <_dtoa_r+0xba2>
 8005d10:	2d00      	cmp	r5, #0
 8005d12:	dd05      	ble.n	8005d20 <_dtoa_r+0x9b8>
 8005d14:	4639      	mov	r1, r7
 8005d16:	462a      	mov	r2, r5
 8005d18:	4620      	mov	r0, r4
 8005d1a:	f7fe fd57 	bl	80047cc <__lshift>
 8005d1e:	4607      	mov	r7, r0
 8005d20:	9b06      	ldr	r3, [sp, #24]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d05c      	beq.n	8005de0 <_dtoa_r+0xa78>
 8005d26:	6879      	ldr	r1, [r7, #4]
 8005d28:	4620      	mov	r0, r4
 8005d2a:	f7fe fb3d 	bl	80043a8 <_Balloc>
 8005d2e:	4605      	mov	r5, r0
 8005d30:	b928      	cbnz	r0, 8005d3e <_dtoa_r+0x9d6>
 8005d32:	4b80      	ldr	r3, [pc, #512]	; (8005f34 <_dtoa_r+0xbcc>)
 8005d34:	4602      	mov	r2, r0
 8005d36:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005d3a:	f7ff bb2e 	b.w	800539a <_dtoa_r+0x32>
 8005d3e:	693a      	ldr	r2, [r7, #16]
 8005d40:	3202      	adds	r2, #2
 8005d42:	0092      	lsls	r2, r2, #2
 8005d44:	f107 010c 	add.w	r1, r7, #12
 8005d48:	300c      	adds	r0, #12
 8005d4a:	f000 f913 	bl	8005f74 <memcpy>
 8005d4e:	2201      	movs	r2, #1
 8005d50:	4629      	mov	r1, r5
 8005d52:	4620      	mov	r0, r4
 8005d54:	f7fe fd3a 	bl	80047cc <__lshift>
 8005d58:	9b00      	ldr	r3, [sp, #0]
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	9301      	str	r3, [sp, #4]
 8005d5e:	9b00      	ldr	r3, [sp, #0]
 8005d60:	444b      	add	r3, r9
 8005d62:	9307      	str	r3, [sp, #28]
 8005d64:	9b02      	ldr	r3, [sp, #8]
 8005d66:	f003 0301 	and.w	r3, r3, #1
 8005d6a:	46b8      	mov	r8, r7
 8005d6c:	9306      	str	r3, [sp, #24]
 8005d6e:	4607      	mov	r7, r0
 8005d70:	9b01      	ldr	r3, [sp, #4]
 8005d72:	4631      	mov	r1, r6
 8005d74:	3b01      	subs	r3, #1
 8005d76:	4658      	mov	r0, fp
 8005d78:	9302      	str	r3, [sp, #8]
 8005d7a:	f7ff fa67 	bl	800524c <quorem>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	3330      	adds	r3, #48	; 0x30
 8005d82:	9004      	str	r0, [sp, #16]
 8005d84:	4641      	mov	r1, r8
 8005d86:	4658      	mov	r0, fp
 8005d88:	9308      	str	r3, [sp, #32]
 8005d8a:	f7fe fd8b 	bl	80048a4 <__mcmp>
 8005d8e:	463a      	mov	r2, r7
 8005d90:	4681      	mov	r9, r0
 8005d92:	4631      	mov	r1, r6
 8005d94:	4620      	mov	r0, r4
 8005d96:	f7fe fda1 	bl	80048dc <__mdiff>
 8005d9a:	68c2      	ldr	r2, [r0, #12]
 8005d9c:	9b08      	ldr	r3, [sp, #32]
 8005d9e:	4605      	mov	r5, r0
 8005da0:	bb02      	cbnz	r2, 8005de4 <_dtoa_r+0xa7c>
 8005da2:	4601      	mov	r1, r0
 8005da4:	4658      	mov	r0, fp
 8005da6:	f7fe fd7d 	bl	80048a4 <__mcmp>
 8005daa:	9b08      	ldr	r3, [sp, #32]
 8005dac:	4602      	mov	r2, r0
 8005dae:	4629      	mov	r1, r5
 8005db0:	4620      	mov	r0, r4
 8005db2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8005db6:	f7fe fb37 	bl	8004428 <_Bfree>
 8005dba:	9b05      	ldr	r3, [sp, #20]
 8005dbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005dbe:	9d01      	ldr	r5, [sp, #4]
 8005dc0:	ea43 0102 	orr.w	r1, r3, r2
 8005dc4:	9b06      	ldr	r3, [sp, #24]
 8005dc6:	430b      	orrs	r3, r1
 8005dc8:	9b08      	ldr	r3, [sp, #32]
 8005dca:	d10d      	bne.n	8005de8 <_dtoa_r+0xa80>
 8005dcc:	2b39      	cmp	r3, #57	; 0x39
 8005dce:	d029      	beq.n	8005e24 <_dtoa_r+0xabc>
 8005dd0:	f1b9 0f00 	cmp.w	r9, #0
 8005dd4:	dd01      	ble.n	8005dda <_dtoa_r+0xa72>
 8005dd6:	9b04      	ldr	r3, [sp, #16]
 8005dd8:	3331      	adds	r3, #49	; 0x31
 8005dda:	9a02      	ldr	r2, [sp, #8]
 8005ddc:	7013      	strb	r3, [r2, #0]
 8005dde:	e774      	b.n	8005cca <_dtoa_r+0x962>
 8005de0:	4638      	mov	r0, r7
 8005de2:	e7b9      	b.n	8005d58 <_dtoa_r+0x9f0>
 8005de4:	2201      	movs	r2, #1
 8005de6:	e7e2      	b.n	8005dae <_dtoa_r+0xa46>
 8005de8:	f1b9 0f00 	cmp.w	r9, #0
 8005dec:	db06      	blt.n	8005dfc <_dtoa_r+0xa94>
 8005dee:	9905      	ldr	r1, [sp, #20]
 8005df0:	ea41 0909 	orr.w	r9, r1, r9
 8005df4:	9906      	ldr	r1, [sp, #24]
 8005df6:	ea59 0101 	orrs.w	r1, r9, r1
 8005dfa:	d120      	bne.n	8005e3e <_dtoa_r+0xad6>
 8005dfc:	2a00      	cmp	r2, #0
 8005dfe:	ddec      	ble.n	8005dda <_dtoa_r+0xa72>
 8005e00:	4659      	mov	r1, fp
 8005e02:	2201      	movs	r2, #1
 8005e04:	4620      	mov	r0, r4
 8005e06:	9301      	str	r3, [sp, #4]
 8005e08:	f7fe fce0 	bl	80047cc <__lshift>
 8005e0c:	4631      	mov	r1, r6
 8005e0e:	4683      	mov	fp, r0
 8005e10:	f7fe fd48 	bl	80048a4 <__mcmp>
 8005e14:	2800      	cmp	r0, #0
 8005e16:	9b01      	ldr	r3, [sp, #4]
 8005e18:	dc02      	bgt.n	8005e20 <_dtoa_r+0xab8>
 8005e1a:	d1de      	bne.n	8005dda <_dtoa_r+0xa72>
 8005e1c:	07da      	lsls	r2, r3, #31
 8005e1e:	d5dc      	bpl.n	8005dda <_dtoa_r+0xa72>
 8005e20:	2b39      	cmp	r3, #57	; 0x39
 8005e22:	d1d8      	bne.n	8005dd6 <_dtoa_r+0xa6e>
 8005e24:	9a02      	ldr	r2, [sp, #8]
 8005e26:	2339      	movs	r3, #57	; 0x39
 8005e28:	7013      	strb	r3, [r2, #0]
 8005e2a:	462b      	mov	r3, r5
 8005e2c:	461d      	mov	r5, r3
 8005e2e:	3b01      	subs	r3, #1
 8005e30:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005e34:	2a39      	cmp	r2, #57	; 0x39
 8005e36:	d050      	beq.n	8005eda <_dtoa_r+0xb72>
 8005e38:	3201      	adds	r2, #1
 8005e3a:	701a      	strb	r2, [r3, #0]
 8005e3c:	e745      	b.n	8005cca <_dtoa_r+0x962>
 8005e3e:	2a00      	cmp	r2, #0
 8005e40:	dd03      	ble.n	8005e4a <_dtoa_r+0xae2>
 8005e42:	2b39      	cmp	r3, #57	; 0x39
 8005e44:	d0ee      	beq.n	8005e24 <_dtoa_r+0xabc>
 8005e46:	3301      	adds	r3, #1
 8005e48:	e7c7      	b.n	8005dda <_dtoa_r+0xa72>
 8005e4a:	9a01      	ldr	r2, [sp, #4]
 8005e4c:	9907      	ldr	r1, [sp, #28]
 8005e4e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005e52:	428a      	cmp	r2, r1
 8005e54:	d02a      	beq.n	8005eac <_dtoa_r+0xb44>
 8005e56:	4659      	mov	r1, fp
 8005e58:	2300      	movs	r3, #0
 8005e5a:	220a      	movs	r2, #10
 8005e5c:	4620      	mov	r0, r4
 8005e5e:	f7fe fb05 	bl	800446c <__multadd>
 8005e62:	45b8      	cmp	r8, r7
 8005e64:	4683      	mov	fp, r0
 8005e66:	f04f 0300 	mov.w	r3, #0
 8005e6a:	f04f 020a 	mov.w	r2, #10
 8005e6e:	4641      	mov	r1, r8
 8005e70:	4620      	mov	r0, r4
 8005e72:	d107      	bne.n	8005e84 <_dtoa_r+0xb1c>
 8005e74:	f7fe fafa 	bl	800446c <__multadd>
 8005e78:	4680      	mov	r8, r0
 8005e7a:	4607      	mov	r7, r0
 8005e7c:	9b01      	ldr	r3, [sp, #4]
 8005e7e:	3301      	adds	r3, #1
 8005e80:	9301      	str	r3, [sp, #4]
 8005e82:	e775      	b.n	8005d70 <_dtoa_r+0xa08>
 8005e84:	f7fe faf2 	bl	800446c <__multadd>
 8005e88:	4639      	mov	r1, r7
 8005e8a:	4680      	mov	r8, r0
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	220a      	movs	r2, #10
 8005e90:	4620      	mov	r0, r4
 8005e92:	f7fe faeb 	bl	800446c <__multadd>
 8005e96:	4607      	mov	r7, r0
 8005e98:	e7f0      	b.n	8005e7c <_dtoa_r+0xb14>
 8005e9a:	f1b9 0f00 	cmp.w	r9, #0
 8005e9e:	9a00      	ldr	r2, [sp, #0]
 8005ea0:	bfcc      	ite	gt
 8005ea2:	464d      	movgt	r5, r9
 8005ea4:	2501      	movle	r5, #1
 8005ea6:	4415      	add	r5, r2
 8005ea8:	f04f 0800 	mov.w	r8, #0
 8005eac:	4659      	mov	r1, fp
 8005eae:	2201      	movs	r2, #1
 8005eb0:	4620      	mov	r0, r4
 8005eb2:	9301      	str	r3, [sp, #4]
 8005eb4:	f7fe fc8a 	bl	80047cc <__lshift>
 8005eb8:	4631      	mov	r1, r6
 8005eba:	4683      	mov	fp, r0
 8005ebc:	f7fe fcf2 	bl	80048a4 <__mcmp>
 8005ec0:	2800      	cmp	r0, #0
 8005ec2:	dcb2      	bgt.n	8005e2a <_dtoa_r+0xac2>
 8005ec4:	d102      	bne.n	8005ecc <_dtoa_r+0xb64>
 8005ec6:	9b01      	ldr	r3, [sp, #4]
 8005ec8:	07db      	lsls	r3, r3, #31
 8005eca:	d4ae      	bmi.n	8005e2a <_dtoa_r+0xac2>
 8005ecc:	462b      	mov	r3, r5
 8005ece:	461d      	mov	r5, r3
 8005ed0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005ed4:	2a30      	cmp	r2, #48	; 0x30
 8005ed6:	d0fa      	beq.n	8005ece <_dtoa_r+0xb66>
 8005ed8:	e6f7      	b.n	8005cca <_dtoa_r+0x962>
 8005eda:	9a00      	ldr	r2, [sp, #0]
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d1a5      	bne.n	8005e2c <_dtoa_r+0xac4>
 8005ee0:	f10a 0a01 	add.w	sl, sl, #1
 8005ee4:	2331      	movs	r3, #49	; 0x31
 8005ee6:	e779      	b.n	8005ddc <_dtoa_r+0xa74>
 8005ee8:	4b13      	ldr	r3, [pc, #76]	; (8005f38 <_dtoa_r+0xbd0>)
 8005eea:	f7ff baaf 	b.w	800544c <_dtoa_r+0xe4>
 8005eee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	f47f aa86 	bne.w	8005402 <_dtoa_r+0x9a>
 8005ef6:	4b11      	ldr	r3, [pc, #68]	; (8005f3c <_dtoa_r+0xbd4>)
 8005ef8:	f7ff baa8 	b.w	800544c <_dtoa_r+0xe4>
 8005efc:	f1b9 0f00 	cmp.w	r9, #0
 8005f00:	dc03      	bgt.n	8005f0a <_dtoa_r+0xba2>
 8005f02:	9b05      	ldr	r3, [sp, #20]
 8005f04:	2b02      	cmp	r3, #2
 8005f06:	f73f aec9 	bgt.w	8005c9c <_dtoa_r+0x934>
 8005f0a:	9d00      	ldr	r5, [sp, #0]
 8005f0c:	4631      	mov	r1, r6
 8005f0e:	4658      	mov	r0, fp
 8005f10:	f7ff f99c 	bl	800524c <quorem>
 8005f14:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005f18:	f805 3b01 	strb.w	r3, [r5], #1
 8005f1c:	9a00      	ldr	r2, [sp, #0]
 8005f1e:	1aaa      	subs	r2, r5, r2
 8005f20:	4591      	cmp	r9, r2
 8005f22:	ddba      	ble.n	8005e9a <_dtoa_r+0xb32>
 8005f24:	4659      	mov	r1, fp
 8005f26:	2300      	movs	r3, #0
 8005f28:	220a      	movs	r2, #10
 8005f2a:	4620      	mov	r0, r4
 8005f2c:	f7fe fa9e 	bl	800446c <__multadd>
 8005f30:	4683      	mov	fp, r0
 8005f32:	e7eb      	b.n	8005f0c <_dtoa_r+0xba4>
 8005f34:	08006bef 	.word	0x08006bef
 8005f38:	08006d78 	.word	0x08006d78
 8005f3c:	08006d6b 	.word	0x08006d6b

08005f40 <fiprintf>:
 8005f40:	b40e      	push	{r1, r2, r3}
 8005f42:	b503      	push	{r0, r1, lr}
 8005f44:	4601      	mov	r1, r0
 8005f46:	ab03      	add	r3, sp, #12
 8005f48:	4805      	ldr	r0, [pc, #20]	; (8005f60 <fiprintf+0x20>)
 8005f4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f4e:	6800      	ldr	r0, [r0, #0]
 8005f50:	9301      	str	r3, [sp, #4]
 8005f52:	f000 f8c5 	bl	80060e0 <_vfiprintf_r>
 8005f56:	b002      	add	sp, #8
 8005f58:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f5c:	b003      	add	sp, #12
 8005f5e:	4770      	bx	lr
 8005f60:	2000000c 	.word	0x2000000c

08005f64 <malloc>:
 8005f64:	4b02      	ldr	r3, [pc, #8]	; (8005f70 <malloc+0xc>)
 8005f66:	4601      	mov	r1, r0
 8005f68:	6818      	ldr	r0, [r3, #0]
 8005f6a:	f7fe bdc9 	b.w	8004b00 <_malloc_r>
 8005f6e:	bf00      	nop
 8005f70:	2000000c 	.word	0x2000000c

08005f74 <memcpy>:
 8005f74:	440a      	add	r2, r1
 8005f76:	4291      	cmp	r1, r2
 8005f78:	f100 33ff 	add.w	r3, r0, #4294967295
 8005f7c:	d100      	bne.n	8005f80 <memcpy+0xc>
 8005f7e:	4770      	bx	lr
 8005f80:	b510      	push	{r4, lr}
 8005f82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f8a:	4291      	cmp	r1, r2
 8005f8c:	d1f9      	bne.n	8005f82 <memcpy+0xe>
 8005f8e:	bd10      	pop	{r4, pc}

08005f90 <memmove>:
 8005f90:	4288      	cmp	r0, r1
 8005f92:	b510      	push	{r4, lr}
 8005f94:	eb01 0402 	add.w	r4, r1, r2
 8005f98:	d902      	bls.n	8005fa0 <memmove+0x10>
 8005f9a:	4284      	cmp	r4, r0
 8005f9c:	4623      	mov	r3, r4
 8005f9e:	d807      	bhi.n	8005fb0 <memmove+0x20>
 8005fa0:	1e43      	subs	r3, r0, #1
 8005fa2:	42a1      	cmp	r1, r4
 8005fa4:	d008      	beq.n	8005fb8 <memmove+0x28>
 8005fa6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005faa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005fae:	e7f8      	b.n	8005fa2 <memmove+0x12>
 8005fb0:	4402      	add	r2, r0
 8005fb2:	4601      	mov	r1, r0
 8005fb4:	428a      	cmp	r2, r1
 8005fb6:	d100      	bne.n	8005fba <memmove+0x2a>
 8005fb8:	bd10      	pop	{r4, pc}
 8005fba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005fbe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005fc2:	e7f7      	b.n	8005fb4 <memmove+0x24>

08005fc4 <__malloc_lock>:
 8005fc4:	4801      	ldr	r0, [pc, #4]	; (8005fcc <__malloc_lock+0x8>)
 8005fc6:	f000 bc3b 	b.w	8006840 <__retarget_lock_acquire_recursive>
 8005fca:	bf00      	nop
 8005fcc:	200001d4 	.word	0x200001d4

08005fd0 <__malloc_unlock>:
 8005fd0:	4801      	ldr	r0, [pc, #4]	; (8005fd8 <__malloc_unlock+0x8>)
 8005fd2:	f000 bc36 	b.w	8006842 <__retarget_lock_release_recursive>
 8005fd6:	bf00      	nop
 8005fd8:	200001d4 	.word	0x200001d4

08005fdc <_free_r>:
 8005fdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005fde:	2900      	cmp	r1, #0
 8005fe0:	d048      	beq.n	8006074 <_free_r+0x98>
 8005fe2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fe6:	9001      	str	r0, [sp, #4]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	f1a1 0404 	sub.w	r4, r1, #4
 8005fee:	bfb8      	it	lt
 8005ff0:	18e4      	addlt	r4, r4, r3
 8005ff2:	f7ff ffe7 	bl	8005fc4 <__malloc_lock>
 8005ff6:	4a20      	ldr	r2, [pc, #128]	; (8006078 <_free_r+0x9c>)
 8005ff8:	9801      	ldr	r0, [sp, #4]
 8005ffa:	6813      	ldr	r3, [r2, #0]
 8005ffc:	4615      	mov	r5, r2
 8005ffe:	b933      	cbnz	r3, 800600e <_free_r+0x32>
 8006000:	6063      	str	r3, [r4, #4]
 8006002:	6014      	str	r4, [r2, #0]
 8006004:	b003      	add	sp, #12
 8006006:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800600a:	f7ff bfe1 	b.w	8005fd0 <__malloc_unlock>
 800600e:	42a3      	cmp	r3, r4
 8006010:	d90b      	bls.n	800602a <_free_r+0x4e>
 8006012:	6821      	ldr	r1, [r4, #0]
 8006014:	1862      	adds	r2, r4, r1
 8006016:	4293      	cmp	r3, r2
 8006018:	bf04      	itt	eq
 800601a:	681a      	ldreq	r2, [r3, #0]
 800601c:	685b      	ldreq	r3, [r3, #4]
 800601e:	6063      	str	r3, [r4, #4]
 8006020:	bf04      	itt	eq
 8006022:	1852      	addeq	r2, r2, r1
 8006024:	6022      	streq	r2, [r4, #0]
 8006026:	602c      	str	r4, [r5, #0]
 8006028:	e7ec      	b.n	8006004 <_free_r+0x28>
 800602a:	461a      	mov	r2, r3
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	b10b      	cbz	r3, 8006034 <_free_r+0x58>
 8006030:	42a3      	cmp	r3, r4
 8006032:	d9fa      	bls.n	800602a <_free_r+0x4e>
 8006034:	6811      	ldr	r1, [r2, #0]
 8006036:	1855      	adds	r5, r2, r1
 8006038:	42a5      	cmp	r5, r4
 800603a:	d10b      	bne.n	8006054 <_free_r+0x78>
 800603c:	6824      	ldr	r4, [r4, #0]
 800603e:	4421      	add	r1, r4
 8006040:	1854      	adds	r4, r2, r1
 8006042:	42a3      	cmp	r3, r4
 8006044:	6011      	str	r1, [r2, #0]
 8006046:	d1dd      	bne.n	8006004 <_free_r+0x28>
 8006048:	681c      	ldr	r4, [r3, #0]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	6053      	str	r3, [r2, #4]
 800604e:	4421      	add	r1, r4
 8006050:	6011      	str	r1, [r2, #0]
 8006052:	e7d7      	b.n	8006004 <_free_r+0x28>
 8006054:	d902      	bls.n	800605c <_free_r+0x80>
 8006056:	230c      	movs	r3, #12
 8006058:	6003      	str	r3, [r0, #0]
 800605a:	e7d3      	b.n	8006004 <_free_r+0x28>
 800605c:	6825      	ldr	r5, [r4, #0]
 800605e:	1961      	adds	r1, r4, r5
 8006060:	428b      	cmp	r3, r1
 8006062:	bf04      	itt	eq
 8006064:	6819      	ldreq	r1, [r3, #0]
 8006066:	685b      	ldreq	r3, [r3, #4]
 8006068:	6063      	str	r3, [r4, #4]
 800606a:	bf04      	itt	eq
 800606c:	1949      	addeq	r1, r1, r5
 800606e:	6021      	streq	r1, [r4, #0]
 8006070:	6054      	str	r4, [r2, #4]
 8006072:	e7c7      	b.n	8006004 <_free_r+0x28>
 8006074:	b003      	add	sp, #12
 8006076:	bd30      	pop	{r4, r5, pc}
 8006078:	20000090 	.word	0x20000090

0800607c <_malloc_usable_size_r>:
 800607c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006080:	1f18      	subs	r0, r3, #4
 8006082:	2b00      	cmp	r3, #0
 8006084:	bfbc      	itt	lt
 8006086:	580b      	ldrlt	r3, [r1, r0]
 8006088:	18c0      	addlt	r0, r0, r3
 800608a:	4770      	bx	lr

0800608c <__sfputc_r>:
 800608c:	6893      	ldr	r3, [r2, #8]
 800608e:	3b01      	subs	r3, #1
 8006090:	2b00      	cmp	r3, #0
 8006092:	b410      	push	{r4}
 8006094:	6093      	str	r3, [r2, #8]
 8006096:	da08      	bge.n	80060aa <__sfputc_r+0x1e>
 8006098:	6994      	ldr	r4, [r2, #24]
 800609a:	42a3      	cmp	r3, r4
 800609c:	db01      	blt.n	80060a2 <__sfputc_r+0x16>
 800609e:	290a      	cmp	r1, #10
 80060a0:	d103      	bne.n	80060aa <__sfputc_r+0x1e>
 80060a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80060a6:	f000 b94b 	b.w	8006340 <__swbuf_r>
 80060aa:	6813      	ldr	r3, [r2, #0]
 80060ac:	1c58      	adds	r0, r3, #1
 80060ae:	6010      	str	r0, [r2, #0]
 80060b0:	7019      	strb	r1, [r3, #0]
 80060b2:	4608      	mov	r0, r1
 80060b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80060b8:	4770      	bx	lr

080060ba <__sfputs_r>:
 80060ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060bc:	4606      	mov	r6, r0
 80060be:	460f      	mov	r7, r1
 80060c0:	4614      	mov	r4, r2
 80060c2:	18d5      	adds	r5, r2, r3
 80060c4:	42ac      	cmp	r4, r5
 80060c6:	d101      	bne.n	80060cc <__sfputs_r+0x12>
 80060c8:	2000      	movs	r0, #0
 80060ca:	e007      	b.n	80060dc <__sfputs_r+0x22>
 80060cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060d0:	463a      	mov	r2, r7
 80060d2:	4630      	mov	r0, r6
 80060d4:	f7ff ffda 	bl	800608c <__sfputc_r>
 80060d8:	1c43      	adds	r3, r0, #1
 80060da:	d1f3      	bne.n	80060c4 <__sfputs_r+0xa>
 80060dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080060e0 <_vfiprintf_r>:
 80060e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060e4:	460d      	mov	r5, r1
 80060e6:	b09d      	sub	sp, #116	; 0x74
 80060e8:	4614      	mov	r4, r2
 80060ea:	4698      	mov	r8, r3
 80060ec:	4606      	mov	r6, r0
 80060ee:	b118      	cbz	r0, 80060f8 <_vfiprintf_r+0x18>
 80060f0:	6983      	ldr	r3, [r0, #24]
 80060f2:	b90b      	cbnz	r3, 80060f8 <_vfiprintf_r+0x18>
 80060f4:	f000 fb06 	bl	8006704 <__sinit>
 80060f8:	4b89      	ldr	r3, [pc, #548]	; (8006320 <_vfiprintf_r+0x240>)
 80060fa:	429d      	cmp	r5, r3
 80060fc:	d11b      	bne.n	8006136 <_vfiprintf_r+0x56>
 80060fe:	6875      	ldr	r5, [r6, #4]
 8006100:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006102:	07d9      	lsls	r1, r3, #31
 8006104:	d405      	bmi.n	8006112 <_vfiprintf_r+0x32>
 8006106:	89ab      	ldrh	r3, [r5, #12]
 8006108:	059a      	lsls	r2, r3, #22
 800610a:	d402      	bmi.n	8006112 <_vfiprintf_r+0x32>
 800610c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800610e:	f000 fb97 	bl	8006840 <__retarget_lock_acquire_recursive>
 8006112:	89ab      	ldrh	r3, [r5, #12]
 8006114:	071b      	lsls	r3, r3, #28
 8006116:	d501      	bpl.n	800611c <_vfiprintf_r+0x3c>
 8006118:	692b      	ldr	r3, [r5, #16]
 800611a:	b9eb      	cbnz	r3, 8006158 <_vfiprintf_r+0x78>
 800611c:	4629      	mov	r1, r5
 800611e:	4630      	mov	r0, r6
 8006120:	f000 f960 	bl	80063e4 <__swsetup_r>
 8006124:	b1c0      	cbz	r0, 8006158 <_vfiprintf_r+0x78>
 8006126:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006128:	07dc      	lsls	r4, r3, #31
 800612a:	d50e      	bpl.n	800614a <_vfiprintf_r+0x6a>
 800612c:	f04f 30ff 	mov.w	r0, #4294967295
 8006130:	b01d      	add	sp, #116	; 0x74
 8006132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006136:	4b7b      	ldr	r3, [pc, #492]	; (8006324 <_vfiprintf_r+0x244>)
 8006138:	429d      	cmp	r5, r3
 800613a:	d101      	bne.n	8006140 <_vfiprintf_r+0x60>
 800613c:	68b5      	ldr	r5, [r6, #8]
 800613e:	e7df      	b.n	8006100 <_vfiprintf_r+0x20>
 8006140:	4b79      	ldr	r3, [pc, #484]	; (8006328 <_vfiprintf_r+0x248>)
 8006142:	429d      	cmp	r5, r3
 8006144:	bf08      	it	eq
 8006146:	68f5      	ldreq	r5, [r6, #12]
 8006148:	e7da      	b.n	8006100 <_vfiprintf_r+0x20>
 800614a:	89ab      	ldrh	r3, [r5, #12]
 800614c:	0598      	lsls	r0, r3, #22
 800614e:	d4ed      	bmi.n	800612c <_vfiprintf_r+0x4c>
 8006150:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006152:	f000 fb76 	bl	8006842 <__retarget_lock_release_recursive>
 8006156:	e7e9      	b.n	800612c <_vfiprintf_r+0x4c>
 8006158:	2300      	movs	r3, #0
 800615a:	9309      	str	r3, [sp, #36]	; 0x24
 800615c:	2320      	movs	r3, #32
 800615e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006162:	f8cd 800c 	str.w	r8, [sp, #12]
 8006166:	2330      	movs	r3, #48	; 0x30
 8006168:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800632c <_vfiprintf_r+0x24c>
 800616c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006170:	f04f 0901 	mov.w	r9, #1
 8006174:	4623      	mov	r3, r4
 8006176:	469a      	mov	sl, r3
 8006178:	f813 2b01 	ldrb.w	r2, [r3], #1
 800617c:	b10a      	cbz	r2, 8006182 <_vfiprintf_r+0xa2>
 800617e:	2a25      	cmp	r2, #37	; 0x25
 8006180:	d1f9      	bne.n	8006176 <_vfiprintf_r+0x96>
 8006182:	ebba 0b04 	subs.w	fp, sl, r4
 8006186:	d00b      	beq.n	80061a0 <_vfiprintf_r+0xc0>
 8006188:	465b      	mov	r3, fp
 800618a:	4622      	mov	r2, r4
 800618c:	4629      	mov	r1, r5
 800618e:	4630      	mov	r0, r6
 8006190:	f7ff ff93 	bl	80060ba <__sfputs_r>
 8006194:	3001      	adds	r0, #1
 8006196:	f000 80aa 	beq.w	80062ee <_vfiprintf_r+0x20e>
 800619a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800619c:	445a      	add	r2, fp
 800619e:	9209      	str	r2, [sp, #36]	; 0x24
 80061a0:	f89a 3000 	ldrb.w	r3, [sl]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	f000 80a2 	beq.w	80062ee <_vfiprintf_r+0x20e>
 80061aa:	2300      	movs	r3, #0
 80061ac:	f04f 32ff 	mov.w	r2, #4294967295
 80061b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80061b4:	f10a 0a01 	add.w	sl, sl, #1
 80061b8:	9304      	str	r3, [sp, #16]
 80061ba:	9307      	str	r3, [sp, #28]
 80061bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80061c0:	931a      	str	r3, [sp, #104]	; 0x68
 80061c2:	4654      	mov	r4, sl
 80061c4:	2205      	movs	r2, #5
 80061c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061ca:	4858      	ldr	r0, [pc, #352]	; (800632c <_vfiprintf_r+0x24c>)
 80061cc:	f7fa f808 	bl	80001e0 <memchr>
 80061d0:	9a04      	ldr	r2, [sp, #16]
 80061d2:	b9d8      	cbnz	r0, 800620c <_vfiprintf_r+0x12c>
 80061d4:	06d1      	lsls	r1, r2, #27
 80061d6:	bf44      	itt	mi
 80061d8:	2320      	movmi	r3, #32
 80061da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80061de:	0713      	lsls	r3, r2, #28
 80061e0:	bf44      	itt	mi
 80061e2:	232b      	movmi	r3, #43	; 0x2b
 80061e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80061e8:	f89a 3000 	ldrb.w	r3, [sl]
 80061ec:	2b2a      	cmp	r3, #42	; 0x2a
 80061ee:	d015      	beq.n	800621c <_vfiprintf_r+0x13c>
 80061f0:	9a07      	ldr	r2, [sp, #28]
 80061f2:	4654      	mov	r4, sl
 80061f4:	2000      	movs	r0, #0
 80061f6:	f04f 0c0a 	mov.w	ip, #10
 80061fa:	4621      	mov	r1, r4
 80061fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006200:	3b30      	subs	r3, #48	; 0x30
 8006202:	2b09      	cmp	r3, #9
 8006204:	d94e      	bls.n	80062a4 <_vfiprintf_r+0x1c4>
 8006206:	b1b0      	cbz	r0, 8006236 <_vfiprintf_r+0x156>
 8006208:	9207      	str	r2, [sp, #28]
 800620a:	e014      	b.n	8006236 <_vfiprintf_r+0x156>
 800620c:	eba0 0308 	sub.w	r3, r0, r8
 8006210:	fa09 f303 	lsl.w	r3, r9, r3
 8006214:	4313      	orrs	r3, r2
 8006216:	9304      	str	r3, [sp, #16]
 8006218:	46a2      	mov	sl, r4
 800621a:	e7d2      	b.n	80061c2 <_vfiprintf_r+0xe2>
 800621c:	9b03      	ldr	r3, [sp, #12]
 800621e:	1d19      	adds	r1, r3, #4
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	9103      	str	r1, [sp, #12]
 8006224:	2b00      	cmp	r3, #0
 8006226:	bfbb      	ittet	lt
 8006228:	425b      	neglt	r3, r3
 800622a:	f042 0202 	orrlt.w	r2, r2, #2
 800622e:	9307      	strge	r3, [sp, #28]
 8006230:	9307      	strlt	r3, [sp, #28]
 8006232:	bfb8      	it	lt
 8006234:	9204      	strlt	r2, [sp, #16]
 8006236:	7823      	ldrb	r3, [r4, #0]
 8006238:	2b2e      	cmp	r3, #46	; 0x2e
 800623a:	d10c      	bne.n	8006256 <_vfiprintf_r+0x176>
 800623c:	7863      	ldrb	r3, [r4, #1]
 800623e:	2b2a      	cmp	r3, #42	; 0x2a
 8006240:	d135      	bne.n	80062ae <_vfiprintf_r+0x1ce>
 8006242:	9b03      	ldr	r3, [sp, #12]
 8006244:	1d1a      	adds	r2, r3, #4
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	9203      	str	r2, [sp, #12]
 800624a:	2b00      	cmp	r3, #0
 800624c:	bfb8      	it	lt
 800624e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006252:	3402      	adds	r4, #2
 8006254:	9305      	str	r3, [sp, #20]
 8006256:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800633c <_vfiprintf_r+0x25c>
 800625a:	7821      	ldrb	r1, [r4, #0]
 800625c:	2203      	movs	r2, #3
 800625e:	4650      	mov	r0, sl
 8006260:	f7f9 ffbe 	bl	80001e0 <memchr>
 8006264:	b140      	cbz	r0, 8006278 <_vfiprintf_r+0x198>
 8006266:	2340      	movs	r3, #64	; 0x40
 8006268:	eba0 000a 	sub.w	r0, r0, sl
 800626c:	fa03 f000 	lsl.w	r0, r3, r0
 8006270:	9b04      	ldr	r3, [sp, #16]
 8006272:	4303      	orrs	r3, r0
 8006274:	3401      	adds	r4, #1
 8006276:	9304      	str	r3, [sp, #16]
 8006278:	f814 1b01 	ldrb.w	r1, [r4], #1
 800627c:	482c      	ldr	r0, [pc, #176]	; (8006330 <_vfiprintf_r+0x250>)
 800627e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006282:	2206      	movs	r2, #6
 8006284:	f7f9 ffac 	bl	80001e0 <memchr>
 8006288:	2800      	cmp	r0, #0
 800628a:	d03f      	beq.n	800630c <_vfiprintf_r+0x22c>
 800628c:	4b29      	ldr	r3, [pc, #164]	; (8006334 <_vfiprintf_r+0x254>)
 800628e:	bb1b      	cbnz	r3, 80062d8 <_vfiprintf_r+0x1f8>
 8006290:	9b03      	ldr	r3, [sp, #12]
 8006292:	3307      	adds	r3, #7
 8006294:	f023 0307 	bic.w	r3, r3, #7
 8006298:	3308      	adds	r3, #8
 800629a:	9303      	str	r3, [sp, #12]
 800629c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800629e:	443b      	add	r3, r7
 80062a0:	9309      	str	r3, [sp, #36]	; 0x24
 80062a2:	e767      	b.n	8006174 <_vfiprintf_r+0x94>
 80062a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80062a8:	460c      	mov	r4, r1
 80062aa:	2001      	movs	r0, #1
 80062ac:	e7a5      	b.n	80061fa <_vfiprintf_r+0x11a>
 80062ae:	2300      	movs	r3, #0
 80062b0:	3401      	adds	r4, #1
 80062b2:	9305      	str	r3, [sp, #20]
 80062b4:	4619      	mov	r1, r3
 80062b6:	f04f 0c0a 	mov.w	ip, #10
 80062ba:	4620      	mov	r0, r4
 80062bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80062c0:	3a30      	subs	r2, #48	; 0x30
 80062c2:	2a09      	cmp	r2, #9
 80062c4:	d903      	bls.n	80062ce <_vfiprintf_r+0x1ee>
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d0c5      	beq.n	8006256 <_vfiprintf_r+0x176>
 80062ca:	9105      	str	r1, [sp, #20]
 80062cc:	e7c3      	b.n	8006256 <_vfiprintf_r+0x176>
 80062ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80062d2:	4604      	mov	r4, r0
 80062d4:	2301      	movs	r3, #1
 80062d6:	e7f0      	b.n	80062ba <_vfiprintf_r+0x1da>
 80062d8:	ab03      	add	r3, sp, #12
 80062da:	9300      	str	r3, [sp, #0]
 80062dc:	462a      	mov	r2, r5
 80062de:	4b16      	ldr	r3, [pc, #88]	; (8006338 <_vfiprintf_r+0x258>)
 80062e0:	a904      	add	r1, sp, #16
 80062e2:	4630      	mov	r0, r6
 80062e4:	f3af 8000 	nop.w
 80062e8:	4607      	mov	r7, r0
 80062ea:	1c78      	adds	r0, r7, #1
 80062ec:	d1d6      	bne.n	800629c <_vfiprintf_r+0x1bc>
 80062ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80062f0:	07d9      	lsls	r1, r3, #31
 80062f2:	d405      	bmi.n	8006300 <_vfiprintf_r+0x220>
 80062f4:	89ab      	ldrh	r3, [r5, #12]
 80062f6:	059a      	lsls	r2, r3, #22
 80062f8:	d402      	bmi.n	8006300 <_vfiprintf_r+0x220>
 80062fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80062fc:	f000 faa1 	bl	8006842 <__retarget_lock_release_recursive>
 8006300:	89ab      	ldrh	r3, [r5, #12]
 8006302:	065b      	lsls	r3, r3, #25
 8006304:	f53f af12 	bmi.w	800612c <_vfiprintf_r+0x4c>
 8006308:	9809      	ldr	r0, [sp, #36]	; 0x24
 800630a:	e711      	b.n	8006130 <_vfiprintf_r+0x50>
 800630c:	ab03      	add	r3, sp, #12
 800630e:	9300      	str	r3, [sp, #0]
 8006310:	462a      	mov	r2, r5
 8006312:	4b09      	ldr	r3, [pc, #36]	; (8006338 <_vfiprintf_r+0x258>)
 8006314:	a904      	add	r1, sp, #16
 8006316:	4630      	mov	r0, r6
 8006318:	f7fe fe3c 	bl	8004f94 <_printf_i>
 800631c:	e7e4      	b.n	80062e8 <_vfiprintf_r+0x208>
 800631e:	bf00      	nop
 8006320:	08006dfc 	.word	0x08006dfc
 8006324:	08006e1c 	.word	0x08006e1c
 8006328:	08006ddc 	.word	0x08006ddc
 800632c:	08006cfc 	.word	0x08006cfc
 8006330:	08006d06 	.word	0x08006d06
 8006334:	00000000 	.word	0x00000000
 8006338:	080060bb 	.word	0x080060bb
 800633c:	08006d02 	.word	0x08006d02

08006340 <__swbuf_r>:
 8006340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006342:	460e      	mov	r6, r1
 8006344:	4614      	mov	r4, r2
 8006346:	4605      	mov	r5, r0
 8006348:	b118      	cbz	r0, 8006352 <__swbuf_r+0x12>
 800634a:	6983      	ldr	r3, [r0, #24]
 800634c:	b90b      	cbnz	r3, 8006352 <__swbuf_r+0x12>
 800634e:	f000 f9d9 	bl	8006704 <__sinit>
 8006352:	4b21      	ldr	r3, [pc, #132]	; (80063d8 <__swbuf_r+0x98>)
 8006354:	429c      	cmp	r4, r3
 8006356:	d12b      	bne.n	80063b0 <__swbuf_r+0x70>
 8006358:	686c      	ldr	r4, [r5, #4]
 800635a:	69a3      	ldr	r3, [r4, #24]
 800635c:	60a3      	str	r3, [r4, #8]
 800635e:	89a3      	ldrh	r3, [r4, #12]
 8006360:	071a      	lsls	r2, r3, #28
 8006362:	d52f      	bpl.n	80063c4 <__swbuf_r+0x84>
 8006364:	6923      	ldr	r3, [r4, #16]
 8006366:	b36b      	cbz	r3, 80063c4 <__swbuf_r+0x84>
 8006368:	6923      	ldr	r3, [r4, #16]
 800636a:	6820      	ldr	r0, [r4, #0]
 800636c:	1ac0      	subs	r0, r0, r3
 800636e:	6963      	ldr	r3, [r4, #20]
 8006370:	b2f6      	uxtb	r6, r6
 8006372:	4283      	cmp	r3, r0
 8006374:	4637      	mov	r7, r6
 8006376:	dc04      	bgt.n	8006382 <__swbuf_r+0x42>
 8006378:	4621      	mov	r1, r4
 800637a:	4628      	mov	r0, r5
 800637c:	f000 f92e 	bl	80065dc <_fflush_r>
 8006380:	bb30      	cbnz	r0, 80063d0 <__swbuf_r+0x90>
 8006382:	68a3      	ldr	r3, [r4, #8]
 8006384:	3b01      	subs	r3, #1
 8006386:	60a3      	str	r3, [r4, #8]
 8006388:	6823      	ldr	r3, [r4, #0]
 800638a:	1c5a      	adds	r2, r3, #1
 800638c:	6022      	str	r2, [r4, #0]
 800638e:	701e      	strb	r6, [r3, #0]
 8006390:	6963      	ldr	r3, [r4, #20]
 8006392:	3001      	adds	r0, #1
 8006394:	4283      	cmp	r3, r0
 8006396:	d004      	beq.n	80063a2 <__swbuf_r+0x62>
 8006398:	89a3      	ldrh	r3, [r4, #12]
 800639a:	07db      	lsls	r3, r3, #31
 800639c:	d506      	bpl.n	80063ac <__swbuf_r+0x6c>
 800639e:	2e0a      	cmp	r6, #10
 80063a0:	d104      	bne.n	80063ac <__swbuf_r+0x6c>
 80063a2:	4621      	mov	r1, r4
 80063a4:	4628      	mov	r0, r5
 80063a6:	f000 f919 	bl	80065dc <_fflush_r>
 80063aa:	b988      	cbnz	r0, 80063d0 <__swbuf_r+0x90>
 80063ac:	4638      	mov	r0, r7
 80063ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063b0:	4b0a      	ldr	r3, [pc, #40]	; (80063dc <__swbuf_r+0x9c>)
 80063b2:	429c      	cmp	r4, r3
 80063b4:	d101      	bne.n	80063ba <__swbuf_r+0x7a>
 80063b6:	68ac      	ldr	r4, [r5, #8]
 80063b8:	e7cf      	b.n	800635a <__swbuf_r+0x1a>
 80063ba:	4b09      	ldr	r3, [pc, #36]	; (80063e0 <__swbuf_r+0xa0>)
 80063bc:	429c      	cmp	r4, r3
 80063be:	bf08      	it	eq
 80063c0:	68ec      	ldreq	r4, [r5, #12]
 80063c2:	e7ca      	b.n	800635a <__swbuf_r+0x1a>
 80063c4:	4621      	mov	r1, r4
 80063c6:	4628      	mov	r0, r5
 80063c8:	f000 f80c 	bl	80063e4 <__swsetup_r>
 80063cc:	2800      	cmp	r0, #0
 80063ce:	d0cb      	beq.n	8006368 <__swbuf_r+0x28>
 80063d0:	f04f 37ff 	mov.w	r7, #4294967295
 80063d4:	e7ea      	b.n	80063ac <__swbuf_r+0x6c>
 80063d6:	bf00      	nop
 80063d8:	08006dfc 	.word	0x08006dfc
 80063dc:	08006e1c 	.word	0x08006e1c
 80063e0:	08006ddc 	.word	0x08006ddc

080063e4 <__swsetup_r>:
 80063e4:	4b32      	ldr	r3, [pc, #200]	; (80064b0 <__swsetup_r+0xcc>)
 80063e6:	b570      	push	{r4, r5, r6, lr}
 80063e8:	681d      	ldr	r5, [r3, #0]
 80063ea:	4606      	mov	r6, r0
 80063ec:	460c      	mov	r4, r1
 80063ee:	b125      	cbz	r5, 80063fa <__swsetup_r+0x16>
 80063f0:	69ab      	ldr	r3, [r5, #24]
 80063f2:	b913      	cbnz	r3, 80063fa <__swsetup_r+0x16>
 80063f4:	4628      	mov	r0, r5
 80063f6:	f000 f985 	bl	8006704 <__sinit>
 80063fa:	4b2e      	ldr	r3, [pc, #184]	; (80064b4 <__swsetup_r+0xd0>)
 80063fc:	429c      	cmp	r4, r3
 80063fe:	d10f      	bne.n	8006420 <__swsetup_r+0x3c>
 8006400:	686c      	ldr	r4, [r5, #4]
 8006402:	89a3      	ldrh	r3, [r4, #12]
 8006404:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006408:	0719      	lsls	r1, r3, #28
 800640a:	d42c      	bmi.n	8006466 <__swsetup_r+0x82>
 800640c:	06dd      	lsls	r5, r3, #27
 800640e:	d411      	bmi.n	8006434 <__swsetup_r+0x50>
 8006410:	2309      	movs	r3, #9
 8006412:	6033      	str	r3, [r6, #0]
 8006414:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006418:	81a3      	strh	r3, [r4, #12]
 800641a:	f04f 30ff 	mov.w	r0, #4294967295
 800641e:	e03e      	b.n	800649e <__swsetup_r+0xba>
 8006420:	4b25      	ldr	r3, [pc, #148]	; (80064b8 <__swsetup_r+0xd4>)
 8006422:	429c      	cmp	r4, r3
 8006424:	d101      	bne.n	800642a <__swsetup_r+0x46>
 8006426:	68ac      	ldr	r4, [r5, #8]
 8006428:	e7eb      	b.n	8006402 <__swsetup_r+0x1e>
 800642a:	4b24      	ldr	r3, [pc, #144]	; (80064bc <__swsetup_r+0xd8>)
 800642c:	429c      	cmp	r4, r3
 800642e:	bf08      	it	eq
 8006430:	68ec      	ldreq	r4, [r5, #12]
 8006432:	e7e6      	b.n	8006402 <__swsetup_r+0x1e>
 8006434:	0758      	lsls	r0, r3, #29
 8006436:	d512      	bpl.n	800645e <__swsetup_r+0x7a>
 8006438:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800643a:	b141      	cbz	r1, 800644e <__swsetup_r+0x6a>
 800643c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006440:	4299      	cmp	r1, r3
 8006442:	d002      	beq.n	800644a <__swsetup_r+0x66>
 8006444:	4630      	mov	r0, r6
 8006446:	f7ff fdc9 	bl	8005fdc <_free_r>
 800644a:	2300      	movs	r3, #0
 800644c:	6363      	str	r3, [r4, #52]	; 0x34
 800644e:	89a3      	ldrh	r3, [r4, #12]
 8006450:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006454:	81a3      	strh	r3, [r4, #12]
 8006456:	2300      	movs	r3, #0
 8006458:	6063      	str	r3, [r4, #4]
 800645a:	6923      	ldr	r3, [r4, #16]
 800645c:	6023      	str	r3, [r4, #0]
 800645e:	89a3      	ldrh	r3, [r4, #12]
 8006460:	f043 0308 	orr.w	r3, r3, #8
 8006464:	81a3      	strh	r3, [r4, #12]
 8006466:	6923      	ldr	r3, [r4, #16]
 8006468:	b94b      	cbnz	r3, 800647e <__swsetup_r+0x9a>
 800646a:	89a3      	ldrh	r3, [r4, #12]
 800646c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006470:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006474:	d003      	beq.n	800647e <__swsetup_r+0x9a>
 8006476:	4621      	mov	r1, r4
 8006478:	4630      	mov	r0, r6
 800647a:	f000 fa07 	bl	800688c <__smakebuf_r>
 800647e:	89a0      	ldrh	r0, [r4, #12]
 8006480:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006484:	f010 0301 	ands.w	r3, r0, #1
 8006488:	d00a      	beq.n	80064a0 <__swsetup_r+0xbc>
 800648a:	2300      	movs	r3, #0
 800648c:	60a3      	str	r3, [r4, #8]
 800648e:	6963      	ldr	r3, [r4, #20]
 8006490:	425b      	negs	r3, r3
 8006492:	61a3      	str	r3, [r4, #24]
 8006494:	6923      	ldr	r3, [r4, #16]
 8006496:	b943      	cbnz	r3, 80064aa <__swsetup_r+0xc6>
 8006498:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800649c:	d1ba      	bne.n	8006414 <__swsetup_r+0x30>
 800649e:	bd70      	pop	{r4, r5, r6, pc}
 80064a0:	0781      	lsls	r1, r0, #30
 80064a2:	bf58      	it	pl
 80064a4:	6963      	ldrpl	r3, [r4, #20]
 80064a6:	60a3      	str	r3, [r4, #8]
 80064a8:	e7f4      	b.n	8006494 <__swsetup_r+0xb0>
 80064aa:	2000      	movs	r0, #0
 80064ac:	e7f7      	b.n	800649e <__swsetup_r+0xba>
 80064ae:	bf00      	nop
 80064b0:	2000000c 	.word	0x2000000c
 80064b4:	08006dfc 	.word	0x08006dfc
 80064b8:	08006e1c 	.word	0x08006e1c
 80064bc:	08006ddc 	.word	0x08006ddc

080064c0 <abort>:
 80064c0:	b508      	push	{r3, lr}
 80064c2:	2006      	movs	r0, #6
 80064c4:	f000 fa4a 	bl	800695c <raise>
 80064c8:	2001      	movs	r0, #1
 80064ca:	f7fb f95b 	bl	8001784 <_exit>
	...

080064d0 <__sflush_r>:
 80064d0:	898a      	ldrh	r2, [r1, #12]
 80064d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064d6:	4605      	mov	r5, r0
 80064d8:	0710      	lsls	r0, r2, #28
 80064da:	460c      	mov	r4, r1
 80064dc:	d458      	bmi.n	8006590 <__sflush_r+0xc0>
 80064de:	684b      	ldr	r3, [r1, #4]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	dc05      	bgt.n	80064f0 <__sflush_r+0x20>
 80064e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	dc02      	bgt.n	80064f0 <__sflush_r+0x20>
 80064ea:	2000      	movs	r0, #0
 80064ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80064f2:	2e00      	cmp	r6, #0
 80064f4:	d0f9      	beq.n	80064ea <__sflush_r+0x1a>
 80064f6:	2300      	movs	r3, #0
 80064f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80064fc:	682f      	ldr	r7, [r5, #0]
 80064fe:	602b      	str	r3, [r5, #0]
 8006500:	d032      	beq.n	8006568 <__sflush_r+0x98>
 8006502:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006504:	89a3      	ldrh	r3, [r4, #12]
 8006506:	075a      	lsls	r2, r3, #29
 8006508:	d505      	bpl.n	8006516 <__sflush_r+0x46>
 800650a:	6863      	ldr	r3, [r4, #4]
 800650c:	1ac0      	subs	r0, r0, r3
 800650e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006510:	b10b      	cbz	r3, 8006516 <__sflush_r+0x46>
 8006512:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006514:	1ac0      	subs	r0, r0, r3
 8006516:	2300      	movs	r3, #0
 8006518:	4602      	mov	r2, r0
 800651a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800651c:	6a21      	ldr	r1, [r4, #32]
 800651e:	4628      	mov	r0, r5
 8006520:	47b0      	blx	r6
 8006522:	1c43      	adds	r3, r0, #1
 8006524:	89a3      	ldrh	r3, [r4, #12]
 8006526:	d106      	bne.n	8006536 <__sflush_r+0x66>
 8006528:	6829      	ldr	r1, [r5, #0]
 800652a:	291d      	cmp	r1, #29
 800652c:	d82c      	bhi.n	8006588 <__sflush_r+0xb8>
 800652e:	4a2a      	ldr	r2, [pc, #168]	; (80065d8 <__sflush_r+0x108>)
 8006530:	40ca      	lsrs	r2, r1
 8006532:	07d6      	lsls	r6, r2, #31
 8006534:	d528      	bpl.n	8006588 <__sflush_r+0xb8>
 8006536:	2200      	movs	r2, #0
 8006538:	6062      	str	r2, [r4, #4]
 800653a:	04d9      	lsls	r1, r3, #19
 800653c:	6922      	ldr	r2, [r4, #16]
 800653e:	6022      	str	r2, [r4, #0]
 8006540:	d504      	bpl.n	800654c <__sflush_r+0x7c>
 8006542:	1c42      	adds	r2, r0, #1
 8006544:	d101      	bne.n	800654a <__sflush_r+0x7a>
 8006546:	682b      	ldr	r3, [r5, #0]
 8006548:	b903      	cbnz	r3, 800654c <__sflush_r+0x7c>
 800654a:	6560      	str	r0, [r4, #84]	; 0x54
 800654c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800654e:	602f      	str	r7, [r5, #0]
 8006550:	2900      	cmp	r1, #0
 8006552:	d0ca      	beq.n	80064ea <__sflush_r+0x1a>
 8006554:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006558:	4299      	cmp	r1, r3
 800655a:	d002      	beq.n	8006562 <__sflush_r+0x92>
 800655c:	4628      	mov	r0, r5
 800655e:	f7ff fd3d 	bl	8005fdc <_free_r>
 8006562:	2000      	movs	r0, #0
 8006564:	6360      	str	r0, [r4, #52]	; 0x34
 8006566:	e7c1      	b.n	80064ec <__sflush_r+0x1c>
 8006568:	6a21      	ldr	r1, [r4, #32]
 800656a:	2301      	movs	r3, #1
 800656c:	4628      	mov	r0, r5
 800656e:	47b0      	blx	r6
 8006570:	1c41      	adds	r1, r0, #1
 8006572:	d1c7      	bne.n	8006504 <__sflush_r+0x34>
 8006574:	682b      	ldr	r3, [r5, #0]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d0c4      	beq.n	8006504 <__sflush_r+0x34>
 800657a:	2b1d      	cmp	r3, #29
 800657c:	d001      	beq.n	8006582 <__sflush_r+0xb2>
 800657e:	2b16      	cmp	r3, #22
 8006580:	d101      	bne.n	8006586 <__sflush_r+0xb6>
 8006582:	602f      	str	r7, [r5, #0]
 8006584:	e7b1      	b.n	80064ea <__sflush_r+0x1a>
 8006586:	89a3      	ldrh	r3, [r4, #12]
 8006588:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800658c:	81a3      	strh	r3, [r4, #12]
 800658e:	e7ad      	b.n	80064ec <__sflush_r+0x1c>
 8006590:	690f      	ldr	r7, [r1, #16]
 8006592:	2f00      	cmp	r7, #0
 8006594:	d0a9      	beq.n	80064ea <__sflush_r+0x1a>
 8006596:	0793      	lsls	r3, r2, #30
 8006598:	680e      	ldr	r6, [r1, #0]
 800659a:	bf08      	it	eq
 800659c:	694b      	ldreq	r3, [r1, #20]
 800659e:	600f      	str	r7, [r1, #0]
 80065a0:	bf18      	it	ne
 80065a2:	2300      	movne	r3, #0
 80065a4:	eba6 0807 	sub.w	r8, r6, r7
 80065a8:	608b      	str	r3, [r1, #8]
 80065aa:	f1b8 0f00 	cmp.w	r8, #0
 80065ae:	dd9c      	ble.n	80064ea <__sflush_r+0x1a>
 80065b0:	6a21      	ldr	r1, [r4, #32]
 80065b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80065b4:	4643      	mov	r3, r8
 80065b6:	463a      	mov	r2, r7
 80065b8:	4628      	mov	r0, r5
 80065ba:	47b0      	blx	r6
 80065bc:	2800      	cmp	r0, #0
 80065be:	dc06      	bgt.n	80065ce <__sflush_r+0xfe>
 80065c0:	89a3      	ldrh	r3, [r4, #12]
 80065c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065c6:	81a3      	strh	r3, [r4, #12]
 80065c8:	f04f 30ff 	mov.w	r0, #4294967295
 80065cc:	e78e      	b.n	80064ec <__sflush_r+0x1c>
 80065ce:	4407      	add	r7, r0
 80065d0:	eba8 0800 	sub.w	r8, r8, r0
 80065d4:	e7e9      	b.n	80065aa <__sflush_r+0xda>
 80065d6:	bf00      	nop
 80065d8:	20400001 	.word	0x20400001

080065dc <_fflush_r>:
 80065dc:	b538      	push	{r3, r4, r5, lr}
 80065de:	690b      	ldr	r3, [r1, #16]
 80065e0:	4605      	mov	r5, r0
 80065e2:	460c      	mov	r4, r1
 80065e4:	b913      	cbnz	r3, 80065ec <_fflush_r+0x10>
 80065e6:	2500      	movs	r5, #0
 80065e8:	4628      	mov	r0, r5
 80065ea:	bd38      	pop	{r3, r4, r5, pc}
 80065ec:	b118      	cbz	r0, 80065f6 <_fflush_r+0x1a>
 80065ee:	6983      	ldr	r3, [r0, #24]
 80065f0:	b90b      	cbnz	r3, 80065f6 <_fflush_r+0x1a>
 80065f2:	f000 f887 	bl	8006704 <__sinit>
 80065f6:	4b14      	ldr	r3, [pc, #80]	; (8006648 <_fflush_r+0x6c>)
 80065f8:	429c      	cmp	r4, r3
 80065fa:	d11b      	bne.n	8006634 <_fflush_r+0x58>
 80065fc:	686c      	ldr	r4, [r5, #4]
 80065fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d0ef      	beq.n	80065e6 <_fflush_r+0xa>
 8006606:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006608:	07d0      	lsls	r0, r2, #31
 800660a:	d404      	bmi.n	8006616 <_fflush_r+0x3a>
 800660c:	0599      	lsls	r1, r3, #22
 800660e:	d402      	bmi.n	8006616 <_fflush_r+0x3a>
 8006610:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006612:	f000 f915 	bl	8006840 <__retarget_lock_acquire_recursive>
 8006616:	4628      	mov	r0, r5
 8006618:	4621      	mov	r1, r4
 800661a:	f7ff ff59 	bl	80064d0 <__sflush_r>
 800661e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006620:	07da      	lsls	r2, r3, #31
 8006622:	4605      	mov	r5, r0
 8006624:	d4e0      	bmi.n	80065e8 <_fflush_r+0xc>
 8006626:	89a3      	ldrh	r3, [r4, #12]
 8006628:	059b      	lsls	r3, r3, #22
 800662a:	d4dd      	bmi.n	80065e8 <_fflush_r+0xc>
 800662c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800662e:	f000 f908 	bl	8006842 <__retarget_lock_release_recursive>
 8006632:	e7d9      	b.n	80065e8 <_fflush_r+0xc>
 8006634:	4b05      	ldr	r3, [pc, #20]	; (800664c <_fflush_r+0x70>)
 8006636:	429c      	cmp	r4, r3
 8006638:	d101      	bne.n	800663e <_fflush_r+0x62>
 800663a:	68ac      	ldr	r4, [r5, #8]
 800663c:	e7df      	b.n	80065fe <_fflush_r+0x22>
 800663e:	4b04      	ldr	r3, [pc, #16]	; (8006650 <_fflush_r+0x74>)
 8006640:	429c      	cmp	r4, r3
 8006642:	bf08      	it	eq
 8006644:	68ec      	ldreq	r4, [r5, #12]
 8006646:	e7da      	b.n	80065fe <_fflush_r+0x22>
 8006648:	08006dfc 	.word	0x08006dfc
 800664c:	08006e1c 	.word	0x08006e1c
 8006650:	08006ddc 	.word	0x08006ddc

08006654 <std>:
 8006654:	2300      	movs	r3, #0
 8006656:	b510      	push	{r4, lr}
 8006658:	4604      	mov	r4, r0
 800665a:	e9c0 3300 	strd	r3, r3, [r0]
 800665e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006662:	6083      	str	r3, [r0, #8]
 8006664:	8181      	strh	r1, [r0, #12]
 8006666:	6643      	str	r3, [r0, #100]	; 0x64
 8006668:	81c2      	strh	r2, [r0, #14]
 800666a:	6183      	str	r3, [r0, #24]
 800666c:	4619      	mov	r1, r3
 800666e:	2208      	movs	r2, #8
 8006670:	305c      	adds	r0, #92	; 0x5c
 8006672:	f7fd fd39 	bl	80040e8 <memset>
 8006676:	4b05      	ldr	r3, [pc, #20]	; (800668c <std+0x38>)
 8006678:	6263      	str	r3, [r4, #36]	; 0x24
 800667a:	4b05      	ldr	r3, [pc, #20]	; (8006690 <std+0x3c>)
 800667c:	62a3      	str	r3, [r4, #40]	; 0x28
 800667e:	4b05      	ldr	r3, [pc, #20]	; (8006694 <std+0x40>)
 8006680:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006682:	4b05      	ldr	r3, [pc, #20]	; (8006698 <std+0x44>)
 8006684:	6224      	str	r4, [r4, #32]
 8006686:	6323      	str	r3, [r4, #48]	; 0x30
 8006688:	bd10      	pop	{r4, pc}
 800668a:	bf00      	nop
 800668c:	08006995 	.word	0x08006995
 8006690:	080069b7 	.word	0x080069b7
 8006694:	080069ef 	.word	0x080069ef
 8006698:	08006a13 	.word	0x08006a13

0800669c <_cleanup_r>:
 800669c:	4901      	ldr	r1, [pc, #4]	; (80066a4 <_cleanup_r+0x8>)
 800669e:	f000 b8af 	b.w	8006800 <_fwalk_reent>
 80066a2:	bf00      	nop
 80066a4:	080065dd 	.word	0x080065dd

080066a8 <__sfmoreglue>:
 80066a8:	b570      	push	{r4, r5, r6, lr}
 80066aa:	1e4a      	subs	r2, r1, #1
 80066ac:	2568      	movs	r5, #104	; 0x68
 80066ae:	4355      	muls	r5, r2
 80066b0:	460e      	mov	r6, r1
 80066b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80066b6:	f7fe fa23 	bl	8004b00 <_malloc_r>
 80066ba:	4604      	mov	r4, r0
 80066bc:	b140      	cbz	r0, 80066d0 <__sfmoreglue+0x28>
 80066be:	2100      	movs	r1, #0
 80066c0:	e9c0 1600 	strd	r1, r6, [r0]
 80066c4:	300c      	adds	r0, #12
 80066c6:	60a0      	str	r0, [r4, #8]
 80066c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80066cc:	f7fd fd0c 	bl	80040e8 <memset>
 80066d0:	4620      	mov	r0, r4
 80066d2:	bd70      	pop	{r4, r5, r6, pc}

080066d4 <__sfp_lock_acquire>:
 80066d4:	4801      	ldr	r0, [pc, #4]	; (80066dc <__sfp_lock_acquire+0x8>)
 80066d6:	f000 b8b3 	b.w	8006840 <__retarget_lock_acquire_recursive>
 80066da:	bf00      	nop
 80066dc:	200001d8 	.word	0x200001d8

080066e0 <__sfp_lock_release>:
 80066e0:	4801      	ldr	r0, [pc, #4]	; (80066e8 <__sfp_lock_release+0x8>)
 80066e2:	f000 b8ae 	b.w	8006842 <__retarget_lock_release_recursive>
 80066e6:	bf00      	nop
 80066e8:	200001d8 	.word	0x200001d8

080066ec <__sinit_lock_acquire>:
 80066ec:	4801      	ldr	r0, [pc, #4]	; (80066f4 <__sinit_lock_acquire+0x8>)
 80066ee:	f000 b8a7 	b.w	8006840 <__retarget_lock_acquire_recursive>
 80066f2:	bf00      	nop
 80066f4:	200001d3 	.word	0x200001d3

080066f8 <__sinit_lock_release>:
 80066f8:	4801      	ldr	r0, [pc, #4]	; (8006700 <__sinit_lock_release+0x8>)
 80066fa:	f000 b8a2 	b.w	8006842 <__retarget_lock_release_recursive>
 80066fe:	bf00      	nop
 8006700:	200001d3 	.word	0x200001d3

08006704 <__sinit>:
 8006704:	b510      	push	{r4, lr}
 8006706:	4604      	mov	r4, r0
 8006708:	f7ff fff0 	bl	80066ec <__sinit_lock_acquire>
 800670c:	69a3      	ldr	r3, [r4, #24]
 800670e:	b11b      	cbz	r3, 8006718 <__sinit+0x14>
 8006710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006714:	f7ff bff0 	b.w	80066f8 <__sinit_lock_release>
 8006718:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800671c:	6523      	str	r3, [r4, #80]	; 0x50
 800671e:	4b13      	ldr	r3, [pc, #76]	; (800676c <__sinit+0x68>)
 8006720:	4a13      	ldr	r2, [pc, #76]	; (8006770 <__sinit+0x6c>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	62a2      	str	r2, [r4, #40]	; 0x28
 8006726:	42a3      	cmp	r3, r4
 8006728:	bf04      	itt	eq
 800672a:	2301      	moveq	r3, #1
 800672c:	61a3      	streq	r3, [r4, #24]
 800672e:	4620      	mov	r0, r4
 8006730:	f000 f820 	bl	8006774 <__sfp>
 8006734:	6060      	str	r0, [r4, #4]
 8006736:	4620      	mov	r0, r4
 8006738:	f000 f81c 	bl	8006774 <__sfp>
 800673c:	60a0      	str	r0, [r4, #8]
 800673e:	4620      	mov	r0, r4
 8006740:	f000 f818 	bl	8006774 <__sfp>
 8006744:	2200      	movs	r2, #0
 8006746:	60e0      	str	r0, [r4, #12]
 8006748:	2104      	movs	r1, #4
 800674a:	6860      	ldr	r0, [r4, #4]
 800674c:	f7ff ff82 	bl	8006654 <std>
 8006750:	68a0      	ldr	r0, [r4, #8]
 8006752:	2201      	movs	r2, #1
 8006754:	2109      	movs	r1, #9
 8006756:	f7ff ff7d 	bl	8006654 <std>
 800675a:	68e0      	ldr	r0, [r4, #12]
 800675c:	2202      	movs	r2, #2
 800675e:	2112      	movs	r1, #18
 8006760:	f7ff ff78 	bl	8006654 <std>
 8006764:	2301      	movs	r3, #1
 8006766:	61a3      	str	r3, [r4, #24]
 8006768:	e7d2      	b.n	8006710 <__sinit+0xc>
 800676a:	bf00      	nop
 800676c:	08006b74 	.word	0x08006b74
 8006770:	0800669d 	.word	0x0800669d

08006774 <__sfp>:
 8006774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006776:	4607      	mov	r7, r0
 8006778:	f7ff ffac 	bl	80066d4 <__sfp_lock_acquire>
 800677c:	4b1e      	ldr	r3, [pc, #120]	; (80067f8 <__sfp+0x84>)
 800677e:	681e      	ldr	r6, [r3, #0]
 8006780:	69b3      	ldr	r3, [r6, #24]
 8006782:	b913      	cbnz	r3, 800678a <__sfp+0x16>
 8006784:	4630      	mov	r0, r6
 8006786:	f7ff ffbd 	bl	8006704 <__sinit>
 800678a:	3648      	adds	r6, #72	; 0x48
 800678c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006790:	3b01      	subs	r3, #1
 8006792:	d503      	bpl.n	800679c <__sfp+0x28>
 8006794:	6833      	ldr	r3, [r6, #0]
 8006796:	b30b      	cbz	r3, 80067dc <__sfp+0x68>
 8006798:	6836      	ldr	r6, [r6, #0]
 800679a:	e7f7      	b.n	800678c <__sfp+0x18>
 800679c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80067a0:	b9d5      	cbnz	r5, 80067d8 <__sfp+0x64>
 80067a2:	4b16      	ldr	r3, [pc, #88]	; (80067fc <__sfp+0x88>)
 80067a4:	60e3      	str	r3, [r4, #12]
 80067a6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80067aa:	6665      	str	r5, [r4, #100]	; 0x64
 80067ac:	f000 f847 	bl	800683e <__retarget_lock_init_recursive>
 80067b0:	f7ff ff96 	bl	80066e0 <__sfp_lock_release>
 80067b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80067b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80067bc:	6025      	str	r5, [r4, #0]
 80067be:	61a5      	str	r5, [r4, #24]
 80067c0:	2208      	movs	r2, #8
 80067c2:	4629      	mov	r1, r5
 80067c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80067c8:	f7fd fc8e 	bl	80040e8 <memset>
 80067cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80067d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80067d4:	4620      	mov	r0, r4
 80067d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067d8:	3468      	adds	r4, #104	; 0x68
 80067da:	e7d9      	b.n	8006790 <__sfp+0x1c>
 80067dc:	2104      	movs	r1, #4
 80067de:	4638      	mov	r0, r7
 80067e0:	f7ff ff62 	bl	80066a8 <__sfmoreglue>
 80067e4:	4604      	mov	r4, r0
 80067e6:	6030      	str	r0, [r6, #0]
 80067e8:	2800      	cmp	r0, #0
 80067ea:	d1d5      	bne.n	8006798 <__sfp+0x24>
 80067ec:	f7ff ff78 	bl	80066e0 <__sfp_lock_release>
 80067f0:	230c      	movs	r3, #12
 80067f2:	603b      	str	r3, [r7, #0]
 80067f4:	e7ee      	b.n	80067d4 <__sfp+0x60>
 80067f6:	bf00      	nop
 80067f8:	08006b74 	.word	0x08006b74
 80067fc:	ffff0001 	.word	0xffff0001

08006800 <_fwalk_reent>:
 8006800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006804:	4606      	mov	r6, r0
 8006806:	4688      	mov	r8, r1
 8006808:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800680c:	2700      	movs	r7, #0
 800680e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006812:	f1b9 0901 	subs.w	r9, r9, #1
 8006816:	d505      	bpl.n	8006824 <_fwalk_reent+0x24>
 8006818:	6824      	ldr	r4, [r4, #0]
 800681a:	2c00      	cmp	r4, #0
 800681c:	d1f7      	bne.n	800680e <_fwalk_reent+0xe>
 800681e:	4638      	mov	r0, r7
 8006820:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006824:	89ab      	ldrh	r3, [r5, #12]
 8006826:	2b01      	cmp	r3, #1
 8006828:	d907      	bls.n	800683a <_fwalk_reent+0x3a>
 800682a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800682e:	3301      	adds	r3, #1
 8006830:	d003      	beq.n	800683a <_fwalk_reent+0x3a>
 8006832:	4629      	mov	r1, r5
 8006834:	4630      	mov	r0, r6
 8006836:	47c0      	blx	r8
 8006838:	4307      	orrs	r7, r0
 800683a:	3568      	adds	r5, #104	; 0x68
 800683c:	e7e9      	b.n	8006812 <_fwalk_reent+0x12>

0800683e <__retarget_lock_init_recursive>:
 800683e:	4770      	bx	lr

08006840 <__retarget_lock_acquire_recursive>:
 8006840:	4770      	bx	lr

08006842 <__retarget_lock_release_recursive>:
 8006842:	4770      	bx	lr

08006844 <__swhatbuf_r>:
 8006844:	b570      	push	{r4, r5, r6, lr}
 8006846:	460e      	mov	r6, r1
 8006848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800684c:	2900      	cmp	r1, #0
 800684e:	b096      	sub	sp, #88	; 0x58
 8006850:	4614      	mov	r4, r2
 8006852:	461d      	mov	r5, r3
 8006854:	da07      	bge.n	8006866 <__swhatbuf_r+0x22>
 8006856:	2300      	movs	r3, #0
 8006858:	602b      	str	r3, [r5, #0]
 800685a:	89b3      	ldrh	r3, [r6, #12]
 800685c:	061a      	lsls	r2, r3, #24
 800685e:	d410      	bmi.n	8006882 <__swhatbuf_r+0x3e>
 8006860:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006864:	e00e      	b.n	8006884 <__swhatbuf_r+0x40>
 8006866:	466a      	mov	r2, sp
 8006868:	f000 f8fa 	bl	8006a60 <_fstat_r>
 800686c:	2800      	cmp	r0, #0
 800686e:	dbf2      	blt.n	8006856 <__swhatbuf_r+0x12>
 8006870:	9a01      	ldr	r2, [sp, #4]
 8006872:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006876:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800687a:	425a      	negs	r2, r3
 800687c:	415a      	adcs	r2, r3
 800687e:	602a      	str	r2, [r5, #0]
 8006880:	e7ee      	b.n	8006860 <__swhatbuf_r+0x1c>
 8006882:	2340      	movs	r3, #64	; 0x40
 8006884:	2000      	movs	r0, #0
 8006886:	6023      	str	r3, [r4, #0]
 8006888:	b016      	add	sp, #88	; 0x58
 800688a:	bd70      	pop	{r4, r5, r6, pc}

0800688c <__smakebuf_r>:
 800688c:	898b      	ldrh	r3, [r1, #12]
 800688e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006890:	079d      	lsls	r5, r3, #30
 8006892:	4606      	mov	r6, r0
 8006894:	460c      	mov	r4, r1
 8006896:	d507      	bpl.n	80068a8 <__smakebuf_r+0x1c>
 8006898:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800689c:	6023      	str	r3, [r4, #0]
 800689e:	6123      	str	r3, [r4, #16]
 80068a0:	2301      	movs	r3, #1
 80068a2:	6163      	str	r3, [r4, #20]
 80068a4:	b002      	add	sp, #8
 80068a6:	bd70      	pop	{r4, r5, r6, pc}
 80068a8:	ab01      	add	r3, sp, #4
 80068aa:	466a      	mov	r2, sp
 80068ac:	f7ff ffca 	bl	8006844 <__swhatbuf_r>
 80068b0:	9900      	ldr	r1, [sp, #0]
 80068b2:	4605      	mov	r5, r0
 80068b4:	4630      	mov	r0, r6
 80068b6:	f7fe f923 	bl	8004b00 <_malloc_r>
 80068ba:	b948      	cbnz	r0, 80068d0 <__smakebuf_r+0x44>
 80068bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068c0:	059a      	lsls	r2, r3, #22
 80068c2:	d4ef      	bmi.n	80068a4 <__smakebuf_r+0x18>
 80068c4:	f023 0303 	bic.w	r3, r3, #3
 80068c8:	f043 0302 	orr.w	r3, r3, #2
 80068cc:	81a3      	strh	r3, [r4, #12]
 80068ce:	e7e3      	b.n	8006898 <__smakebuf_r+0xc>
 80068d0:	4b0d      	ldr	r3, [pc, #52]	; (8006908 <__smakebuf_r+0x7c>)
 80068d2:	62b3      	str	r3, [r6, #40]	; 0x28
 80068d4:	89a3      	ldrh	r3, [r4, #12]
 80068d6:	6020      	str	r0, [r4, #0]
 80068d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068dc:	81a3      	strh	r3, [r4, #12]
 80068de:	9b00      	ldr	r3, [sp, #0]
 80068e0:	6163      	str	r3, [r4, #20]
 80068e2:	9b01      	ldr	r3, [sp, #4]
 80068e4:	6120      	str	r0, [r4, #16]
 80068e6:	b15b      	cbz	r3, 8006900 <__smakebuf_r+0x74>
 80068e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80068ec:	4630      	mov	r0, r6
 80068ee:	f000 f8c9 	bl	8006a84 <_isatty_r>
 80068f2:	b128      	cbz	r0, 8006900 <__smakebuf_r+0x74>
 80068f4:	89a3      	ldrh	r3, [r4, #12]
 80068f6:	f023 0303 	bic.w	r3, r3, #3
 80068fa:	f043 0301 	orr.w	r3, r3, #1
 80068fe:	81a3      	strh	r3, [r4, #12]
 8006900:	89a0      	ldrh	r0, [r4, #12]
 8006902:	4305      	orrs	r5, r0
 8006904:	81a5      	strh	r5, [r4, #12]
 8006906:	e7cd      	b.n	80068a4 <__smakebuf_r+0x18>
 8006908:	0800669d 	.word	0x0800669d

0800690c <_raise_r>:
 800690c:	291f      	cmp	r1, #31
 800690e:	b538      	push	{r3, r4, r5, lr}
 8006910:	4604      	mov	r4, r0
 8006912:	460d      	mov	r5, r1
 8006914:	d904      	bls.n	8006920 <_raise_r+0x14>
 8006916:	2316      	movs	r3, #22
 8006918:	6003      	str	r3, [r0, #0]
 800691a:	f04f 30ff 	mov.w	r0, #4294967295
 800691e:	bd38      	pop	{r3, r4, r5, pc}
 8006920:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006922:	b112      	cbz	r2, 800692a <_raise_r+0x1e>
 8006924:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006928:	b94b      	cbnz	r3, 800693e <_raise_r+0x32>
 800692a:	4620      	mov	r0, r4
 800692c:	f000 f830 	bl	8006990 <_getpid_r>
 8006930:	462a      	mov	r2, r5
 8006932:	4601      	mov	r1, r0
 8006934:	4620      	mov	r0, r4
 8006936:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800693a:	f000 b817 	b.w	800696c <_kill_r>
 800693e:	2b01      	cmp	r3, #1
 8006940:	d00a      	beq.n	8006958 <_raise_r+0x4c>
 8006942:	1c59      	adds	r1, r3, #1
 8006944:	d103      	bne.n	800694e <_raise_r+0x42>
 8006946:	2316      	movs	r3, #22
 8006948:	6003      	str	r3, [r0, #0]
 800694a:	2001      	movs	r0, #1
 800694c:	e7e7      	b.n	800691e <_raise_r+0x12>
 800694e:	2400      	movs	r4, #0
 8006950:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006954:	4628      	mov	r0, r5
 8006956:	4798      	blx	r3
 8006958:	2000      	movs	r0, #0
 800695a:	e7e0      	b.n	800691e <_raise_r+0x12>

0800695c <raise>:
 800695c:	4b02      	ldr	r3, [pc, #8]	; (8006968 <raise+0xc>)
 800695e:	4601      	mov	r1, r0
 8006960:	6818      	ldr	r0, [r3, #0]
 8006962:	f7ff bfd3 	b.w	800690c <_raise_r>
 8006966:	bf00      	nop
 8006968:	2000000c 	.word	0x2000000c

0800696c <_kill_r>:
 800696c:	b538      	push	{r3, r4, r5, lr}
 800696e:	4d07      	ldr	r5, [pc, #28]	; (800698c <_kill_r+0x20>)
 8006970:	2300      	movs	r3, #0
 8006972:	4604      	mov	r4, r0
 8006974:	4608      	mov	r0, r1
 8006976:	4611      	mov	r1, r2
 8006978:	602b      	str	r3, [r5, #0]
 800697a:	f7fa fef3 	bl	8001764 <_kill>
 800697e:	1c43      	adds	r3, r0, #1
 8006980:	d102      	bne.n	8006988 <_kill_r+0x1c>
 8006982:	682b      	ldr	r3, [r5, #0]
 8006984:	b103      	cbz	r3, 8006988 <_kill_r+0x1c>
 8006986:	6023      	str	r3, [r4, #0]
 8006988:	bd38      	pop	{r3, r4, r5, pc}
 800698a:	bf00      	nop
 800698c:	200001cc 	.word	0x200001cc

08006990 <_getpid_r>:
 8006990:	f7fa bee0 	b.w	8001754 <_getpid>

08006994 <__sread>:
 8006994:	b510      	push	{r4, lr}
 8006996:	460c      	mov	r4, r1
 8006998:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800699c:	f000 f894 	bl	8006ac8 <_read_r>
 80069a0:	2800      	cmp	r0, #0
 80069a2:	bfab      	itete	ge
 80069a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80069a6:	89a3      	ldrhlt	r3, [r4, #12]
 80069a8:	181b      	addge	r3, r3, r0
 80069aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80069ae:	bfac      	ite	ge
 80069b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80069b2:	81a3      	strhlt	r3, [r4, #12]
 80069b4:	bd10      	pop	{r4, pc}

080069b6 <__swrite>:
 80069b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069ba:	461f      	mov	r7, r3
 80069bc:	898b      	ldrh	r3, [r1, #12]
 80069be:	05db      	lsls	r3, r3, #23
 80069c0:	4605      	mov	r5, r0
 80069c2:	460c      	mov	r4, r1
 80069c4:	4616      	mov	r6, r2
 80069c6:	d505      	bpl.n	80069d4 <__swrite+0x1e>
 80069c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069cc:	2302      	movs	r3, #2
 80069ce:	2200      	movs	r2, #0
 80069d0:	f000 f868 	bl	8006aa4 <_lseek_r>
 80069d4:	89a3      	ldrh	r3, [r4, #12]
 80069d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80069da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80069de:	81a3      	strh	r3, [r4, #12]
 80069e0:	4632      	mov	r2, r6
 80069e2:	463b      	mov	r3, r7
 80069e4:	4628      	mov	r0, r5
 80069e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80069ea:	f000 b817 	b.w	8006a1c <_write_r>

080069ee <__sseek>:
 80069ee:	b510      	push	{r4, lr}
 80069f0:	460c      	mov	r4, r1
 80069f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069f6:	f000 f855 	bl	8006aa4 <_lseek_r>
 80069fa:	1c43      	adds	r3, r0, #1
 80069fc:	89a3      	ldrh	r3, [r4, #12]
 80069fe:	bf15      	itete	ne
 8006a00:	6560      	strne	r0, [r4, #84]	; 0x54
 8006a02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006a06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006a0a:	81a3      	strheq	r3, [r4, #12]
 8006a0c:	bf18      	it	ne
 8006a0e:	81a3      	strhne	r3, [r4, #12]
 8006a10:	bd10      	pop	{r4, pc}

08006a12 <__sclose>:
 8006a12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a16:	f000 b813 	b.w	8006a40 <_close_r>
	...

08006a1c <_write_r>:
 8006a1c:	b538      	push	{r3, r4, r5, lr}
 8006a1e:	4d07      	ldr	r5, [pc, #28]	; (8006a3c <_write_r+0x20>)
 8006a20:	4604      	mov	r4, r0
 8006a22:	4608      	mov	r0, r1
 8006a24:	4611      	mov	r1, r2
 8006a26:	2200      	movs	r2, #0
 8006a28:	602a      	str	r2, [r5, #0]
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	f7fa fed1 	bl	80017d2 <_write>
 8006a30:	1c43      	adds	r3, r0, #1
 8006a32:	d102      	bne.n	8006a3a <_write_r+0x1e>
 8006a34:	682b      	ldr	r3, [r5, #0]
 8006a36:	b103      	cbz	r3, 8006a3a <_write_r+0x1e>
 8006a38:	6023      	str	r3, [r4, #0]
 8006a3a:	bd38      	pop	{r3, r4, r5, pc}
 8006a3c:	200001cc 	.word	0x200001cc

08006a40 <_close_r>:
 8006a40:	b538      	push	{r3, r4, r5, lr}
 8006a42:	4d06      	ldr	r5, [pc, #24]	; (8006a5c <_close_r+0x1c>)
 8006a44:	2300      	movs	r3, #0
 8006a46:	4604      	mov	r4, r0
 8006a48:	4608      	mov	r0, r1
 8006a4a:	602b      	str	r3, [r5, #0]
 8006a4c:	f7fa fedd 	bl	800180a <_close>
 8006a50:	1c43      	adds	r3, r0, #1
 8006a52:	d102      	bne.n	8006a5a <_close_r+0x1a>
 8006a54:	682b      	ldr	r3, [r5, #0]
 8006a56:	b103      	cbz	r3, 8006a5a <_close_r+0x1a>
 8006a58:	6023      	str	r3, [r4, #0]
 8006a5a:	bd38      	pop	{r3, r4, r5, pc}
 8006a5c:	200001cc 	.word	0x200001cc

08006a60 <_fstat_r>:
 8006a60:	b538      	push	{r3, r4, r5, lr}
 8006a62:	4d07      	ldr	r5, [pc, #28]	; (8006a80 <_fstat_r+0x20>)
 8006a64:	2300      	movs	r3, #0
 8006a66:	4604      	mov	r4, r0
 8006a68:	4608      	mov	r0, r1
 8006a6a:	4611      	mov	r1, r2
 8006a6c:	602b      	str	r3, [r5, #0]
 8006a6e:	f7fa fed8 	bl	8001822 <_fstat>
 8006a72:	1c43      	adds	r3, r0, #1
 8006a74:	d102      	bne.n	8006a7c <_fstat_r+0x1c>
 8006a76:	682b      	ldr	r3, [r5, #0]
 8006a78:	b103      	cbz	r3, 8006a7c <_fstat_r+0x1c>
 8006a7a:	6023      	str	r3, [r4, #0]
 8006a7c:	bd38      	pop	{r3, r4, r5, pc}
 8006a7e:	bf00      	nop
 8006a80:	200001cc 	.word	0x200001cc

08006a84 <_isatty_r>:
 8006a84:	b538      	push	{r3, r4, r5, lr}
 8006a86:	4d06      	ldr	r5, [pc, #24]	; (8006aa0 <_isatty_r+0x1c>)
 8006a88:	2300      	movs	r3, #0
 8006a8a:	4604      	mov	r4, r0
 8006a8c:	4608      	mov	r0, r1
 8006a8e:	602b      	str	r3, [r5, #0]
 8006a90:	f7fa fed7 	bl	8001842 <_isatty>
 8006a94:	1c43      	adds	r3, r0, #1
 8006a96:	d102      	bne.n	8006a9e <_isatty_r+0x1a>
 8006a98:	682b      	ldr	r3, [r5, #0]
 8006a9a:	b103      	cbz	r3, 8006a9e <_isatty_r+0x1a>
 8006a9c:	6023      	str	r3, [r4, #0]
 8006a9e:	bd38      	pop	{r3, r4, r5, pc}
 8006aa0:	200001cc 	.word	0x200001cc

08006aa4 <_lseek_r>:
 8006aa4:	b538      	push	{r3, r4, r5, lr}
 8006aa6:	4d07      	ldr	r5, [pc, #28]	; (8006ac4 <_lseek_r+0x20>)
 8006aa8:	4604      	mov	r4, r0
 8006aaa:	4608      	mov	r0, r1
 8006aac:	4611      	mov	r1, r2
 8006aae:	2200      	movs	r2, #0
 8006ab0:	602a      	str	r2, [r5, #0]
 8006ab2:	461a      	mov	r2, r3
 8006ab4:	f7fa fed0 	bl	8001858 <_lseek>
 8006ab8:	1c43      	adds	r3, r0, #1
 8006aba:	d102      	bne.n	8006ac2 <_lseek_r+0x1e>
 8006abc:	682b      	ldr	r3, [r5, #0]
 8006abe:	b103      	cbz	r3, 8006ac2 <_lseek_r+0x1e>
 8006ac0:	6023      	str	r3, [r4, #0]
 8006ac2:	bd38      	pop	{r3, r4, r5, pc}
 8006ac4:	200001cc 	.word	0x200001cc

08006ac8 <_read_r>:
 8006ac8:	b538      	push	{r3, r4, r5, lr}
 8006aca:	4d07      	ldr	r5, [pc, #28]	; (8006ae8 <_read_r+0x20>)
 8006acc:	4604      	mov	r4, r0
 8006ace:	4608      	mov	r0, r1
 8006ad0:	4611      	mov	r1, r2
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	602a      	str	r2, [r5, #0]
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	f7fa fe5e 	bl	8001798 <_read>
 8006adc:	1c43      	adds	r3, r0, #1
 8006ade:	d102      	bne.n	8006ae6 <_read_r+0x1e>
 8006ae0:	682b      	ldr	r3, [r5, #0]
 8006ae2:	b103      	cbz	r3, 8006ae6 <_read_r+0x1e>
 8006ae4:	6023      	str	r3, [r4, #0]
 8006ae6:	bd38      	pop	{r3, r4, r5, pc}
 8006ae8:	200001cc 	.word	0x200001cc

08006aec <_init>:
 8006aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aee:	bf00      	nop
 8006af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006af2:	bc08      	pop	{r3}
 8006af4:	469e      	mov	lr, r3
 8006af6:	4770      	bx	lr

08006af8 <_fini>:
 8006af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006afa:	bf00      	nop
 8006afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006afe:	bc08      	pop	{r3}
 8006b00:	469e      	mov	lr, r3
 8006b02:	4770      	bx	lr
